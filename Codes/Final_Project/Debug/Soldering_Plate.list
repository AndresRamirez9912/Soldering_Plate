
Soldering_Plate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa14  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015c0  0800abb8  0800abb8  0001abb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c178  0800c178  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c178  0800c178  0001c178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c180  0800c180  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c180  0800c180  0001c180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c184  0800c184  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800c188  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  200002e0  0800c468  000202e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  0800c468  000205ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011609  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002721  00000000  00000000  00031919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00034f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ebe  00000000  00000000  00035d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109e6  00000000  00000000  0004ec2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009bb46  00000000  00000000  0005f614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb15a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005320  00000000  00000000  000fb1b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ab9c 	.word	0x0800ab9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	0800ab9c 	.word	0x0800ab9c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <FIR>:
double denominador[4]={1,-1.76004188034317,1.18289326203783,-0.278059917634547};

short mediciones[31]={0};
float salida[4]={0};

double FIR(short medicion_actual){
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	double resultado_suma=0; // Variable donde almacenare el resultado de la suma y la multiplicacion
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Almacenar el dato actual
	mediciones[30]=medicion_actual; // Almaceno la imformacion en la ultima posicion del vector
 8000f66:	4a23      	ldr	r2, [pc, #140]	; (8000ff4 <FIR+0xa4>)
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	8793      	strh	r3, [r2, #60]	; 0x3c

	for(short i=0; i<30; i++){ // For para recorrer todo el vector
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	81fb      	strh	r3, [r7, #14]
 8000f70:	e031      	b.n	8000fd6 <FIR+0x86>
		resultado_suma=resultado_suma+numerador[i]*mediciones[30-i]; // Calculo el Filtro
 8000f72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <FIR+0xa8>)
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f84:	f1c3 031e 	rsb	r3, r3, #30
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <FIR+0xa4>)
 8000f8a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fad0 	bl	8000534 <__aeabi_i2d>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4620      	mov	r0, r4
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	f7ff fb34 	bl	8000608 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fa8:	f7ff f978 	bl	800029c <__adddf3>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
		mediciones[i]=mediciones[i+1];
 8000fb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fbe:	490d      	ldr	r1, [pc, #52]	; (8000ff4 <FIR+0xa4>)
 8000fc0:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8000fc4:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <FIR+0xa4>)
 8000fc6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(short i=0; i<30; i++){ // For para recorrer todo el vector
 8000fca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	81fb      	strh	r3, [r7, #14]
 8000fd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fda:	2b1d      	cmp	r3, #29
 8000fdc:	ddc9      	ble.n	8000f72 <FIR+0x22>
	}
	return resultado_suma;
 8000fde:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fe2:	ec43 2b17 	vmov	d7, r2, r3
}
 8000fe6:	eeb0 0a47 	vmov.f32	s0, s14
 8000fea:	eef0 0a67 	vmov.f32	s1, s15
 8000fee:	3718      	adds	r7, #24
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ff4:	200002fc 	.word	0x200002fc
 8000ff8:	20000000 	.word	0x20000000

08000ffc <ILI9341_DrawFilledCircle>:
		}
	}
}

void ILI9341_DrawFilledCircle(uint16_t X, uint16_t Y, uint16_t radius, uint16_t color)
{
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b08b      	sub	sp, #44	; 0x2c
 8001000:	af00      	add	r7, sp, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	4611      	mov	r1, r2
 8001008:	461a      	mov	r2, r3
 800100a:	4623      	mov	r3, r4
 800100c:	80fb      	strh	r3, [r7, #6]
 800100e:	4603      	mov	r3, r0
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	460b      	mov	r3, r1
 8001014:	807b      	strh	r3, [r7, #2]
 8001016:	4613      	mov	r3, r2
 8001018:	803b      	strh	r3, [r7, #0]

	int x = radius;
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	int y = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
	int xChange = 1 - (radius << 1);
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	f1c3 0301 	rsb	r3, r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
	int yChange = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
	int radiusError = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

	while (x >= y)
 8001034:	e061      	b.n	80010fa <ILI9341_DrawFilledCircle+0xfe>
	{
		for (int i = X - x; i <= X + x; i++)
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	e018      	b.n	8001072 <ILI9341_DrawFilledCircle+0x76>
		{
			ILI9341_DrawPixel(i, Y + y,color);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	b298      	uxth	r0, r3
 8001044:	6a3b      	ldr	r3, [r7, #32]
 8001046:	b29a      	uxth	r2, r3
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	b29b      	uxth	r3, r3
 800104e:	883a      	ldrh	r2, [r7, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f000 fcc3 	bl	80019dc <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - y,color);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	b298      	uxth	r0, r3
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	b29b      	uxth	r3, r3
 800105e:	88ba      	ldrh	r2, [r7, #4]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	b29b      	uxth	r3, r3
 8001064:	883a      	ldrh	r2, [r7, #0]
 8001066:	4619      	mov	r1, r3
 8001068:	f000 fcb8 	bl	80019dc <ILI9341_DrawPixel>
		for (int i = X - x; i <= X + x; i++)
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	3301      	adds	r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	88fa      	ldrh	r2, [r7, #6]
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	4413      	add	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	429a      	cmp	r2, r3
 800107c:	dde0      	ble.n	8001040 <ILI9341_DrawFilledCircle+0x44>
		}

		for (int i = X - y; i <= X + y; i++)
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e018      	b.n	80010ba <ILI9341_DrawFilledCircle+0xbe>
		{
			ILI9341_DrawPixel(i, Y + x,color);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	b298      	uxth	r0, r3
 800108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108e:	b29a      	uxth	r2, r3
 8001090:	88bb      	ldrh	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	883a      	ldrh	r2, [r7, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f000 fc9f 	bl	80019dc <ILI9341_DrawPixel>
			ILI9341_DrawPixel(i, Y - x,color);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	b298      	uxth	r0, r3
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	88ba      	ldrh	r2, [r7, #4]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	883a      	ldrh	r2, [r7, #0]
 80010ae:	4619      	mov	r1, r3
 80010b0:	f000 fc94 	bl	80019dc <ILI9341_DrawPixel>
		for (int i = X - y; i <= X + y; i++)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	88fa      	ldrh	r2, [r7, #6]
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	4413      	add	r3, r2
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	dde0      	ble.n	8001088 <ILI9341_DrawFilledCircle+0x8c>
		}

		y++;
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	3301      	adds	r3, #1
 80010ca:	623b      	str	r3, [r7, #32]
		radiusError += yChange;
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]
		yChange += 2;
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3302      	adds	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]

		if (((radiusError << 1) + xChange) > 0)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005a      	lsls	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dd09      	ble.n	80010fa <ILI9341_DrawFilledCircle+0xfe>
		{
			x--;
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3b01      	subs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
			radiusError += xChange;
 80010ec:	697a      	ldr	r2, [r7, #20]
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	4413      	add	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
			xChange += 2;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	3302      	adds	r3, #2
 80010f8:	61fb      	str	r3, [r7, #28]
	while (x >= y)
 80010fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	429a      	cmp	r2, r3
 8001100:	da99      	bge.n	8001036 <ILI9341_DrawFilledCircle+0x3a>
		}
	}
}
 8001102:	bf00      	nop
 8001104:	bf00      	nop
 8001106:	372c      	adds	r7, #44	; 0x2c
 8001108:	46bd      	mov	sp, r7
 800110a:	bd90      	pop	{r4, r7, pc}

0800110c <ILI9341_DrawHollowRectangleCoord>:

void ILI9341_DrawHollowRectangleCoord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t color)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
	uint16_t xLen = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	82fb      	strh	r3, [r7, #22]
	uint16_t yLen = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	82bb      	strh	r3, [r7, #20]
	uint8_t negX = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	74fb      	strb	r3, [r7, #19]
	uint8_t negY = 0;
 8001136:	2300      	movs	r3, #0
 8001138:	74bb      	strb	r3, [r7, #18]
	float negCalc = 0;
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]

	negCalc = X1 - X0;
 8001140:	887a      	ldrh	r2, [r7, #2]
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800114e:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negX = 1;
 8001152:	edd7 7a03 	vldr	s15, [r7, #12]
 8001156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800115a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115e:	d501      	bpl.n	8001164 <ILI9341_DrawHollowRectangleCoord+0x58>
 8001160:	2301      	movs	r3, #1
 8001162:	74fb      	strb	r3, [r7, #19]
	negCalc = 0;
 8001164:	f04f 0300 	mov.w	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]

	negCalc = Y1 - Y0;
 800116a:	883a      	ldrh	r2, [r7, #0]
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001178:	edc7 7a03 	vstr	s15, [r7, #12]
	if(negCalc < 0) negY = 1;
 800117c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001188:	d501      	bpl.n	800118e <ILI9341_DrawHollowRectangleCoord+0x82>
 800118a:	2301      	movs	r3, #1
 800118c:	74bb      	strb	r3, [r7, #18]

	//DRAW HORIZONTAL!
	if(!negX)
 800118e:	7cfb      	ldrb	r3, [r7, #19]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d104      	bne.n	800119e <ILI9341_DrawHollowRectangleCoord+0x92>
	{
		xLen = X1 - X0;
 8001194:	887a      	ldrh	r2, [r7, #2]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	82fb      	strh	r3, [r7, #22]
 800119c:	e003      	b.n	80011a6 <ILI9341_DrawHollowRectangleCoord+0x9a>
	}
	else
	{
		xLen = X0 - X1;
 800119e:	88fa      	ldrh	r2, [r7, #6]
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_DrawHLine(X0, Y0, xLen, color);
 80011a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011a8:	8afa      	ldrh	r2, [r7, #22]
 80011aa:	88b9      	ldrh	r1, [r7, #4]
 80011ac:	88f8      	ldrh	r0, [r7, #6]
 80011ae:	f000 fcd7 	bl	8001b60 <ILI9341_DrawHLine>
	ILI9341_DrawHLine(X0, Y1, xLen, color);
 80011b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011b4:	8afa      	ldrh	r2, [r7, #22]
 80011b6:	8839      	ldrh	r1, [r7, #0]
 80011b8:	88f8      	ldrh	r0, [r7, #6]
 80011ba:	f000 fcd1 	bl	8001b60 <ILI9341_DrawHLine>

	//DRAW VERTICAL!
	if(!negY)
 80011be:	7cbb      	ldrb	r3, [r7, #18]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <ILI9341_DrawHollowRectangleCoord+0xc2>
	{
		yLen = Y1 - Y0;
 80011c4:	883a      	ldrh	r2, [r7, #0]
 80011c6:	88bb      	ldrh	r3, [r7, #4]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	82bb      	strh	r3, [r7, #20]
 80011cc:	e003      	b.n	80011d6 <ILI9341_DrawHollowRectangleCoord+0xca>
	}
	else
	{
		yLen = Y0 - Y1;
 80011ce:	88ba      	ldrh	r2, [r7, #4]
 80011d0:	883b      	ldrh	r3, [r7, #0]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	82bb      	strh	r3, [r7, #20]
	}

	ILI9341_DrawVLine(X0, Y0, yLen, color);
 80011d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011d8:	8aba      	ldrh	r2, [r7, #20]
 80011da:	88b9      	ldrh	r1, [r7, #4]
 80011dc:	88f8      	ldrh	r0, [r7, #6]
 80011de:	f000 fd03 	bl	8001be8 <ILI9341_DrawVLine>
	ILI9341_DrawVLine(X1, Y0, yLen, color);
 80011e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80011e4:	8aba      	ldrh	r2, [r7, #20]
 80011e6:	88b9      	ldrh	r1, [r7, #4]
 80011e8:	8878      	ldrh	r0, [r7, #2]
 80011ea:	f000 fcfd 	bl	8001be8 <ILI9341_DrawVLine>

	if((xLen > 0)||(yLen > 0))
 80011ee:	8afb      	ldrh	r3, [r7, #22]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <ILI9341_DrawHollowRectangleCoord+0xee>
 80011f4:	8abb      	ldrh	r3, [r7, #20]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d005      	beq.n	8001206 <ILI9341_DrawHollowRectangleCoord+0xfa>
	{
		ILI9341_DrawPixel(X1, Y1, color);
 80011fa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80011fc:	8839      	ldrh	r1, [r7, #0]
 80011fe:	887b      	ldrh	r3, [r7, #2]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fbeb 	bl	80019dc <ILI9341_DrawPixel>
	}
}
 8001206:	bf00      	nop
 8001208:	371c      	adds	r7, #28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd90      	pop	{r4, r7, pc}

0800120e <ILI9341_DrawChar>:

	ILI9341_DrawRectangle(X0True, Y0True, xLen, yLen, color);
}

void ILI9341_DrawChar(char ch, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 800120e:	b590      	push	{r4, r7, lr}
 8001210:	b08d      	sub	sp, #52	; 0x34
 8001212:	af02      	add	r7, sp, #8
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	4611      	mov	r1, r2
 8001218:	461a      	mov	r2, r3
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
 800121e:	460b      	mov	r3, r1
 8001220:	81bb      	strh	r3, [r7, #12]
 8001222:	4613      	mov	r3, r2
 8001224:	80fb      	strh	r3, [r7, #6]
	if ((ch < 31) || (ch > 127)) return;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	2b1e      	cmp	r3, #30
 800122a:	d961      	bls.n	80012f0 <ILI9341_DrawChar+0xe2>
 800122c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	db5d      	blt.n	80012f0 <ILI9341_DrawChar+0xe2>

	uint8_t fOffset, fWidth, fHeight, fBPL;
	uint8_t *tempChar;

	fOffset = font[0];
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	77fb      	strb	r3, [r7, #31]
	fWidth = font[1];
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	77bb      	strb	r3, [r7, #30]
	fHeight = font[2];
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	789b      	ldrb	r3, [r3, #2]
 8001244:	777b      	strb	r3, [r7, #29]
	fBPL = font[3];
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	78db      	ldrb	r3, [r3, #3]
 800124a:	773b      	strb	r3, [r7, #28]

	tempChar = (uint8_t*)&font[((ch - 0x20) * fOffset) + 4]; /* Current Character = Meta + (Character Index * Offset) */
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3b20      	subs	r3, #32
 8001250:	7ffa      	ldrb	r2, [r7, #31]
 8001252:	fb02 f303 	mul.w	r3, r2, r3
 8001256:	3304      	adds	r3, #4
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]

	/* Clear background first */
	ILI9341_DrawRectangle(X, Y, fWidth, fHeight, bgcolor);
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	b29a      	uxth	r2, r3
 8001262:	7f7b      	ldrb	r3, [r7, #29]
 8001264:	b29c      	uxth	r4, r3
 8001266:	88f9      	ldrh	r1, [r7, #6]
 8001268:	89b8      	ldrh	r0, [r7, #12]
 800126a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	4623      	mov	r3, r4
 8001270:	f000 fc1a 	bl	8001aa8 <ILI9341_DrawRectangle>

	for (int j=0; j < fHeight; j++)
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
 8001278:	e035      	b.n	80012e6 <ILI9341_DrawChar+0xd8>
	{
		for (int i=0; i < fWidth; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	e02b      	b.n	80012d8 <ILI9341_DrawChar+0xca>
		{
			uint8_t z =  tempChar[fBPL * i + ((j & 0xF8) >> 3) + 1]; /* (j & 0xF8) >> 3, increase one by 8-bits */
 8001280:	7f3b      	ldrb	r3, [r7, #28]
 8001282:	6a3a      	ldr	r2, [r7, #32]
 8001284:	fb02 f203 	mul.w	r2, r2, r3
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	10db      	asrs	r3, r3, #3
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	4413      	add	r3, r2
 8001292:	3301      	adds	r3, #1
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4413      	add	r3, r2
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	75fb      	strb	r3, [r7, #23]
			uint8_t b = 1 << (j & 0x07);
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	2201      	movs	r2, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	75bb      	strb	r3, [r7, #22]
			if (( z & b ) != 0x00)
 80012aa:	7dfa      	ldrb	r2, [r7, #23]
 80012ac:	7dbb      	ldrb	r3, [r7, #22]
 80012ae:	4013      	ands	r3, r2
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00d      	beq.n	80012d2 <ILI9341_DrawChar+0xc4>
			{
				ILI9341_DrawPixel(X+i, Y+j, color);
 80012b6:	6a3b      	ldr	r3, [r7, #32]
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	b298      	uxth	r0, r3
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4413      	add	r3, r2
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80012cc:	4619      	mov	r1, r3
 80012ce:	f000 fb85 	bl	80019dc <ILI9341_DrawPixel>
		for (int i=0; i < fWidth; i++)
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	3301      	adds	r3, #1
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	7fbb      	ldrb	r3, [r7, #30]
 80012da:	6a3a      	ldr	r2, [r7, #32]
 80012dc:	429a      	cmp	r2, r3
 80012de:	dbcf      	blt.n	8001280 <ILI9341_DrawChar+0x72>
	for (int j=0; j < fHeight; j++)
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3301      	adds	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
 80012e6:	7f7b      	ldrb	r3, [r7, #29]
 80012e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ea:	429a      	cmp	r2, r3
 80012ec:	dbc5      	blt.n	800127a <ILI9341_DrawChar+0x6c>
 80012ee:	e000      	b.n	80012f2 <ILI9341_DrawChar+0xe4>
	if ((ch < 31) || (ch > 127)) return;
 80012f0:	bf00      	nop
			}
		}
	}
}
 80012f2:	372c      	adds	r7, #44	; 0x2c
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd90      	pop	{r4, r7, pc}

080012f8 <ILI9341_DrawText>:

void ILI9341_DrawText(const char* str, const uint8_t font[], uint16_t X, uint16_t Y, uint16_t color, uint16_t bgcolor)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	4611      	mov	r1, r2
 8001304:	461a      	mov	r2, r3
 8001306:	460b      	mov	r3, r1
 8001308:	80fb      	strh	r3, [r7, #6]
 800130a:	4613      	mov	r3, r2
 800130c:	80bb      	strh	r3, [r7, #4]
	uint8_t charWidth;			/* Width of character */
	uint8_t fOffset = font[0];	/* Offset of character */
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	77fb      	strb	r3, [r7, #31]
	uint8_t fWidth = font[1];	/* Width of font */
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	77bb      	strb	r3, [r7, #30]

	while (*str)
 800131a:	e02d      	b.n	8001378 <ILI9341_DrawText+0x80>
	{
		ILI9341_DrawChar(*str, font, X, Y, color, bgcolor);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	7818      	ldrb	r0, [r3, #0]
 8001320:	88b9      	ldrh	r1, [r7, #4]
 8001322:	88fa      	ldrh	r2, [r7, #6]
 8001324:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001326:	9301      	str	r3, [sp, #4]
 8001328:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	460b      	mov	r3, r1
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	f7ff ff6d 	bl	800120e <ILI9341_DrawChar>

		/* Check character width and calculate proper position */
		uint8_t *tempChar = (uint8_t*)&font[((*str - 0x20) * fOffset) + 4];
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	3b20      	subs	r3, #32
 800133a:	7ffa      	ldrb	r2, [r7, #31]
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	3304      	adds	r3, #4
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	4413      	add	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
		charWidth = tempChar[0];
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	75fb      	strb	r3, [r7, #23]

		if(charWidth + 2 < fWidth)
 800134e:	7dfb      	ldrb	r3, [r7, #23]
 8001350:	1c9a      	adds	r2, r3, #2
 8001352:	7fbb      	ldrb	r3, [r7, #30]
 8001354:	429a      	cmp	r2, r3
 8001356:	da07      	bge.n	8001368 <ILI9341_DrawText+0x70>
		{
			/* If character width is smaller than font width */
			X += (charWidth + 2);
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	b29a      	uxth	r2, r3
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4413      	add	r3, r2
 8001360:	b29b      	uxth	r3, r3
 8001362:	3302      	adds	r3, #2
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	e004      	b.n	8001372 <ILI9341_DrawText+0x7a>
		}
		else
		{
			X += fWidth;
 8001368:	7fbb      	ldrb	r3, [r7, #30]
 800136a:	b29a      	uxth	r2, r3
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	4413      	add	r3, r2
 8001370:	80fb      	strh	r3, [r7, #6]
		}

		str++;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1cd      	bne.n	800131c <ILI9341_DrawText+0x24>
	}
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3720      	adds	r7, #32
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_SPI_TxCpltCallback>:

volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* Deselect when Tx Complete */
  if(hspi == HSPI_INSTANCE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a06      	ldr	r2, [pc, #24]	; (80013b0 <HAL_SPI_TxCpltCallback+0x24>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d105      	bne.n	80013a8 <HAL_SPI_TxCpltCallback+0x1c>
  {
	  HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800139c:	2201      	movs	r2, #1
 800139e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <HAL_SPI_TxCpltCallback+0x28>)
 80013a4:	f003 fa46 	bl	8004834 <HAL_GPIO_WritePin>
  }
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200004d8 	.word	0x200004d8
 80013b4:	40020400 	.word	0x40020400

080013b8 <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013c2:	bf00      	nop
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <ILI9341_SPI_Tx+0x30>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d1f8      	bne.n	80013c4 <ILI9341_SPI_Tx+0xc>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	2201      	movs	r2, #1
 80013d6:	4619      	mov	r1, r3
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <ILI9341_SPI_Tx+0x30>)
 80013da:	f004 f837 	bl	800544c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200004d8 	.word	0x200004d8

080013ec <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80013f8:	bf00      	nop
 80013fa:	4b08      	ldr	r3, [pc, #32]	; (800141c <ILI9341_SPI_TxBuffer+0x30>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 0302 	and.w	r3, r3, #2
 8001404:	2b02      	cmp	r3, #2
 8001406:	d1f8      	bne.n	80013fa <ILI9341_SPI_TxBuffer+0xe>
	HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	461a      	mov	r2, r3
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4803      	ldr	r0, [pc, #12]	; (800141c <ILI9341_SPI_TxBuffer+0x30>)
 8001410:	f004 f81c 	bl	800544c <HAL_SPI_Transmit_DMA>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200004d8 	.word	0x200004d8

08001420 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800142a:	2200      	movs	r2, #0
 800142c:	2101      	movs	r1, #1
 800142e:	4808      	ldr	r0, [pc, #32]	; (8001450 <ILI9341_WriteCommand+0x30>)
 8001430:	f003 fa00 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <ILI9341_WriteCommand+0x30>)
 800143c:	f003 f9fa 	bl	8004834 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffb8 	bl	80013b8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40020400 	.word	0x40020400

08001454 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 800145e:	2201      	movs	r2, #1
 8001460:	2101      	movs	r1, #1
 8001462:	4808      	ldr	r0, [pc, #32]	; (8001484 <ILI9341_WriteData+0x30>)
 8001464:	f003 f9e6 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8001468:	2200      	movs	r2, #0
 800146a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146e:	4805      	ldr	r0, [pc, #20]	; (8001484 <ILI9341_WriteData+0x30>)
 8001470:	f003 f9e0 	bl	8004834 <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff9e 	bl	80013b8 <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40020400 	.word	0x40020400

08001488 <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8001494:	2201      	movs	r2, #1
 8001496:	2101      	movs	r1, #1
 8001498:	4808      	ldr	r0, [pc, #32]	; (80014bc <ILI9341_WriteBuffer+0x34>)
 800149a:	f003 f9cb 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <ILI9341_WriteBuffer+0x34>)
 80014a6:	f003 f9c5 	bl	8004834 <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ff9c 	bl	80013ec <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020400 	.word	0x40020400

080014c0 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80014c0:	b590      	push	{r4, r7, lr}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4604      	mov	r4, r0
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4623      	mov	r3, r4
 80014d0:	80fb      	strh	r3, [r7, #6]
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]
 80014d6:	460b      	mov	r3, r1
 80014d8:	807b      	strh	r3, [r7, #2]
 80014da:	4613      	mov	r3, r2
 80014dc:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80014f8:	887b      	ldrh	r3, [r7, #2]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 80014fe:	202a      	movs	r0, #42	; 0x2a
 8001500:	f7ff ff8e 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2104      	movs	r1, #4
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ffbc 	bl	8001488 <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8001510:	88bb      	ldrh	r3, [r7, #4]
 8001512:	0a1b      	lsrs	r3, r3, #8
 8001514:	b29b      	uxth	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800151a:	88bb      	ldrh	r3, [r7, #4]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8001520:	883b      	ldrh	r3, [r7, #0]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	b29b      	uxth	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8001530:	202b      	movs	r0, #43	; 0x2b
 8001532:	f7ff ff75 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2104      	movs	r1, #4
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ffa3 	bl	8001488 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8001542:	202c      	movs	r0, #44	; 0x2c
 8001544:	f7ff ff6c 	bl	8001420 <ILI9341_WriteCommand>
}
 8001548:	bf00      	nop
 800154a:	3714      	adds	r7, #20
 800154c:	46bd      	mov	sp, r7
 800154e:	bd90      	pop	{r4, r7, pc}

08001550 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8001554:	2200      	movs	r2, #0
 8001556:	2102      	movs	r1, #2
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <ILI9341_Reset+0x40>)
 800155a:	f003 f96b 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800155e:	200a      	movs	r0, #10
 8001560:	f001 ff46 	bl	80033f0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156a:	4809      	ldr	r0, [pc, #36]	; (8001590 <ILI9341_Reset+0x40>)
 800156c:	f003 f962 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001570:	200a      	movs	r0, #10
 8001572:	f001 ff3d 	bl	80033f0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001576:	2201      	movs	r2, #1
 8001578:	2102      	movs	r1, #2
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <ILI9341_Reset+0x40>)
 800157c:	f003 f95a 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001586:	4802      	ldr	r0, [pc, #8]	; (8001590 <ILI9341_Reset+0x40>)
 8001588:	f003 f954 	bl	8004834 <HAL_GPIO_WritePin>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40020400 	.word	0x40020400

08001594 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 8001598:	2201      	movs	r2, #1
 800159a:	2102      	movs	r1, #2
 800159c:	4802      	ldr	r0, [pc, #8]	; (80015a8 <ILI9341_Enable+0x14>)
 800159e:	f003 f949 	bl	8004834 <HAL_GPIO_WritePin>
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020400 	.word	0x40020400

080015ac <ILI9341_Init>:

void ILI9341_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80015b0:	f7ff fff0 	bl	8001594 <ILI9341_Enable>
	ILI9341_Reset();
 80015b4:	f7ff ffcc 	bl	8001550 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80015b8:	2001      	movs	r0, #1
 80015ba:	f7ff ff31 	bl	8001420 <ILI9341_WriteCommand>
	HAL_Delay(10);
 80015be:	200a      	movs	r0, #10
 80015c0:	f001 ff16 	bl	80033f0 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80015c4:	20cb      	movs	r0, #203	; 0xcb
 80015c6:	f7ff ff2b 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80015ca:	2039      	movs	r0, #57	; 0x39
 80015cc:	f7ff ff42 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80015d0:	202c      	movs	r0, #44	; 0x2c
 80015d2:	f7ff ff3f 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff ff3c 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80015dc:	2034      	movs	r0, #52	; 0x34
 80015de:	f7ff ff39 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80015e2:	2002      	movs	r0, #2
 80015e4:	f7ff ff36 	bl	8001454 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80015e8:	20cf      	movs	r0, #207	; 0xcf
 80015ea:	f7ff ff19 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80015ee:	2000      	movs	r0, #0
 80015f0:	f7ff ff30 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80015f4:	20c1      	movs	r0, #193	; 0xc1
 80015f6:	f7ff ff2d 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80015fa:	2030      	movs	r0, #48	; 0x30
 80015fc:	f7ff ff2a 	bl	8001454 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8001600:	20e8      	movs	r0, #232	; 0xe8
 8001602:	f7ff ff0d 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 8001606:	2085      	movs	r0, #133	; 0x85
 8001608:	f7ff ff24 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff21 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8001612:	2078      	movs	r0, #120	; 0x78
 8001614:	f7ff ff1e 	bl	8001454 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 8001618:	20ea      	movs	r0, #234	; 0xea
 800161a:	f7ff ff01 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff ff18 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8001624:	2000      	movs	r0, #0
 8001626:	f7ff ff15 	bl	8001454 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800162a:	20ed      	movs	r0, #237	; 0xed
 800162c:	f7ff fef8 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8001630:	2064      	movs	r0, #100	; 0x64
 8001632:	f7ff ff0f 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8001636:	2003      	movs	r0, #3
 8001638:	f7ff ff0c 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 800163c:	2012      	movs	r0, #18
 800163e:	f7ff ff09 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8001642:	2081      	movs	r0, #129	; 0x81
 8001644:	f7ff ff06 	bl	8001454 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 8001648:	20f7      	movs	r0, #247	; 0xf7
 800164a:	f7ff fee9 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 800164e:	2020      	movs	r0, #32
 8001650:	f7ff ff00 	bl	8001454 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8001654:	20c0      	movs	r0, #192	; 0xc0
 8001656:	f7ff fee3 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800165a:	2023      	movs	r0, #35	; 0x23
 800165c:	f7ff fefa 	bl	8001454 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8001660:	20c1      	movs	r0, #193	; 0xc1
 8001662:	f7ff fedd 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 8001666:	2010      	movs	r0, #16
 8001668:	f7ff fef4 	bl	8001454 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 800166c:	20c5      	movs	r0, #197	; 0xc5
 800166e:	f7ff fed7 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8001672:	203e      	movs	r0, #62	; 0x3e
 8001674:	f7ff feee 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 8001678:	2028      	movs	r0, #40	; 0x28
 800167a:	f7ff feeb 	bl	8001454 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 800167e:	20c7      	movs	r0, #199	; 0xc7
 8001680:	f7ff fece 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8001684:	2086      	movs	r0, #134	; 0x86
 8001686:	f7ff fee5 	bl	8001454 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800168a:	2036      	movs	r0, #54	; 0x36
 800168c:	f7ff fec8 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8001690:	2048      	movs	r0, #72	; 0x48
 8001692:	f7ff fedf 	bl	8001454 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 8001696:	203a      	movs	r0, #58	; 0x3a
 8001698:	f7ff fec2 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 800169c:	2055      	movs	r0, #85	; 0x55
 800169e:	f7ff fed9 	bl	8001454 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80016a2:	20b1      	movs	r0, #177	; 0xb1
 80016a4:	f7ff febc 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f7ff fed3 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80016ae:	2018      	movs	r0, #24
 80016b0:	f7ff fed0 	bl	8001454 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80016b4:	20b6      	movs	r0, #182	; 0xb6
 80016b6:	f7ff feb3 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80016ba:	2008      	movs	r0, #8
 80016bc:	f7ff feca 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80016c0:	2082      	movs	r0, #130	; 0x82
 80016c2:	f7ff fec7 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80016c6:	2027      	movs	r0, #39	; 0x27
 80016c8:	f7ff fec4 	bl	8001454 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80016cc:	20f2      	movs	r0, #242	; 0xf2
 80016ce:	f7ff fea7 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff febe 	bl	8001454 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80016d8:	2026      	movs	r0, #38	; 0x26
 80016da:	f7ff fea1 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff feb8 	bl	8001454 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80016e4:	20e0      	movs	r0, #224	; 0xe0
 80016e6:	f7ff fe9b 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80016ea:	200f      	movs	r0, #15
 80016ec:	f7ff feb2 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80016f0:	2031      	movs	r0, #49	; 0x31
 80016f2:	f7ff feaf 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80016f6:	202b      	movs	r0, #43	; 0x2b
 80016f8:	f7ff feac 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 80016fc:	200c      	movs	r0, #12
 80016fe:	f7ff fea9 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001702:	200e      	movs	r0, #14
 8001704:	f7ff fea6 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001708:	2008      	movs	r0, #8
 800170a:	f7ff fea3 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 800170e:	204e      	movs	r0, #78	; 0x4e
 8001710:	f7ff fea0 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8001714:	20f1      	movs	r0, #241	; 0xf1
 8001716:	f7ff fe9d 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800171a:	2037      	movs	r0, #55	; 0x37
 800171c:	f7ff fe9a 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001720:	2007      	movs	r0, #7
 8001722:	f7ff fe97 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 8001726:	2010      	movs	r0, #16
 8001728:	f7ff fe94 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800172c:	2003      	movs	r0, #3
 800172e:	f7ff fe91 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001732:	200e      	movs	r0, #14
 8001734:	f7ff fe8e 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 8001738:	2009      	movs	r0, #9
 800173a:	f7ff fe8b 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff fe88 	bl	8001454 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8001744:	20e1      	movs	r0, #225	; 0xe1
 8001746:	f7ff fe6b 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fe82 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8001750:	200e      	movs	r0, #14
 8001752:	f7ff fe7f 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 8001756:	2014      	movs	r0, #20
 8001758:	f7ff fe7c 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800175c:	2003      	movs	r0, #3
 800175e:	f7ff fe79 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8001762:	2011      	movs	r0, #17
 8001764:	f7ff fe76 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8001768:	2007      	movs	r0, #7
 800176a:	f7ff fe73 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 800176e:	2031      	movs	r0, #49	; 0x31
 8001770:	f7ff fe70 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8001774:	20c1      	movs	r0, #193	; 0xc1
 8001776:	f7ff fe6d 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800177a:	2048      	movs	r0, #72	; 0x48
 800177c:	f7ff fe6a 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8001780:	2008      	movs	r0, #8
 8001782:	f7ff fe67 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 8001786:	200f      	movs	r0, #15
 8001788:	f7ff fe64 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 800178c:	200c      	movs	r0, #12
 800178e:	f7ff fe61 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8001792:	2031      	movs	r0, #49	; 0x31
 8001794:	f7ff fe5e 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 8001798:	2036      	movs	r0, #54	; 0x36
 800179a:	f7ff fe5b 	bl	8001454 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800179e:	200f      	movs	r0, #15
 80017a0:	f7ff fe58 	bl	8001454 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80017a4:	2011      	movs	r0, #17
 80017a6:	f7ff fe3b 	bl	8001420 <ILI9341_WriteCommand>
	HAL_Delay(100);
 80017aa:	2064      	movs	r0, #100	; 0x64
 80017ac:	f001 fe20 	bl	80033f0 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80017b0:	2029      	movs	r0, #41	; 0x29
 80017b2:	f7ff fe35 	bl	8001420 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80017b6:	2000      	movs	r0, #0
 80017b8:	f000 f802 	bl	80017c0 <ILI9341_SetRotation>
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}

080017c0 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80017ca:	2036      	movs	r0, #54	; 0x36
 80017cc:	f7ff fe28 	bl	8001420 <ILI9341_WriteCommand>
	HAL_Delay(1);
 80017d0:	2001      	movs	r0, #1
 80017d2:	f001 fe0d 	bl	80033f0 <HAL_Delay>

	switch(rotation)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d837      	bhi.n	800184c <ILI9341_SetRotation+0x8c>
 80017dc:	a201      	add	r2, pc, #4	; (adr r2, 80017e4 <ILI9341_SetRotation+0x24>)
 80017de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e2:	bf00      	nop
 80017e4:	080017f5 	.word	0x080017f5
 80017e8:	0800180b 	.word	0x0800180b
 80017ec:	08001821 	.word	0x08001821
 80017f0:	08001837 	.word	0x08001837
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80017f4:	2048      	movs	r0, #72	; 0x48
 80017f6:	f7ff fe2d 	bl	8001454 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80017fa:	4b17      	ldr	r3, [pc, #92]	; (8001858 <ILI9341_SetRotation+0x98>)
 80017fc:	22f0      	movs	r2, #240	; 0xf0
 80017fe:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <ILI9341_SetRotation+0x9c>)
 8001802:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001806:	801a      	strh	r2, [r3, #0]
		break;
 8001808:	e021      	b.n	800184e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 800180a:	2028      	movs	r0, #40	; 0x28
 800180c:	f7ff fe22 	bl	8001454 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <ILI9341_SetRotation+0x98>)
 8001812:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001816:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001818:	4b10      	ldr	r3, [pc, #64]	; (800185c <ILI9341_SetRotation+0x9c>)
 800181a:	22f0      	movs	r2, #240	; 0xf0
 800181c:	801a      	strh	r2, [r3, #0]
		break;
 800181e:	e016      	b.n	800184e <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8001820:	2088      	movs	r0, #136	; 0x88
 8001822:	f7ff fe17 	bl	8001454 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <ILI9341_SetRotation+0x98>)
 8001828:	22f0      	movs	r2, #240	; 0xf0
 800182a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <ILI9341_SetRotation+0x9c>)
 800182e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001832:	801a      	strh	r2, [r3, #0]
		break;
 8001834:	e00b      	b.n	800184e <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8001836:	20e8      	movs	r0, #232	; 0xe8
 8001838:	f7ff fe0c 	bl	8001454 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <ILI9341_SetRotation+0x98>)
 800183e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001842:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <ILI9341_SetRotation+0x9c>)
 8001846:	22f0      	movs	r2, #240	; 0xf0
 8001848:	801a      	strh	r2, [r3, #0]
		break;
 800184a:	e000      	b.n	800184e <ILI9341_SetRotation+0x8e>
	default:
		break;
 800184c:	bf00      	nop
	}
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200000fa 	.word	0x200000fa
 800185c:	200000f8 	.word	0x200000f8

08001860 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	80fb      	strh	r3, [r7, #6]
 800186c:	466b      	mov	r3, sp
 800186e:	461d      	mov	r5, r3
	uint32_t BufferSize = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24

	if((size*2) < BURST_MAX_SIZE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800187c:	d202      	bcs.n	8001884 <ILI9341_DrawColorBurst+0x24>
	{
		BufferSize = size;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	e002      	b.n	800188a <ILI9341_DrawColorBurst+0x2a>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8001884:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800188a:	2201      	movs	r2, #1
 800188c:	2101      	movs	r1, #1
 800188e:	483e      	ldr	r0, [pc, #248]	; (8001988 <ILI9341_DrawColorBurst+0x128>)
 8001890:	f002 ffd0 	bl	8004834 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800189a:	483b      	ldr	r0, [pc, #236]	; (8001988 <ILI9341_DrawColorBurst+0x128>)
 800189c:	f002 ffca 	bl	8004834 <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 80018a0:	88fb      	ldrh	r3, [r7, #6]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t BurstBuffer[BufferSize];
 80018aa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80018ac:	4623      	mov	r3, r4
 80018ae:	3b01      	subs	r3, #1
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	4620      	mov	r0, r4
 80018b4:	f04f 0100 	mov.w	r1, #0
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00cb      	lsls	r3, r1, #3
 80018c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018c6:	00c2      	lsls	r2, r0, #3
 80018c8:	4620      	mov	r0, r4
 80018ca:	f04f 0100 	mov.w	r1, #0
 80018ce:	f04f 0200 	mov.w	r2, #0
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	00cb      	lsls	r3, r1, #3
 80018d8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80018dc:	00c2      	lsls	r2, r0, #3
 80018de:	1de3      	adds	r3, r4, #7
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	ebad 0d03 	sub.w	sp, sp, r3
 80018e8:	466b      	mov	r3, sp
 80018ea:	3300      	adds	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 80018ee:	2300      	movs	r3, #0
 80018f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f2:	e00e      	b.n	8001912 <ILI9341_DrawColorBurst+0xb2>
	{
		BurstBuffer[j] = chifted;
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	4413      	add	r3, r2
 80018fa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80018fe:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001902:	3301      	adds	r3, #1
 8001904:	88fa      	ldrh	r2, [r7, #6]
 8001906:	b2d1      	uxtb	r1, r2
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 800190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190e:	3302      	adds	r3, #2
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
 8001912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	429a      	cmp	r2, r3
 8001918:	d3ec      	bcc.n	80018f4 <ILI9341_DrawColorBurst+0x94>
	}

	uint32_t SendingSize = size * 2;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001932:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001934:	fb01 f202 	mul.w	r2, r1, r2
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	60fb      	str	r3, [r7, #12]

	if(SendingInBlock != 0)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <ILI9341_DrawColorBurst+0x104>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001942:	2300      	movs	r3, #0
 8001944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001946:	e009      	b.n	800195c <ILI9341_DrawColorBurst+0xfc>
		{
			HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
 8001948:	69b9      	ldr	r1, [r7, #24]
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	b29a      	uxth	r2, r3
 800194e:	230a      	movs	r3, #10
 8001950:	480e      	ldr	r0, [pc, #56]	; (800198c <ILI9341_DrawColorBurst+0x12c>)
 8001952:	f003 fc3e 	bl	80051d2 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8001956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001958:	3301      	adds	r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d3f1      	bcc.n	8001948 <ILI9341_DrawColorBurst+0xe8>
		}
	}

	HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
 8001964:	69b9      	ldr	r1, [r7, #24]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	b29a      	uxth	r2, r3
 800196a:	230a      	movs	r3, #10
 800196c:	4807      	ldr	r0, [pc, #28]	; (800198c <ILI9341_DrawColorBurst+0x12c>)
 800196e:	f003 fc30 	bl	80051d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001972:	2201      	movs	r2, #1
 8001974:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <ILI9341_DrawColorBurst+0x128>)
 800197a:	f002 ff5b 	bl	8004834 <HAL_GPIO_WritePin>
 800197e:	46ad      	mov	sp, r5
}
 8001980:	bf00      	nop
 8001982:	3730      	adds	r7, #48	; 0x30
 8001984:	46bd      	mov	sp, r7
 8001986:	bdb0      	pop	{r4, r5, r7, pc}
 8001988:	40020400 	.word	0x40020400
 800198c:	200004d8 	.word	0x200004d8

08001990 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <ILI9341_FillScreen+0x44>)
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	b29a      	uxth	r2, r3
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <ILI9341_FillScreen+0x48>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	2100      	movs	r1, #0
 80019a8:	2000      	movs	r0, #0
 80019aa:	f7ff fd89 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <ILI9341_FillScreen+0x44>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <ILI9341_FillScreen+0x48>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	fb03 f302 	mul.w	r3, r3, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff4a 	bl	8001860 <ILI9341_DrawColorBurst>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200000fa 	.word	0x200000fa
 80019d8:	200000f8 	.word	0x200000f8

080019dc <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	80fb      	strh	r3, [r7, #6]
 80019e6:	460b      	mov	r3, r1
 80019e8:	80bb      	strh	r3, [r7, #4]
 80019ea:	4613      	mov	r3, r2
 80019ec:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <ILI9341_DrawPixel+0xc4>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d24d      	bcs.n	8001a96 <ILI9341_DrawPixel+0xba>
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <ILI9341_DrawPixel+0xc8>)
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	88ba      	ldrh	r2, [r7, #4]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d247      	bcs.n	8001a96 <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	753b      	strb	r3, [r7, #20]
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	757b      	strb	r3, [r7, #21]
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	121b      	asrs	r3, r3, #8
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	75bb      	strb	r3, [r7, #22]
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8001a2a:	88bb      	ldrh	r3, [r7, #4]
 8001a2c:	0a1b      	lsrs	r3, r3, #8
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	743b      	strb	r3, [r7, #16]
 8001a34:	88bb      	ldrh	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	747b      	strb	r3, [r7, #17]
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	121b      	asrs	r3, r3, #8
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	74bb      	strb	r3, [r7, #18]
 8001a44:	88bb      	ldrh	r3, [r7, #4]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	733b      	strb	r3, [r7, #12]
 8001a58:	887b      	ldrh	r3, [r7, #2]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8001a5e:	202a      	movs	r0, #42	; 0x2a
 8001a60:	f7ff fcde 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fd0c 	bl	8001488 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8001a70:	202b      	movs	r0, #43	; 0x2b
 8001a72:	f7ff fcd5 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2104      	movs	r1, #4
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fd03 	bl	8001488 <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8001a82:	202c      	movs	r0, #44	; 0x2c
 8001a84:	f7ff fccc 	bl	8001420 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8001a88:	f107 030c 	add.w	r3, r7, #12
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff fcfa 	bl	8001488 <ILI9341_WriteBuffer>
 8001a94:	e000      	b.n	8001a98 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001a96:	bf00      	nop
}
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200000fa 	.word	0x200000fa
 8001aa4:	200000f8 	.word	0x200000f8

08001aa8 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001aa8:	b590      	push	{r4, r7, lr}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4604      	mov	r4, r0
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	4603      	mov	r3, r0
 8001abc:	80bb      	strh	r3, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	807b      	strh	r3, [r7, #2]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001ac6:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <ILI9341_DrawRectangle+0xb0>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d23d      	bcs.n	8001b4e <ILI9341_DrawRectangle+0xa6>
 8001ad2:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <ILI9341_DrawRectangle+0xb4>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d237      	bcs.n	8001b4e <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a1c      	ldr	r2, [pc, #112]	; (8001b58 <ILI9341_DrawRectangle+0xb0>)
 8001ae6:	8812      	ldrh	r2, [r2, #0]
 8001ae8:	b292      	uxth	r2, r2
 8001aea:	4293      	cmp	r3, r2
 8001aec:	dd05      	ble.n	8001afa <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <ILI9341_DrawRectangle+0xb0>)
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8001afa:	88ba      	ldrh	r2, [r7, #4]
 8001afc:	883b      	ldrh	r3, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <ILI9341_DrawRectangle+0xb4>)
 8001b02:	8812      	ldrh	r2, [r2, #0]
 8001b04:	b292      	uxth	r2, r2
 8001b06:	4293      	cmp	r3, r2
 8001b08:	dd05      	ble.n	8001b16 <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <ILI9341_DrawRectangle+0xb4>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	88bb      	ldrh	r3, [r7, #4]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29c      	uxth	r4, r3
 8001b22:	88ba      	ldrh	r2, [r7, #4]
 8001b24:	883b      	ldrh	r3, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	88b9      	ldrh	r1, [r7, #4]
 8001b30:	88f8      	ldrh	r0, [r7, #6]
 8001b32:	4622      	mov	r2, r4
 8001b34:	f7ff fcc4 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8001b38:	883b      	ldrh	r3, [r7, #0]
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	fb02 f303 	mul.w	r3, r2, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	8b3b      	ldrh	r3, [r7, #24]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fe8a 	bl	8001860 <ILI9341_DrawColorBurst>
 8001b4c:	e000      	b.n	8001b50 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b4e:	bf00      	nop
}
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200000fa 	.word	0x200000fa
 8001b5c:	200000f8 	.word	0x200000f8

08001b60 <ILI9341_DrawHLine>:

void ILI9341_DrawHLine(uint16_t x, uint16_t y, uint16_t width, uint16_t color)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4604      	mov	r4, r0
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4623      	mov	r3, r4
 8001b70:	80fb      	strh	r3, [r7, #6]
 8001b72:	4603      	mov	r3, r0
 8001b74:	80bb      	strh	r3, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001b7e:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <ILI9341_DrawHLine+0x80>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	88fa      	ldrh	r2, [r7, #6]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d225      	bcs.n	8001bd6 <ILI9341_DrawHLine+0x76>
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <ILI9341_DrawHLine+0x84>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	88ba      	ldrh	r2, [r7, #4]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d21f      	bcs.n	8001bd6 <ILI9341_DrawHLine+0x76>

	if((x+width-1)>=LCD_WIDTH)
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	887b      	ldrh	r3, [r7, #2]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a10      	ldr	r2, [pc, #64]	; (8001be0 <ILI9341_DrawHLine+0x80>)
 8001b9e:	8812      	ldrh	r2, [r2, #0]
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	dd05      	ble.n	8001bb2 <ILI9341_DrawHLine+0x52>
	{
		width=LCD_WIDTH-x;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <ILI9341_DrawHLine+0x80>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x+width-1, y);
 8001bb2:	88fa      	ldrh	r2, [r7, #6]
 8001bb4:	887b      	ldrh	r3, [r7, #2]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	88bb      	ldrh	r3, [r7, #4]
 8001bc0:	88b9      	ldrh	r1, [r7, #4]
 8001bc2:	88f8      	ldrh	r0, [r7, #6]
 8001bc4:	f7ff fc7c 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, width);
 8001bc8:	887a      	ldrh	r2, [r7, #2]
 8001bca:	883b      	ldrh	r3, [r7, #0]
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fe46 	bl	8001860 <ILI9341_DrawColorBurst>
 8001bd4:	e000      	b.n	8001bd8 <ILI9341_DrawHLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001bd6:	bf00      	nop
}
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000fa 	.word	0x200000fa
 8001be4:	200000f8 	.word	0x200000f8

08001be8 <ILI9341_DrawVLine>:

void ILI9341_DrawVLine(uint16_t x, uint16_t y, uint16_t height, uint16_t color)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4604      	mov	r4, r0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80bb      	strh	r3, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c06:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <ILI9341_DrawVLine+0x80>)
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d225      	bcs.n	8001c5e <ILI9341_DrawVLine+0x76>
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <ILI9341_DrawVLine+0x84>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	88ba      	ldrh	r2, [r7, #4]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d21f      	bcs.n	8001c5e <ILI9341_DrawVLine+0x76>

	if((y+height-1)>=LCD_HEIGHT)
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	887b      	ldrh	r3, [r7, #2]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a11      	ldr	r2, [pc, #68]	; (8001c6c <ILI9341_DrawVLine+0x84>)
 8001c26:	8812      	ldrh	r2, [r2, #0]
 8001c28:	b292      	uxth	r2, r2
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	dd05      	ble.n	8001c3a <ILI9341_DrawVLine+0x52>
	{
		height=LCD_HEIGHT-y;
 8001c2e:	4b0f      	ldr	r3, [pc, #60]	; (8001c6c <ILI9341_DrawVLine+0x84>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	88bb      	ldrh	r3, [r7, #4]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_SetAddress(x, y, x, y+height-1);
 8001c3a:	88ba      	ldrh	r2, [r7, #4]
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	88fa      	ldrh	r2, [r7, #6]
 8001c48:	88b9      	ldrh	r1, [r7, #4]
 8001c4a:	88f8      	ldrh	r0, [r7, #6]
 8001c4c:	f7ff fc38 	bl	80014c0 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height);
 8001c50:	887a      	ldrh	r2, [r7, #2]
 8001c52:	883b      	ldrh	r3, [r7, #0]
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fe02 	bl	8001860 <ILI9341_DrawColorBurst>
 8001c5c:	e000      	b.n	8001c60 <ILI9341_DrawVLine+0x78>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8001c5e:	bf00      	nop
}
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd90      	pop	{r4, r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200000fa 	.word	0x200000fa
 8001c6c:	200000f8 	.word	0x200000f8

08001c70 <HAL_TIM_IC_CaptureCallback>:
static void MX_ADC1_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	if(bandera_referencia==0){
 8001c78:	4b26      	ldr	r3, [pc, #152]	; (8001d14 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d12c      	bne.n	8001cda <HAL_TIM_IC_CaptureCallback+0x6a>
		position=(TIM2->CNT)/4; // Get the counter
 8001c80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	b21a      	sxth	r2, r3
 8001c8a:	4b23      	ldr	r3, [pc, #140]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001c8c:	801a      	strh	r2, [r3, #0]
		if(position>3 && position<50){
 8001c8e:	4b22      	ldr	r3, [pc, #136]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	dd0b      	ble.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x40>
 8001c98:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	2b31      	cmp	r3, #49	; 0x31
 8001ca0:	dc06      	bgt.n	8001cb0 <HAL_TIM_IC_CaptureCallback+0x40>
			position=3;
 8001ca2:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	801a      	strh	r2, [r3, #0]
			TIM2->CNT=12;
 8001ca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cac:	220c      	movs	r2, #12
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24
		}
		if(position>50 && position<=htim2.Init.Period){ // Volver a la opcion 4
 8001cb0:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb6:	2b32      	cmp	r3, #50	; 0x32
 8001cb8:	dd22      	ble.n	8001d00 <HAL_TIM_IC_CaptureCallback+0x90>
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001cbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_TIM_IC_CaptureCallback+0xac>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d81a      	bhi.n	8001d00 <HAL_TIM_IC_CaptureCallback+0x90>
			position=0;
 8001cca:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	801a      	strh	r2, [r3, #0]
			TIM2->CNT=0;
 8001cd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001cd8:	e012      	b.n	8001d00 <HAL_TIM_IC_CaptureCallback+0x90>
		}
	}else{
		referencia=(TIM2->CNT)/4; // Get the counter
 8001cda:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001ce6:	801a      	strh	r2, [r3, #0]
		if(referencia<25){
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	; (8001d20 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	dc06      	bgt.n	8001d00 <HAL_TIM_IC_CaptureCallback+0x90>
			referencia=25;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001cf4:	2219      	movs	r2, #25
 8001cf6:	801a      	strh	r2, [r3, #0]
			TIM2->CNT=100;
 8001cf8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001cfc:	2264      	movs	r2, #100	; 0x64
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
	update=1; // Update the Interfaz
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000373 	.word	0x20000373
 8001d18:	2000033a 	.word	0x2000033a
 8001d1c:	20000530 	.word	0x20000530
 8001d20:	200000fe 	.word	0x200000fe
 8001d24:	200000fc 	.word	0x200000fc

08001d28 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // This will be execute every 50hz
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_value, 1); // Start the ADC with DMA
 8001d30:	2201      	movs	r2, #1
 8001d32:	4904      	ldr	r1, [pc, #16]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001d34:	4804      	ldr	r0, [pc, #16]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d36:	f001 fbc3 	bl	80034c0 <HAL_ADC_Start_DMA>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2000035a 	.word	0x2000035a
 8001d48:	20000430 	.word	0x20000430
 8001d4c:	00000000 	.word	0x00000000

08001d50 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

	bandera_temperatura=1;
 8001d58:	4bc3      	ldr	r3, [pc, #780]	; (8002068 <HAL_ADC_ConvCpltCallback+0x318>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	701a      	strb	r2, [r3, #0]

	// Filtrar
	voltage=ADC_value*3.3/4095.0; // Calculate the output voltage
 8001d5e:	4bc3      	ldr	r3, [pc, #780]	; (800206c <HAL_ADC_ConvCpltCallback+0x31c>)
 8001d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fbe5 	bl	8000534 <__aeabi_i2d>
 8001d6a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002008 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc4a 	bl	8000608 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	a3a4      	add	r3, pc, #656	; (adr r3, 8002010 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe fd6b 	bl	800085c <__aeabi_ddiv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	460b      	mov	r3, r1
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe ff13 	bl	8000bb8 <__aeabi_d2f>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4ab6      	ldr	r2, [pc, #728]	; (8002070 <HAL_ADC_ConvCpltCallback+0x320>)
 8001d96:	6013      	str	r3, [r2, #0]
	NTC_resistance=(voltage*250.0)/(3.3-voltage); //Calculate the NTC resistance
 8001d98:	4bb5      	ldr	r3, [pc, #724]	; (8002070 <HAL_ADC_ConvCpltCallback+0x320>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fbdb 	bl	8000558 <__aeabi_f2d>
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	4bb3      	ldr	r3, [pc, #716]	; (8002074 <HAL_ADC_ConvCpltCallback+0x324>)
 8001da8:	f7fe fc2e 	bl	8000608 <__aeabi_dmul>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	4bae      	ldr	r3, [pc, #696]	; (8002070 <HAL_ADC_ConvCpltCallback+0x320>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fbcd 	bl	8000558 <__aeabi_f2d>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	a191      	add	r1, pc, #580	; (adr r1, 8002008 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8001dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001dc8:	f7fe fa66 	bl	8000298 <__aeabi_dsub>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	4629      	mov	r1, r5
 8001dd4:	f7fe fd42 	bl	800085c <__aeabi_ddiv>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe feea 	bl	8000bb8 <__aeabi_d2f>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4aa4      	ldr	r2, [pc, #656]	; (8002078 <HAL_ADC_ConvCpltCallback+0x328>)
 8001de8:	6013      	str	r3, [r2, #0]
	temperature=(1.0/(A+ (B*log(NTC_resistance)) + (C*(pow(log(NTC_resistance),3))) )) -273.15;
 8001dea:	4ba3      	ldr	r3, [pc, #652]	; (8002078 <HAL_ADC_ConvCpltCallback+0x328>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbb2 	bl	8000558 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	ec43 2b10 	vmov	d0, r2, r3
 8001dfc:	f007 fd14 	bl	8009828 <log>
 8001e00:	ec51 0b10 	vmov	r0, r1, d0
 8001e04:	a384      	add	r3, pc, #528	; (adr r3, 8002018 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbfd 	bl	8000608 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	a382      	add	r3, pc, #520	; (adr r3, 8002020 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8001e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1c:	f7fe fa3e 	bl	800029c <__adddf3>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	4b93      	ldr	r3, [pc, #588]	; (8002078 <HAL_ADC_ConvCpltCallback+0x328>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb93 	bl	8000558 <__aeabi_f2d>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	ec43 2b10 	vmov	d0, r2, r3
 8001e3a:	f007 fcf5 	bl	8009828 <log>
 8001e3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001e42:	eef0 7a60 	vmov.f32	s15, s1
 8001e46:	ed9f 1b78 	vldr	d1, [pc, #480]	; 8002028 <HAL_ADC_ConvCpltCallback+0x2d8>
 8001e4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001e4e:	eef0 0a67 	vmov.f32	s1, s15
 8001e52:	f007 fd31 	bl	80098b8 <pow>
 8001e56:	ec51 0b10 	vmov	r0, r1, d0
 8001e5a:	a375      	add	r3, pc, #468	; (adr r3, 8002030 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fbd2 	bl	8000608 <__aeabi_dmul>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4620      	mov	r0, r4
 8001e6a:	4629      	mov	r1, r5
 8001e6c:	f7fe fa16 	bl	800029c <__adddf3>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	f04f 0000 	mov.w	r0, #0
 8001e78:	4980      	ldr	r1, [pc, #512]	; (800207c <HAL_ADC_ConvCpltCallback+0x32c>)
 8001e7a:	f7fe fcef 	bl	800085c <__aeabi_ddiv>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4610      	mov	r0, r2
 8001e84:	4619      	mov	r1, r3
 8001e86:	a36c      	add	r3, pc, #432	; (adr r3, 8002038 <HAL_ADC_ConvCpltCallback+0x2e8>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fa04 	bl	8000298 <__aeabi_dsub>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	497a      	ldr	r1, [pc, #488]	; (8002080 <HAL_ADC_ConvCpltCallback+0x330>)
 8001e96:	e9c1 2300 	strd	r2, r3, [r1]

	// Filter and calculated
	temperatura_actual=FIR(temperature); // Filter the temperature
 8001e9a:	4b79      	ldr	r3, [pc, #484]	; (8002080 <HAL_ADC_ConvCpltCallback+0x330>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f7fe fe60 	bl	8000b68 <__aeabi_d2iz>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff f84f 	bl	8000f50 <FIR>
 8001eb2:	ec53 2b10 	vmov	r2, r3, d0
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe7d 	bl	8000bb8 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a70      	ldr	r2, [pc, #448]	; (8002084 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ec2:	6013      	str	r3, [r2, #0]
	if(relay==1){
 8001ec4:	4b70      	ldr	r3, [pc, #448]	; (8002088 <HAL_ADC_ConvCpltCallback+0x338>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	f040 8108 	bne.w	80020de <HAL_ADC_ConvCpltCallback+0x38e>
		muestreo++;
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	4a6d      	ldr	r2, [pc, #436]	; (800208c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001ed6:	6013      	str	r3, [r2, #0]
		if(muestreo>=10*2){ // Control cada 10s
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b13      	cmp	r3, #19
 8001ede:	f340 80fe 	ble.w	80020de <HAL_ADC_ConvCpltCallback+0x38e>
			muestreo=0;
 8001ee2:	4b6a      	ldr	r3, [pc, #424]	; (800208c <HAL_ADC_ConvCpltCallback+0x33c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
			// Calcular error
			error_actual=(referencia-temperatura_actual); // Calculo el error
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_ADC_ConvCpltCallback+0x340>)
 8001eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eee:	ee07 3a90 	vmov	s15, r3
 8001ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef6:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_ADC_ConvCpltCallback+0x334>)
 8001ef8:	edd3 7a00 	vldr	s15, [r3]
 8001efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f00:	4b64      	ldr	r3, [pc, #400]	; (8002094 <HAL_ADC_ConvCpltCallback+0x344>)
 8001f02:	edc3 7a00 	vstr	s15, [r3]

			// Calcular control
			control_actual=0.1838*error_actual-0.1404*error_atrasado+0.02477*error_atrasadox2-0.5517*control_atrasado+0.04517*control_atrasadox2;
 8001f06:	4b63      	ldr	r3, [pc, #396]	; (8002094 <HAL_ADC_ConvCpltCallback+0x344>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fb24 	bl	8000558 <__aeabi_f2d>
 8001f10:	a34b      	add	r3, pc, #300	; (adr r3, 8002040 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f16:	f7fe fb77 	bl	8000608 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b5d      	ldr	r3, [pc, #372]	; (8002098 <HAL_ADC_ConvCpltCallback+0x348>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fb16 	bl	8000558 <__aeabi_f2d>
 8001f2c:	a346      	add	r3, pc, #280	; (adr r3, 8002048 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb69 	bl	8000608 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe f9ab 	bl	8000298 <__aeabi_dsub>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4614      	mov	r4, r2
 8001f48:	461d      	mov	r5, r3
 8001f4a:	4b54      	ldr	r3, [pc, #336]	; (800209c <HAL_ADC_ConvCpltCallback+0x34c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fb02 	bl	8000558 <__aeabi_f2d>
 8001f54:	a33e      	add	r3, pc, #248	; (adr r3, 8002050 <HAL_ADC_ConvCpltCallback+0x300>)
 8001f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5a:	f7fe fb55 	bl	8000608 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4620      	mov	r0, r4
 8001f64:	4629      	mov	r1, r5
 8001f66:	f7fe f999 	bl	800029c <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4614      	mov	r4, r2
 8001f70:	461d      	mov	r5, r3
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe faee 	bl	8000558 <__aeabi_f2d>
 8001f7c:	a336      	add	r3, pc, #216	; (adr r3, 8002058 <HAL_ADC_ConvCpltCallback+0x308>)
 8001f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f82:	f7fe fb41 	bl	8000608 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe f983 	bl	8000298 <__aeabi_dsub>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4614      	mov	r4, r2
 8001f98:	461d      	mov	r5, r3
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x354>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fada 	bl	8000558 <__aeabi_f2d>
 8001fa4:	a32e      	add	r3, pc, #184	; (adr r3, 8002060 <HAL_ADC_ConvCpltCallback+0x310>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	f7fe fb2d 	bl	8000608 <__aeabi_dmul>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe f971 	bl	800029c <__adddf3>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fdf9 	bl	8000bb8 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a37      	ldr	r2, [pc, #220]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x358>)
 8001fca:	6013      	str	r3, [r2, #0]

			// Actualizar variables
			control_atrasadox2=control_atrasado;
 8001fcc:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	; (80020a4 <HAL_ADC_ConvCpltCallback+0x354>)
 8001fd2:	6013      	str	r3, [r2, #0]
			control_atrasado=control_actual;
 8001fd4:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x358>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a31      	ldr	r2, [pc, #196]	; (80020a0 <HAL_ADC_ConvCpltCallback+0x350>)
 8001fda:	6013      	str	r3, [r2, #0]

			error_atrasadox2=error_atrasado;
 8001fdc:	4b2e      	ldr	r3, [pc, #184]	; (8002098 <HAL_ADC_ConvCpltCallback+0x348>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2e      	ldr	r2, [pc, #184]	; (800209c <HAL_ADC_ConvCpltCallback+0x34c>)
 8001fe2:	6013      	str	r3, [r2, #0]
			error_atrasado=error_actual;
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_ADC_ConvCpltCallback+0x344>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <HAL_ADC_ConvCpltCallback+0x348>)
 8001fea:	6013      	str	r3, [r2, #0]

			// Limitar la señal de control


			// Escalar a PWM
			if(control_actual<0){
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_ADC_ConvCpltCallback+0x358>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffa:	d559      	bpl.n	80020b0 <HAL_ADC_ConvCpltCallback+0x360>
				TIM3->CCR1=0;
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_ADC_ConvCpltCallback+0x35c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
				}
			}
		}
	}

}
 8002002:	e06c      	b.n	80020de <HAL_ADC_ConvCpltCallback+0x38e>
 8002004:	f3af 8000 	nop.w
 8002008:	66666666 	.word	0x66666666
 800200c:	400a6666 	.word	0x400a6666
 8002010:	00000000 	.word	0x00000000
 8002014:	40affe00 	.word	0x40affe00
 8002018:	2687ff12 	.word	0x2687ff12
 800201c:	3f491916 	.word	0x3f491916
 8002020:	29431a5c 	.word	0x29431a5c
 8002024:	3f341def 	.word	0x3f341def
 8002028:	00000000 	.word	0x00000000
 800202c:	40080000 	.word	0x40080000
 8002030:	fc84ae22 	.word	0xfc84ae22
 8002034:	bedd4098 	.word	0xbedd4098
 8002038:	66666666 	.word	0x66666666
 800203c:	40711266 	.word	0x40711266
 8002040:	26809d49 	.word	0x26809d49
 8002044:	3fc786c2 	.word	0x3fc786c2
 8002048:	902de00d 	.word	0x902de00d
 800204c:	3fc1f8a0 	.word	0x3fc1f8a0
 8002050:	8fb00bcc 	.word	0x8fb00bcc
 8002054:	3f995d4e 	.word	0x3f995d4e
 8002058:	c226809d 	.word	0xc226809d
 800205c:	3fe1a786 	.word	0x3fe1a786
 8002060:	b18548aa 	.word	0xb18548aa
 8002064:	3fa72085 	.word	0x3fa72085
 8002068:	20000372 	.word	0x20000372
 800206c:	2000035a 	.word	0x2000035a
 8002070:	2000035c 	.word	0x2000035c
 8002074:	406f4000 	.word	0x406f4000
 8002078:	20000360 	.word	0x20000360
 800207c:	3ff00000 	.word	0x3ff00000
 8002080:	20000368 	.word	0x20000368
 8002084:	20000374 	.word	0x20000374
 8002088:	20000370 	.word	0x20000370
 800208c:	20000390 	.word	0x20000390
 8002090:	200000fe 	.word	0x200000fe
 8002094:	20000384 	.word	0x20000384
 8002098:	20000388 	.word	0x20000388
 800209c:	2000038c 	.word	0x2000038c
 80020a0:	2000037c 	.word	0x2000037c
 80020a4:	20000380 	.word	0x20000380
 80020a8:	20000378 	.word	0x20000378
 80020ac:	40000400 	.word	0x40000400
				TIM3->CCR1=control_actual*20000/1;
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_ADC_ConvCpltCallback+0x398>)
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80020ec <HAL_ADC_ConvCpltCallback+0x39c>
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80020c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020c4:	ee17 2a90 	vmov	r2, s15
 80020c8:	635a      	str	r2, [r3, #52]	; 0x34
				if(TIM3->CCR1>20000){
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80020cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ce:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d903      	bls.n	80020de <HAL_ADC_ConvCpltCallback+0x38e>
					TIM3->CCR1=20000;
 80020d6:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <HAL_ADC_ConvCpltCallback+0x3a0>)
 80020d8:	f644 6220 	movw	r2, #20000	; 0x4e20
 80020dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020de:	bf00      	nop
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bdb0      	pop	{r4, r5, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	20000378 	.word	0x20000378
 80020ec:	469c4000 	.word	0x469c4000
 80020f0:	40000400 	.word	0x40000400

080020f4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==GPIO_PIN_2){
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d126      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0x5e>
		led=1; // Update the Led indicator
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
		if(position==0){
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_GPIO_EXTI_Callback+0x70>)
 800210c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d103      	bne.n	800211c <HAL_GPIO_EXTI_Callback+0x28>
			relay=1;
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_GPIO_EXTI_Callback+0x74>)
 8002116:	2201      	movs	r2, #1
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	e007      	b.n	800212c <HAL_GPIO_EXTI_Callback+0x38>
		}else if(position==1){
 800211c:	4b11      	ldr	r3, [pc, #68]	; (8002164 <HAL_GPIO_EXTI_Callback+0x70>)
 800211e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_GPIO_EXTI_Callback+0x38>
			relay=0;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_GPIO_EXTI_Callback+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
		}
		if(position==3){// Change reference
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <HAL_GPIO_EXTI_Callback+0x70>)
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	2b03      	cmp	r3, #3
 8002134:	d10d      	bne.n	8002152 <HAL_GPIO_EXTI_Callback+0x5e>
			bandera_referencia^=1;
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_GPIO_EXTI_Callback+0x78>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	f083 0301 	eor.w	r3, r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_GPIO_EXTI_Callback+0x78>)
 8002142:	701a      	strb	r2, [r3, #0]
			position=3;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <HAL_GPIO_EXTI_Callback+0x70>)
 8002146:	2203      	movs	r2, #3
 8002148:	801a      	strh	r2, [r3, #0]
			TIM2->CNT=12;
 800214a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800214e:	220c      	movs	r2, #12
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000371 	.word	0x20000371
 8002164:	2000033a 	.word	0x2000033a
 8002168:	20000370 	.word	0x20000370
 800216c:	20000373 	.word	0x20000373

08002170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b08b      	sub	sp, #44	; 0x2c
 8002174:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002176:	f001 f8c9 	bl	800330c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800217a:	f000 faef 	bl	800275c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800217e:	f000 fd1d 	bl	8002bbc <MX_GPIO_Init>
  MX_DMA_Init();
 8002182:	f000 fcf3 	bl	8002b6c <MX_DMA_Init>
  MX_SPI1_Init();
 8002186:	f000 fba3 	bl	80028d0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800218a:	f000 fbd7 	bl	800293c <MX_TIM2_Init>
  MX_ADC1_Init();
 800218e:	f000 fb4d 	bl	800282c <MX_ADC1_Init>
  MX_TIM4_Init();
 8002192:	f000 fc9d 	bl	8002ad0 <MX_TIM4_Init>
  MX_TIM3_Init();
 8002196:	f000 fc25 	bl	80029e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


  // TFT Init and Default Messages
  ILI9341_Init();
 800219a:	f7ff fa07 	bl	80015ac <ILI9341_Init>

  ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff fb0e 	bl	80017c0 <ILI9341_SetRotation>
  ILI9341_FillScreen(DARKCYAN);
 80021a4:	f240 30ef 	movw	r0, #1007	; 0x3ef
 80021a8:	f7ff fbf2 	bl	8001990 <ILI9341_FillScreen>
  ILI9341_DrawText("Encender", FONT4, 30, 60, BLACK, DARKCYAN);
 80021ac:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	233c      	movs	r3, #60	; 0x3c
 80021b8:	221e      	movs	r2, #30
 80021ba:	49b2      	ldr	r1, [pc, #712]	; (8002484 <main+0x314>)
 80021bc:	48b2      	ldr	r0, [pc, #712]	; (8002488 <main+0x318>)
 80021be:	f7ff f89b 	bl	80012f8 <ILI9341_DrawText>
  ILI9341_DrawText("Apagar", FONT4, 180, 60, BLACK, DARKCYAN);
 80021c2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80021c6:	9301      	str	r3, [sp, #4]
 80021c8:	2300      	movs	r3, #0
 80021ca:	9300      	str	r3, [sp, #0]
 80021cc:	233c      	movs	r3, #60	; 0x3c
 80021ce:	22b4      	movs	r2, #180	; 0xb4
 80021d0:	49ac      	ldr	r1, [pc, #688]	; (8002484 <main+0x314>)
 80021d2:	48ae      	ldr	r0, [pc, #696]	; (800248c <main+0x31c>)
 80021d4:	f7ff f890 	bl	80012f8 <ILI9341_DrawText>
  ILI9341_DrawText("Temperatura:", FONT4, 180, 180, BLACK, DARKCYAN);
 80021d8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	23b4      	movs	r3, #180	; 0xb4
 80021e4:	22b4      	movs	r2, #180	; 0xb4
 80021e6:	49a7      	ldr	r1, [pc, #668]	; (8002484 <main+0x314>)
 80021e8:	48a9      	ldr	r0, [pc, #676]	; (8002490 <main+0x320>)
 80021ea:	f7ff f885 	bl	80012f8 <ILI9341_DrawText>
  ILI9341_DrawText("Ref:", FONT4, 180, 150, BLACK, DARKCYAN);
 80021ee:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2396      	movs	r3, #150	; 0x96
 80021fa:	22b4      	movs	r2, #180	; 0xb4
 80021fc:	49a1      	ldr	r1, [pc, #644]	; (8002484 <main+0x314>)
 80021fe:	48a5      	ldr	r0, [pc, #660]	; (8002494 <main+0x324>)
 8002200:	f7ff f87a 	bl	80012f8 <ILI9341_DrawText>
  ILI9341_DrawFilledCircle(60, 180, 30, GREEN);
 8002204:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002208:	221e      	movs	r2, #30
 800220a:	21b4      	movs	r1, #180	; 0xb4
 800220c:	203c      	movs	r0, #60	; 0x3c
 800220e:	f7fe fef5 	bl	8000ffc <ILI9341_DrawFilledCircle>

  // HAL ENCODER MODULE
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); // Init the timer enconder mode
 8002212:	213c      	movs	r1, #60	; 0x3c
 8002214:	48a0      	ldr	r0, [pc, #640]	; (8002498 <main+0x328>)
 8002216:	f003 fd91 	bl	8005d3c <HAL_TIM_Encoder_Start_IT>

  // HAL ADC MODULE
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_value, 1); // Start the ADC with DMA
 800221a:	2201      	movs	r2, #1
 800221c:	499f      	ldr	r1, [pc, #636]	; (800249c <main+0x32c>)
 800221e:	48a0      	ldr	r0, [pc, #640]	; (80024a0 <main+0x330>)
 8002220:	f001 f94e 	bl	80034c0 <HAL_ADC_Start_DMA>

  // HAL EXTI MODULE
  HAL_TIM_Base_Start_IT(&htim4); // Start the Time Base
 8002224:	489f      	ldr	r0, [pc, #636]	; (80024a4 <main+0x334>)
 8002226:	f003 fb77 	bl	8005918 <HAL_TIM_Base_Start_IT>

  // HAL PWM Module
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // Start the PWM channel 1
 800222a:	2100      	movs	r1, #0
 800222c:	489e      	ldr	r0, [pc, #632]	; (80024a8 <main+0x338>)
 800222e:	f003 fc2f 	bl	8005a90 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(bandera_temperatura==1){
 8002232:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <main+0x33c>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d12b      	bne.n	8002292 <main+0x122>
		bandera_temperatura=0;
 800223a:	4b9c      	ldr	r3, [pc, #624]	; (80024ac <main+0x33c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
		sprintf(buffer, "%.2f", temperatura_actual);
 8002240:	4b9b      	ldr	r3, [pc, #620]	; (80024b0 <main+0x340>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe f987 	bl	8000558 <__aeabi_f2d>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4999      	ldr	r1, [pc, #612]	; (80024b4 <main+0x344>)
 8002250:	4899      	ldr	r0, [pc, #612]	; (80024b8 <main+0x348>)
 8002252:	f005 f8bb 	bl	80073cc <siprintf>
		ILI9341_DrawText(buffer, FONT4, 180, 200, BLACK, DARKCYAN);
 8002256:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2300      	movs	r3, #0
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	23c8      	movs	r3, #200	; 0xc8
 8002262:	22b4      	movs	r2, #180	; 0xb4
 8002264:	4987      	ldr	r1, [pc, #540]	; (8002484 <main+0x314>)
 8002266:	4894      	ldr	r0, [pc, #592]	; (80024b8 <main+0x348>)
 8002268:	f7ff f846 	bl	80012f8 <ILI9341_DrawText>
		sprintf(buffer, " %d  ", referencia);
 800226c:	4b93      	ldr	r3, [pc, #588]	; (80024bc <main+0x34c>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	461a      	mov	r2, r3
 8002274:	4992      	ldr	r1, [pc, #584]	; (80024c0 <main+0x350>)
 8002276:	4890      	ldr	r0, [pc, #576]	; (80024b8 <main+0x348>)
 8002278:	f005 f8a8 	bl	80073cc <siprintf>
		ILI9341_DrawText(buffer, FONT4, 220, 150, BLACK, DARKCYAN);
 800227c:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	2300      	movs	r3, #0
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2396      	movs	r3, #150	; 0x96
 8002288:	22dc      	movs	r2, #220	; 0xdc
 800228a:	497e      	ldr	r1, [pc, #504]	; (8002484 <main+0x314>)
 800228c:	488a      	ldr	r0, [pc, #552]	; (80024b8 <main+0x348>)
 800228e:	f7ff f833 	bl	80012f8 <ILI9341_DrawText>
	  }
	  // Show Led Alert
	 if(led==1){
 8002292:	4b8c      	ldr	r3, [pc, #560]	; (80024c4 <main+0x354>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d118      	bne.n	80022cc <main+0x15c>
		 led=0; // Reset the Indicator Flag
 800229a:	4b8a      	ldr	r3, [pc, #552]	; (80024c4 <main+0x354>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
		 if(relay==0){
 80022a0:	4b89      	ldr	r3, [pc, #548]	; (80024c8 <main+0x358>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <main+0x14e>
			 TIM3->CCR1=0; // Apagar el calefactor
 80022a8:	4b88      	ldr	r3, [pc, #544]	; (80024cc <main+0x35c>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	635a      	str	r2, [r3, #52]	; 0x34
			 ILI9341_DrawFilledCircle(60, 180, 30, GREEN);
 80022ae:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80022b2:	221e      	movs	r2, #30
 80022b4:	21b4      	movs	r1, #180	; 0xb4
 80022b6:	203c      	movs	r0, #60	; 0x3c
 80022b8:	f7fe fea0 	bl	8000ffc <ILI9341_DrawFilledCircle>
 80022bc:	e006      	b.n	80022cc <main+0x15c>
		 }else{
			 ILI9341_DrawFilledCircle(60, 180, 30, RED);
 80022be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022c2:	221e      	movs	r2, #30
 80022c4:	21b4      	movs	r1, #180	; 0xb4
 80022c6:	203c      	movs	r0, #60	; 0x3c
 80022c8:	f7fe fe98 	bl	8000ffc <ILI9341_DrawFilledCircle>
		 }
	 }
	 if(update==1 ){
 80022cc:	4b80      	ldr	r3, [pc, #512]	; (80024d0 <main+0x360>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	f040 8241 	bne.w	8002758 <main+0x5e8>
		 update=0;
 80022d6:	4b7e      	ldr	r3, [pc, #504]	; (80024d0 <main+0x360>)
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
		 switch(position){
 80022dc:	4b7d      	ldr	r3, [pc, #500]	; (80024d4 <main+0x364>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d8a5      	bhi.n	8002232 <main+0xc2>
 80022e6:	a201      	add	r2, pc, #4	; (adr r2, 80022ec <main+0x17c>)
 80022e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	080023ff 	.word	0x080023ff
 80022f4:	08002555 	.word	0x08002555
 80022f8:	08002657 	.word	0x08002657
		 case 0:
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 10+i, 150-i, 110-i, RED); // Write Square 0
 80022fc:	2300      	movs	r3, #0
 80022fe:	83fb      	strh	r3, [r7, #30]
 8002300:	e018      	b.n	8002334 <main+0x1c4>
 8002302:	8bfb      	ldrh	r3, [r7, #30]
 8002304:	330a      	adds	r3, #10
 8002306:	b298      	uxth	r0, r3
 8002308:	8bfb      	ldrh	r3, [r7, #30]
 800230a:	330a      	adds	r3, #10
 800230c:	b299      	uxth	r1, r3
 800230e:	8bfb      	ldrh	r3, [r7, #30]
 8002310:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002314:	b29a      	uxth	r2, r3
 8002316:	8bfb      	ldrh	r3, [r7, #30]
 8002318:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 800231c:	b29b      	uxth	r3, r3
 800231e:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002322:	9400      	str	r4, [sp, #0]
 8002324:	f7fe fef2 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002328:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800232c:	b29b      	uxth	r3, r3
 800232e:	3301      	adds	r3, #1
 8002330:	b29b      	uxth	r3, r3
 8002332:	83fb      	strh	r3, [r7, #30]
 8002334:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002338:	2b03      	cmp	r3, #3
 800233a:	dde2      	ble.n	8002302 <main+0x192>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 10+i, 310-i, 110-i, DARKCYAN);//Delete Square 1
 800233c:	2300      	movs	r3, #0
 800233e:	83bb      	strh	r3, [r7, #28]
 8002340:	e018      	b.n	8002374 <main+0x204>
 8002342:	8bbb      	ldrh	r3, [r7, #28]
 8002344:	33aa      	adds	r3, #170	; 0xaa
 8002346:	b298      	uxth	r0, r3
 8002348:	8bbb      	ldrh	r3, [r7, #28]
 800234a:	330a      	adds	r3, #10
 800234c:	b299      	uxth	r1, r3
 800234e:	8bbb      	ldrh	r3, [r7, #28]
 8002350:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 8002354:	b29a      	uxth	r2, r3
 8002356:	8bbb      	ldrh	r3, [r7, #28]
 8002358:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 800235c:	b29b      	uxth	r3, r3
 800235e:	f240 34ef 	movw	r4, #1007	; 0x3ef
 8002362:	9400      	str	r4, [sp, #0]
 8002364:	f7fe fed2 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002368:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800236c:	b29b      	uxth	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	83bb      	strh	r3, [r7, #28]
 8002374:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002378:	2b03      	cmp	r3, #3
 800237a:	dde2      	ble.n	8002342 <main+0x1d2>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 130+i, 150-i, 230-i, DARKCYAN); // Delete Square 2
 800237c:	2300      	movs	r3, #0
 800237e:	837b      	strh	r3, [r7, #26]
 8002380:	e018      	b.n	80023b4 <main+0x244>
 8002382:	8b7b      	ldrh	r3, [r7, #26]
 8002384:	330a      	adds	r3, #10
 8002386:	b298      	uxth	r0, r3
 8002388:	8b7b      	ldrh	r3, [r7, #26]
 800238a:	3382      	adds	r3, #130	; 0x82
 800238c:	b299      	uxth	r1, r3
 800238e:	8b7b      	ldrh	r3, [r7, #26]
 8002390:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002394:	b29a      	uxth	r2, r3
 8002396:	8b7b      	ldrh	r3, [r7, #26]
 8002398:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 800239c:	b29b      	uxth	r3, r3
 800239e:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80023a2:	9400      	str	r4, [sp, #0]
 80023a4:	f7fe feb2 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 80023a8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	837b      	strh	r3, [r7, #26]
 80023b4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80023b8:	2b03      	cmp	r3, #3
 80023ba:	dde2      	ble.n	8002382 <main+0x212>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 130+i, 310-i, 230-i, DARKCYAN); // Delete Square 3
 80023bc:	2300      	movs	r3, #0
 80023be:	833b      	strh	r3, [r7, #24]
 80023c0:	e018      	b.n	80023f4 <main+0x284>
 80023c2:	8b3b      	ldrh	r3, [r7, #24]
 80023c4:	33aa      	adds	r3, #170	; 0xaa
 80023c6:	b298      	uxth	r0, r3
 80023c8:	8b3b      	ldrh	r3, [r7, #24]
 80023ca:	3382      	adds	r3, #130	; 0x82
 80023cc:	b299      	uxth	r1, r3
 80023ce:	8b3b      	ldrh	r3, [r7, #24]
 80023d0:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	8b3b      	ldrh	r3, [r7, #24]
 80023d8:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 80023dc:	b29b      	uxth	r3, r3
 80023de:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80023e2:	9400      	str	r4, [sp, #0]
 80023e4:	f7fe fe92 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 80023e8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	833b      	strh	r3, [r7, #24]
 80023f4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80023f8:	2b03      	cmp	r3, #3
 80023fa:	dde2      	ble.n	80023c2 <main+0x252>
			 break;
 80023fc:	e1ad      	b.n	800275a <main+0x5ea>
		 case 1:
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 10+i, 150-i, 110-i, DARKCYAN); // Delete Square 0
 80023fe:	2300      	movs	r3, #0
 8002400:	82fb      	strh	r3, [r7, #22]
 8002402:	e018      	b.n	8002436 <main+0x2c6>
 8002404:	8afb      	ldrh	r3, [r7, #22]
 8002406:	330a      	adds	r3, #10
 8002408:	b298      	uxth	r0, r3
 800240a:	8afb      	ldrh	r3, [r7, #22]
 800240c:	330a      	adds	r3, #10
 800240e:	b299      	uxth	r1, r3
 8002410:	8afb      	ldrh	r3, [r7, #22]
 8002412:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8002416:	b29a      	uxth	r2, r3
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 800241e:	b29b      	uxth	r3, r3
 8002420:	f240 34ef 	movw	r4, #1007	; 0x3ef
 8002424:	9400      	str	r4, [sp, #0]
 8002426:	f7fe fe71 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 800242a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800242e:	b29b      	uxth	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	b29b      	uxth	r3, r3
 8002434:	82fb      	strh	r3, [r7, #22]
 8002436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800243a:	2b03      	cmp	r3, #3
 800243c:	dde2      	ble.n	8002404 <main+0x294>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 10+i, 310-i, 110-i, RED); // Write Square 1
 800243e:	2300      	movs	r3, #0
 8002440:	82bb      	strh	r3, [r7, #20]
 8002442:	e018      	b.n	8002476 <main+0x306>
 8002444:	8abb      	ldrh	r3, [r7, #20]
 8002446:	33aa      	adds	r3, #170	; 0xaa
 8002448:	b298      	uxth	r0, r3
 800244a:	8abb      	ldrh	r3, [r7, #20]
 800244c:	330a      	adds	r3, #10
 800244e:	b299      	uxth	r1, r3
 8002450:	8abb      	ldrh	r3, [r7, #20]
 8002452:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 8002456:	b29a      	uxth	r2, r3
 8002458:	8abb      	ldrh	r3, [r7, #20]
 800245a:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 800245e:	b29b      	uxth	r3, r3
 8002460:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8002464:	9400      	str	r4, [sp, #0]
 8002466:	f7fe fe51 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 800246a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800246e:	b29b      	uxth	r3, r3
 8002470:	3301      	adds	r3, #1
 8002472:	b29b      	uxth	r3, r3
 8002474:	82bb      	strh	r3, [r7, #20]
 8002476:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800247a:	2b03      	cmp	r3, #3
 800247c:	dde2      	ble.n	8002444 <main+0x2d4>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 130+i, 150-i, 230-i, DARKCYAN); // Delete Square 2
 800247e:	2300      	movs	r3, #0
 8002480:	827b      	strh	r3, [r7, #18]
 8002482:	e042      	b.n	800250a <main+0x39a>
 8002484:	0800abf4 	.word	0x0800abf4
 8002488:	0800abb8 	.word	0x0800abb8
 800248c:	0800abc4 	.word	0x0800abc4
 8002490:	0800abcc 	.word	0x0800abcc
 8002494:	0800abdc 	.word	0x0800abdc
 8002498:	20000530 	.word	0x20000530
 800249c:	2000035a 	.word	0x2000035a
 80024a0:	20000430 	.word	0x20000430
 80024a4:	200003a0 	.word	0x200003a0
 80024a8:	200003e8 	.word	0x200003e8
 80024ac:	20000372 	.word	0x20000372
 80024b0:	20000374 	.word	0x20000374
 80024b4:	0800abe4 	.word	0x0800abe4
 80024b8:	2000033c 	.word	0x2000033c
 80024bc:	200000fe 	.word	0x200000fe
 80024c0:	0800abec 	.word	0x0800abec
 80024c4:	20000371 	.word	0x20000371
 80024c8:	20000370 	.word	0x20000370
 80024cc:	40000400 	.word	0x40000400
 80024d0:	200000fc 	.word	0x200000fc
 80024d4:	2000033a 	.word	0x2000033a
 80024d8:	8a7b      	ldrh	r3, [r7, #18]
 80024da:	330a      	adds	r3, #10
 80024dc:	b298      	uxth	r0, r3
 80024de:	8a7b      	ldrh	r3, [r7, #18]
 80024e0:	3382      	adds	r3, #130	; 0x82
 80024e2:	b299      	uxth	r1, r3
 80024e4:	8a7b      	ldrh	r3, [r7, #18]
 80024e6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	8a7b      	ldrh	r3, [r7, #18]
 80024ee:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80024f8:	9400      	str	r4, [sp, #0]
 80024fa:	f7fe fe07 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 80024fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002502:	b29b      	uxth	r3, r3
 8002504:	3301      	adds	r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	827b      	strh	r3, [r7, #18]
 800250a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800250e:	2b03      	cmp	r3, #3
 8002510:	dde2      	ble.n	80024d8 <main+0x368>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 130+i, 310-i, 230-i, DARKCYAN); // Delete Square 3
 8002512:	2300      	movs	r3, #0
 8002514:	823b      	strh	r3, [r7, #16]
 8002516:	e018      	b.n	800254a <main+0x3da>
 8002518:	8a3b      	ldrh	r3, [r7, #16]
 800251a:	33aa      	adds	r3, #170	; 0xaa
 800251c:	b298      	uxth	r0, r3
 800251e:	8a3b      	ldrh	r3, [r7, #16]
 8002520:	3382      	adds	r3, #130	; 0x82
 8002522:	b299      	uxth	r1, r3
 8002524:	8a3b      	ldrh	r3, [r7, #16]
 8002526:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 800252a:	b29a      	uxth	r2, r3
 800252c:	8a3b      	ldrh	r3, [r7, #16]
 800252e:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 8002532:	b29b      	uxth	r3, r3
 8002534:	f240 34ef 	movw	r4, #1007	; 0x3ef
 8002538:	9400      	str	r4, [sp, #0]
 800253a:	f7fe fde7 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 800253e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	3301      	adds	r3, #1
 8002546:	b29b      	uxth	r3, r3
 8002548:	823b      	strh	r3, [r7, #16]
 800254a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800254e:	2b03      	cmp	r3, #3
 8002550:	dde2      	ble.n	8002518 <main+0x3a8>
			 break;
 8002552:	e102      	b.n	800275a <main+0x5ea>
		 case 2:
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 10+i, 150-i, 110-i, DARKCYAN); // Delete Square 0
 8002554:	2300      	movs	r3, #0
 8002556:	81fb      	strh	r3, [r7, #14]
 8002558:	e018      	b.n	800258c <main+0x41c>
 800255a:	89fb      	ldrh	r3, [r7, #14]
 800255c:	330a      	adds	r3, #10
 800255e:	b298      	uxth	r0, r3
 8002560:	89fb      	ldrh	r3, [r7, #14]
 8002562:	330a      	adds	r3, #10
 8002564:	b299      	uxth	r1, r3
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800256c:	b29a      	uxth	r2, r3
 800256e:	89fb      	ldrh	r3, [r7, #14]
 8002570:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 8002574:	b29b      	uxth	r3, r3
 8002576:	f240 34ef 	movw	r4, #1007	; 0x3ef
 800257a:	9400      	str	r4, [sp, #0]
 800257c:	f7fe fdc6 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002580:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002584:	b29b      	uxth	r3, r3
 8002586:	3301      	adds	r3, #1
 8002588:	b29b      	uxth	r3, r3
 800258a:	81fb      	strh	r3, [r7, #14]
 800258c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002590:	2b03      	cmp	r3, #3
 8002592:	dde2      	ble.n	800255a <main+0x3ea>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 10+i, 310-i, 110-i, DARKCYAN);// Delete Square 1
 8002594:	2300      	movs	r3, #0
 8002596:	81bb      	strh	r3, [r7, #12]
 8002598:	e018      	b.n	80025cc <main+0x45c>
 800259a:	89bb      	ldrh	r3, [r7, #12]
 800259c:	33aa      	adds	r3, #170	; 0xaa
 800259e:	b298      	uxth	r0, r3
 80025a0:	89bb      	ldrh	r3, [r7, #12]
 80025a2:	330a      	adds	r3, #10
 80025a4:	b299      	uxth	r1, r3
 80025a6:	89bb      	ldrh	r3, [r7, #12]
 80025a8:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	89bb      	ldrh	r3, [r7, #12]
 80025b0:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80025ba:	9400      	str	r4, [sp, #0]
 80025bc:	f7fe fda6 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 80025c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	81bb      	strh	r3, [r7, #12]
 80025cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	dde2      	ble.n	800259a <main+0x42a>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 130+i, 150-i, 230-i, RED); // Write Square 2
 80025d4:	2300      	movs	r3, #0
 80025d6:	817b      	strh	r3, [r7, #10]
 80025d8:	e018      	b.n	800260c <main+0x49c>
 80025da:	897b      	ldrh	r3, [r7, #10]
 80025dc:	330a      	adds	r3, #10
 80025de:	b298      	uxth	r0, r3
 80025e0:	897b      	ldrh	r3, [r7, #10]
 80025e2:	3382      	adds	r3, #130	; 0x82
 80025e4:	b299      	uxth	r1, r3
 80025e6:	897b      	ldrh	r3, [r7, #10]
 80025e8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 80025fa:	9400      	str	r4, [sp, #0]
 80025fc:	f7fe fd86 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002600:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002604:	b29b      	uxth	r3, r3
 8002606:	3301      	adds	r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	817b      	strh	r3, [r7, #10]
 800260c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002610:	2b03      	cmp	r3, #3
 8002612:	dde2      	ble.n	80025da <main+0x46a>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 130+i, 310-i, 230-i, DARKCYAN); // Delete Square 3
 8002614:	2300      	movs	r3, #0
 8002616:	813b      	strh	r3, [r7, #8]
 8002618:	e018      	b.n	800264c <main+0x4dc>
 800261a:	893b      	ldrh	r3, [r7, #8]
 800261c:	33aa      	adds	r3, #170	; 0xaa
 800261e:	b298      	uxth	r0, r3
 8002620:	893b      	ldrh	r3, [r7, #8]
 8002622:	3382      	adds	r3, #130	; 0x82
 8002624:	b299      	uxth	r1, r3
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 800262c:	b29a      	uxth	r2, r3
 800262e:	893b      	ldrh	r3, [r7, #8]
 8002630:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 8002634:	b29b      	uxth	r3, r3
 8002636:	f240 34ef 	movw	r4, #1007	; 0x3ef
 800263a:	9400      	str	r4, [sp, #0]
 800263c:	f7fe fd66 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002640:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002644:	b29b      	uxth	r3, r3
 8002646:	3301      	adds	r3, #1
 8002648:	b29b      	uxth	r3, r3
 800264a:	813b      	strh	r3, [r7, #8]
 800264c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002650:	2b03      	cmp	r3, #3
 8002652:	dde2      	ble.n	800261a <main+0x4aa>
			 break;
 8002654:	e081      	b.n	800275a <main+0x5ea>
		 case 3:
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 10+i, 150-i, 110-i, DARKCYAN); // Delete Square 0
 8002656:	2300      	movs	r3, #0
 8002658:	80fb      	strh	r3, [r7, #6]
 800265a:	e018      	b.n	800268e <main+0x51e>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	330a      	adds	r3, #10
 8002660:	b298      	uxth	r0, r3
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	330a      	adds	r3, #10
 8002666:	b299      	uxth	r1, r3
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800266e:	b29a      	uxth	r2, r3
 8002670:	88fb      	ldrh	r3, [r7, #6]
 8002672:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 8002676:	b29b      	uxth	r3, r3
 8002678:	f240 34ef 	movw	r4, #1007	; 0x3ef
 800267c:	9400      	str	r4, [sp, #0]
 800267e:	f7fe fd45 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002682:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002686:	b29b      	uxth	r3, r3
 8002688:	3301      	adds	r3, #1
 800268a:	b29b      	uxth	r3, r3
 800268c:	80fb      	strh	r3, [r7, #6]
 800268e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002692:	2b03      	cmp	r3, #3
 8002694:	dde2      	ble.n	800265c <main+0x4ec>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 10+i, 310-i, 110-i, DARKCYAN);// Delete Square 1
 8002696:	2300      	movs	r3, #0
 8002698:	80bb      	strh	r3, [r7, #4]
 800269a:	e018      	b.n	80026ce <main+0x55e>
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	33aa      	adds	r3, #170	; 0xaa
 80026a0:	b298      	uxth	r0, r3
 80026a2:	88bb      	ldrh	r3, [r7, #4]
 80026a4:	330a      	adds	r3, #10
 80026a6:	b299      	uxth	r1, r3
 80026a8:	88bb      	ldrh	r3, [r7, #4]
 80026aa:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	88bb      	ldrh	r3, [r7, #4]
 80026b2:	f1c3 036e 	rsb	r3, r3, #110	; 0x6e
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80026bc:	9400      	str	r4, [sp, #0]
 80026be:	f7fe fd25 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 80026c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	80bb      	strh	r3, [r7, #4]
 80026ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	dde2      	ble.n	800269c <main+0x52c>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(10+i, 130+i, 150-i, 230-i, DARKCYAN); // Delete Square 2
 80026d6:	2300      	movs	r3, #0
 80026d8:	807b      	strh	r3, [r7, #2]
 80026da:	e018      	b.n	800270e <main+0x59e>
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	330a      	adds	r3, #10
 80026e0:	b298      	uxth	r0, r3
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	3382      	adds	r3, #130	; 0x82
 80026e6:	b299      	uxth	r1, r3
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f240 34ef 	movw	r4, #1007	; 0x3ef
 80026fc:	9400      	str	r4, [sp, #0]
 80026fe:	f7fe fd05 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002702:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002706:	b29b      	uxth	r3, r3
 8002708:	3301      	adds	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	807b      	strh	r3, [r7, #2]
 800270e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002712:	2b03      	cmp	r3, #3
 8002714:	dde2      	ble.n	80026dc <main+0x56c>
			 for(short i=0;i<4;i++)ILI9341_DrawHollowRectangleCoord(170+i, 130+i, 310-i, 230-i, RED); // Write Square 3
 8002716:	2300      	movs	r3, #0
 8002718:	803b      	strh	r3, [r7, #0]
 800271a:	e018      	b.n	800274e <main+0x5de>
 800271c:	883b      	ldrh	r3, [r7, #0]
 800271e:	33aa      	adds	r3, #170	; 0xaa
 8002720:	b298      	uxth	r0, r3
 8002722:	883b      	ldrh	r3, [r7, #0]
 8002724:	3382      	adds	r3, #130	; 0x82
 8002726:	b299      	uxth	r1, r3
 8002728:	883b      	ldrh	r3, [r7, #0]
 800272a:	f5c3 739b 	rsb	r3, r3, #310	; 0x136
 800272e:	b29a      	uxth	r2, r3
 8002730:	883b      	ldrh	r3, [r7, #0]
 8002732:	f1c3 03e6 	rsb	r3, r3, #230	; 0xe6
 8002736:	b29b      	uxth	r3, r3
 8002738:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 800273c:	9400      	str	r4, [sp, #0]
 800273e:	f7fe fce5 	bl	800110c <ILI9341_DrawHollowRectangleCoord>
 8002742:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002746:	b29b      	uxth	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	b29b      	uxth	r3, r3
 800274c:	803b      	strh	r3, [r7, #0]
 800274e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002752:	2b03      	cmp	r3, #3
 8002754:	dde2      	ble.n	800271c <main+0x5ac>
			 break;
 8002756:	e000      	b.n	800275a <main+0x5ea>
		 }

	 }
 8002758:	bf00      	nop
	  if(bandera_temperatura==1){
 800275a:	e56a      	b.n	8002232 <main+0xc2>

0800275c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b094      	sub	sp, #80	; 0x50
 8002760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002762:	f107 0320 	add.w	r3, r7, #32
 8002766:	2230      	movs	r2, #48	; 0x30
 8002768:	2100      	movs	r1, #0
 800276a:	4618      	mov	r0, r3
 800276c:	f004 f9bc 	bl	8006ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002770:	f107 030c 	add.w	r3, r7, #12
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <SystemClock_Config+0xc8>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a26      	ldr	r2, [pc, #152]	; (8002824 <SystemClock_Config+0xc8>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
 8002790:	4b24      	ldr	r3, [pc, #144]	; (8002824 <SystemClock_Config+0xc8>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800279c:	2300      	movs	r3, #0
 800279e:	607b      	str	r3, [r7, #4]
 80027a0:	4b21      	ldr	r3, [pc, #132]	; (8002828 <SystemClock_Config+0xcc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a20      	ldr	r2, [pc, #128]	; (8002828 <SystemClock_Config+0xcc>)
 80027a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <SystemClock_Config+0xcc>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027c2:	2302      	movs	r3, #2
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80027cc:	230c      	movs	r3, #12
 80027ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80027d0:	2360      	movs	r3, #96	; 0x60
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027d4:	2302      	movs	r3, #2
 80027d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027d8:	2304      	movs	r3, #4
 80027da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027dc:	f107 0320 	add.w	r3, r7, #32
 80027e0:	4618      	mov	r0, r3
 80027e2:	f002 f859 	bl	8004898 <HAL_RCC_OscConfig>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027ec:	f000 fa4e 	bl	8002c8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027f0:	230f      	movs	r3, #15
 80027f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f4:	2302      	movs	r3, #2
 80027f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002800:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002806:	f107 030c 	add.w	r3, r7, #12
 800280a:	2103      	movs	r1, #3
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fabb 	bl	8004d88 <HAL_RCC_ClockConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002818:	f000 fa38 	bl	8002c8c <Error_Handler>
  }
}
 800281c:	bf00      	nop
 800281e:	3750      	adds	r7, #80	; 0x50
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800
 8002828:	40007000 	.word	0x40007000

0800282c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002832:	463b      	mov	r3, r7
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800283e:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <MX_ADC1_Init+0x9c>)
 8002842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800284a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <MX_ADC1_Init+0x98>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002852:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <MX_ADC1_Init+0x98>)
 800285a:	2201      	movs	r2, #1
 800285c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800285e:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002866:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002868:	2200      	movs	r2, #0
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800286c:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <MX_ADC1_Init+0x98>)
 800286e:	4a17      	ldr	r2, [pc, #92]	; (80028cc <MX_ADC1_Init+0xa0>)
 8002870:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002874:	2200      	movs	r2, #0
 8002876:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_ADC1_Init+0x98>)
 800287a:	2201      	movs	r2, #1
 800287c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_ADC1_Init+0x98>)
 8002888:	2201      	movs	r2, #1
 800288a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800288c:	480d      	ldr	r0, [pc, #52]	; (80028c4 <MX_ADC1_Init+0x98>)
 800288e:	f000 fdd3 	bl	8003438 <HAL_ADC_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002898:	f000 f9f8 	bl	8002c8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800289c:	2302      	movs	r3, #2
 800289e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80028a0:	2301      	movs	r3, #1
 80028a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028a8:	463b      	mov	r3, r7
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <MX_ADC1_Init+0x98>)
 80028ae:	f000 ff0b 	bl	80036c8 <HAL_ADC_ConfigChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80028b8:	f000 f9e8 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028bc:	bf00      	nop
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000430 	.word	0x20000430
 80028c8:	40012000 	.word	0x40012000
 80028cc:	0f000001 	.word	0x0f000001

080028d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_SPI1_Init+0x64>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <MX_SPI1_Init+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <MX_SPI1_Init+0x64>)
 80028dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_SPI1_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_SPI1_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_SPI1_Init+0x64>)
 80028fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_SPI1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_SPI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_SPI1_Init+0x64>)
 800291c:	220a      	movs	r2, #10
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <MX_SPI1_Init+0x64>)
 8002922:	f002 fbcd 	bl	80050c0 <HAL_SPI_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800292c:	f000 f9ae 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200004d8 	.word	0x200004d8
 8002938:	40013000 	.word	0x40013000

0800293c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	2224      	movs	r2, #36	; 0x24
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f004 f8cc 	bl	8006ae8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002950:	1d3b      	adds	r3, r7, #4
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800295a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800295e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002960:	4b1f      	ldr	r3, [pc, #124]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002962:	2200      	movs	r2, #0
 8002964:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002966:	4b1e      	ldr	r3, [pc, #120]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 920;
 800296c:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800296e:	f44f 7266 	mov.w	r2, #920	; 0x398
 8002972:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002974:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <MX_TIM2_Init+0xa4>)
 8002976:	2200      	movs	r2, #0
 8002978:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <MX_TIM2_Init+0xa4>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002980:	2303      	movs	r3, #3
 8002982:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002988:	2301      	movs	r3, #1
 800298a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800298c:	2300      	movs	r3, #0
 800298e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002994:	2300      	movs	r3, #0
 8002996:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002998:	2301      	movs	r3, #1
 800299a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800299c:	2300      	movs	r3, #0
 800299e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029a0:	2300      	movs	r3, #0
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029a4:	f107 030c 	add.w	r3, r7, #12
 80029a8:	4619      	mov	r1, r3
 80029aa:	480d      	ldr	r0, [pc, #52]	; (80029e0 <MX_TIM2_Init+0xa4>)
 80029ac:	f003 f920 	bl	8005bf0 <HAL_TIM_Encoder_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80029b6:	f000 f969 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c2:	1d3b      	adds	r3, r7, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4806      	ldr	r0, [pc, #24]	; (80029e0 <MX_TIM2_Init+0xa4>)
 80029c8:	f003 ffe2 	bl	8006990 <HAL_TIMEx_MasterConfigSynchronization>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80029d2:	f000 f95b 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029d6:	bf00      	nop
 80029d8:	3730      	adds	r7, #48	; 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	20000530 	.word	0x20000530

080029e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08e      	sub	sp, #56	; 0x38
 80029e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f8:	f107 0320 	add.w	r3, r7, #32
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
 8002a10:	615a      	str	r2, [r3, #20]
 8002a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a16:	4a2d      	ldr	r2, [pc, #180]	; (8002acc <MX_TIM3_Init+0xe8>)
 8002a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8002a1a:	4b2b      	ldr	r3, [pc, #172]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a1c:	2263      	movs	r2, #99	; 0x63
 8002a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8002a26:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a28:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a34:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a3a:	4823      	ldr	r0, [pc, #140]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a3c:	f002 ff1c 	bl	8005878 <HAL_TIM_Base_Init>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a46:	f000 f921 	bl	8002c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a54:	4619      	mov	r1, r3
 8002a56:	481c      	ldr	r0, [pc, #112]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a58:	f003 fbe8 	bl	800622c <HAL_TIM_ConfigClockSource>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a62:	f000 f913 	bl	8002c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a66:	4818      	ldr	r0, [pc, #96]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a68:	f002 ffb8 	bl	80059dc <HAL_TIM_PWM_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002a72:	f000 f90b 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a7e:	f107 0320 	add.w	r3, r7, #32
 8002a82:	4619      	mov	r1, r3
 8002a84:	4810      	ldr	r0, [pc, #64]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002a86:	f003 ff83 	bl	8006990 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002a90:	f000 f8fc 	bl	8002c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a94:	2360      	movs	r3, #96	; 0x60
 8002a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002aac:	f003 fafc 	bl	80060a8 <HAL_TIM_PWM_ConfigChannel>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002ab6:	f000 f8e9 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002aba:	4803      	ldr	r0, [pc, #12]	; (8002ac8 <MX_TIM3_Init+0xe4>)
 8002abc:	f000 fa90 	bl	8002fe0 <HAL_TIM_MspPostInit>

}
 8002ac0:	bf00      	nop
 8002ac2:	3738      	adds	r7, #56	; 0x38
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200003e8 	.word	0x200003e8
 8002acc:	40000400 	.word	0x40000400

08002ad0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ad6:	f107 0308 	add.w	r3, r7, #8
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	609a      	str	r2, [r3, #8]
 8002ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
 8002aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <MX_TIM4_Init+0x98>)
 8002af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9999;
 8002af2:	4b1c      	ldr	r3, [pc, #112]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002af4:	f242 720f 	movw	r2, #9999	; 0x270f
 8002af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000;
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b06:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b08:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b14:	4813      	ldr	r0, [pc, #76]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b16:	f002 feaf 	bl	8005878 <HAL_TIM_Base_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b20:	f000 f8b4 	bl	8002c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b2a:	f107 0308 	add.w	r3, r7, #8
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480c      	ldr	r0, [pc, #48]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b32:	f003 fb7b 	bl	800622c <HAL_TIM_ConfigClockSource>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b3c:	f000 f8a6 	bl	8002c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b44:	2300      	movs	r3, #0
 8002b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b48:	463b      	mov	r3, r7
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_TIM4_Init+0x94>)
 8002b4e:	f003 ff1f 	bl	8006990 <HAL_TIMEx_MasterConfigSynchronization>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b58:	f000 f898 	bl	8002c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b5c:	bf00      	nop
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200003a0 	.word	0x200003a0
 8002b68:	40000800 	.word	0x40000800

08002b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
 8002b76:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <MX_DMA_Init+0x4c>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	; (8002bb8 <MX_DMA_Init+0x4c>)
 8002b7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <MX_DMA_Init+0x4c>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2100      	movs	r1, #0
 8002b92:	2038      	movs	r0, #56	; 0x38
 8002b94:	f001 f923 	bl	8003dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b98:	2038      	movs	r0, #56	; 0x38
 8002b9a:	f001 f93c 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	203a      	movs	r0, #58	; 0x3a
 8002ba4:	f001 f91b 	bl	8003dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002ba8:	203a      	movs	r0, #58	; 0x3a
 8002baa:	f001 f934 	bl	8003e16 <HAL_NVIC_EnableIRQ>

}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800

08002bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b088      	sub	sp, #32
 8002bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
 8002bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002be0:	6313      	str	r3, [r2, #48]	; 0x30
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	4b24      	ldr	r3, [pc, #144]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	4a1c      	ldr	r2, [pc, #112]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	6313      	str	r3, [r2, #48]	; 0x30
 8002c1a:	4b1a      	ldr	r3, [pc, #104]	; (8002c84 <MX_GPIO_Init+0xc8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10, GPIO_PIN_RESET);
 8002c26:	2200      	movs	r2, #0
 8002c28:	f240 4103 	movw	r1, #1027	; 0x403
 8002c2c:	4816      	ldr	r0, [pc, #88]	; (8002c88 <MX_GPIO_Init+0xcc>)
 8002c2e:	f001 fe01 	bl	8004834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10;
 8002c32:	f240 4303 	movw	r3, #1027	; 0x403
 8002c36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480f      	ldr	r0, [pc, #60]	; (8002c88 <MX_GPIO_Init+0xcc>)
 8002c4c:	f001 fc6e 	bl	800452c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c50:	2304      	movs	r3, #4
 8002c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002c54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002c58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	4619      	mov	r1, r3
 8002c64:	4808      	ldr	r0, [pc, #32]	; (8002c88 <MX_GPIO_Init+0xcc>)
 8002c66:	f001 fc61 	bl	800452c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	2008      	movs	r0, #8
 8002c70:	f001 f8b5 	bl	8003dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002c74:	2008      	movs	r0, #8
 8002c76:	f001 f8ce 	bl	8003e16 <HAL_NVIC_EnableIRQ>

}
 8002c7a:	bf00      	nop
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020400 	.word	0x40020400

08002c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c90:	b672      	cpsid	i
}
 8002c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <Error_Handler+0x8>
	...

08002c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca6:	4a0f      	ldr	r2, [pc, #60]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cac:	6453      	str	r3, [r2, #68]	; 0x44
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a08      	ldr	r2, [pc, #32]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_MspInit+0x4c>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800

08002ce8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08a      	sub	sp, #40	; 0x28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 0314 	add.w	r3, r7, #20
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <HAL_ADC_MspInit+0xd8>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d156      	bne.n	8002db8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	4a2c      	ldr	r2, [pc, #176]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d18:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1a:	4b2a      	ldr	r3, [pc, #168]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d22:	613b      	str	r3, [r7, #16]
 8002d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b26      	ldr	r3, [pc, #152]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b23      	ldr	r3, [pc, #140]	; (8002dc4 <HAL_ADC_MspInit+0xdc>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002d42:	2304      	movs	r3, #4
 8002d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d46:	2303      	movs	r3, #3
 8002d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	481c      	ldr	r0, [pc, #112]	; (8002dc8 <HAL_ADC_MspInit+0xe0>)
 8002d56:	f001 fbe9 	bl	800452c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	; (8002dd0 <HAL_ADC_MspInit+0xe8>)
 8002d5e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002d60:	4b1a      	ldr	r3, [pc, #104]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d66:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d72:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d78:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d7a:	4b14      	ldr	r3, [pc, #80]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d80:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d82:	4b12      	ldr	r3, [pc, #72]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d88:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d8a:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d96:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d9c:	480b      	ldr	r0, [pc, #44]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002d9e:	f001 f855 	bl	8003e4c <HAL_DMA_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002da8:	f7ff ff70 	bl	8002c8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002db0:	639a      	str	r2, [r3, #56]	; 0x38
 8002db2:	4a06      	ldr	r2, [pc, #24]	; (8002dcc <HAL_ADC_MspInit+0xe4>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002db8:	bf00      	nop
 8002dba:	3728      	adds	r7, #40	; 0x28
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40012000 	.word	0x40012000
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40020000 	.word	0x40020000
 8002dcc:	20000478 	.word	0x20000478
 8002dd0:	40026410 	.word	0x40026410

08002dd4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b08a      	sub	sp, #40	; 0x28
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	605a      	str	r2, [r3, #4]
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	60da      	str	r2, [r3, #12]
 8002dea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <HAL_SPI_MspInit+0xe0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d159      	bne.n	8002eaa <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002e00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e04:	6453      	str	r3, [r2, #68]	; 0x44
 8002e06:	4b2c      	ldr	r3, [pc, #176]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	4a27      	ldr	r2, [pc, #156]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6313      	str	r3, [r2, #48]	; 0x30
 8002e22:	4b25      	ldr	r3, [pc, #148]	; (8002eb8 <HAL_SPI_MspInit+0xe4>)
 8002e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e2e:	23a0      	movs	r3, #160	; 0xa0
 8002e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e32:	2302      	movs	r3, #2
 8002e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e3e:	2305      	movs	r3, #5
 8002e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	481c      	ldr	r0, [pc, #112]	; (8002ebc <HAL_SPI_MspInit+0xe8>)
 8002e4a:	f001 fb6f 	bl	800452c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8002e4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e50:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_SPI_MspInit+0xf0>)
 8002e52:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b17      	ldr	r3, [pc, #92]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e76:	4b12      	ldr	r3, [pc, #72]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e7c:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e88:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002e8e:	480c      	ldr	r0, [pc, #48]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002e90:	f000 ffdc 	bl	8003e4c <HAL_DMA_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8002e9a:	f7ff fef7 	bl	8002c8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a07      	ldr	r2, [pc, #28]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002ea2:	649a      	str	r2, [r3, #72]	; 0x48
 8002ea4:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <HAL_SPI_MspInit+0xec>)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002eaa:	bf00      	nop
 8002eac:	3728      	adds	r7, #40	; 0x28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40013000 	.word	0x40013000
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	20000578 	.word	0x20000578
 8002ec4:	40026440 	.word	0x40026440

08002ec8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b08a      	sub	sp, #40	; 0x28
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
 8002ed8:	605a      	str	r2, [r3, #4]
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	60da      	str	r2, [r3, #12]
 8002ede:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee8:	d133      	bne.n	8002f52 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	4b1b      	ldr	r3, [pc, #108]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a1a      	ldr	r2, [pc, #104]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002ef4:	f043 0301 	orr.w	r3, r3, #1
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b14      	ldr	r3, [pc, #80]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002f22:	2303      	movs	r3, #3
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	2302      	movs	r3, #2
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f32:	2301      	movs	r3, #1
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f36:	f107 0314 	add.w	r3, r7, #20
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4808      	ldr	r0, [pc, #32]	; (8002f60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002f3e:	f001 faf5 	bl	800452c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f42:	2200      	movs	r2, #0
 8002f44:	2100      	movs	r1, #0
 8002f46:	201c      	movs	r0, #28
 8002f48:	f000 ff49 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f4c:	201c      	movs	r0, #28
 8002f4e:	f000 ff62 	bl	8003e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f52:	bf00      	nop
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000

08002f64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <HAL_TIM_Base_MspInit+0x70>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d10e      	bne.n	8002f94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	4a16      	ldr	r2, [pc, #88]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6413      	str	r3, [r2, #64]	; 0x40
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f92:	e01a      	b.n	8002fca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_TIM_Base_MspInit+0x78>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d115      	bne.n	8002fca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	4b0d      	ldr	r3, [pc, #52]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <HAL_TIM_Base_MspInit+0x74>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	201e      	movs	r0, #30
 8002fc0:	f000 ff0d 	bl	8003dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fc4:	201e      	movs	r0, #30
 8002fc6:	f000 ff26 	bl	8003e16 <HAL_NVIC_EnableIRQ>
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40000400 	.word	0x40000400
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40000800 	.word	0x40000800

08002fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a12      	ldr	r2, [pc, #72]	; (8003048 <HAL_TIM_MspPostInit+0x68>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d11d      	bne.n	800303e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	2300      	movs	r3, #0
 8003004:	60bb      	str	r3, [r7, #8]
 8003006:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_TIM_MspPostInit+0x6c>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HAL_TIM_MspPostInit+0x6c>)
 800300c:	f043 0301 	orr.w	r3, r3, #1
 8003010:	6313      	str	r3, [r2, #48]	; 0x30
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <HAL_TIM_MspPostInit+0x6c>)
 8003014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
 800301c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800301e:	2340      	movs	r3, #64	; 0x40
 8003020:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 030c 	add.w	r3, r7, #12
 8003036:	4619      	mov	r1, r3
 8003038:	4805      	ldr	r0, [pc, #20]	; (8003050 <HAL_TIM_MspPostInit+0x70>)
 800303a:	f001 fa77 	bl	800452c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3720      	adds	r7, #32
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40000400 	.word	0x40000400
 800304c:	40023800 	.word	0x40023800
 8003050:	40020000 	.word	0x40020000

08003054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003058:	e7fe      	b.n	8003058 <NMI_Handler+0x4>

0800305a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305e:	e7fe      	b.n	800305e <HardFault_Handler+0x4>

08003060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <MemManage_Handler+0x4>

08003066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <BusFault_Handler+0x4>

0800306c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <UsageFault_Handler+0x4>

08003072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003084:	bf00      	nop
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr

0800308e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030a0:	f000 f986 	bl	80033b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80030ac:	2004      	movs	r0, #4
 80030ae:	f001 fbdb 	bl	8004868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <TIM2_IRQHandler+0x10>)
 80030be:	f002 feeb 	bl	8005e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	20000530 	.word	0x20000530

080030cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM4_IRQHandler+0x10>)
 80030d2:	f002 fee1 	bl	8005e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200003a0 	.word	0x200003a0

080030e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <DMA2_Stream0_IRQHandler+0x10>)
 80030e6:	f000 ffb7 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000478 	.word	0x20000478

080030f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <DMA2_Stream2_IRQHandler+0x10>)
 80030fa:	f000 ffad 	bl	8004058 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000578 	.word	0x20000578

08003108 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
	return 1;
 800310c:	2301      	movs	r3, #1
}
 800310e:	4618      	mov	r0, r3
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <_kill>:

int _kill(int pid, int sig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003122:	f003 fcb7 	bl	8006a94 <__errno>
 8003126:	4603      	mov	r3, r0
 8003128:	2216      	movs	r2, #22
 800312a:	601a      	str	r2, [r3, #0]
	return -1;
 800312c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <_exit>:

void _exit (int status)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003140:	f04f 31ff 	mov.w	r1, #4294967295
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ffe7 	bl	8003118 <_kill>
	while (1) {}		/* Make sure we hang here */
 800314a:	e7fe      	b.n	800314a <_exit+0x12>

0800314c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e00a      	b.n	8003174 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800315e:	f3af 8000 	nop.w
 8003162:	4601      	mov	r1, r0
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	1c5a      	adds	r2, r3, #1
 8003168:	60ba      	str	r2, [r7, #8]
 800316a:	b2ca      	uxtb	r2, r1
 800316c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	3301      	adds	r3, #1
 8003172:	617b      	str	r3, [r7, #20]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	429a      	cmp	r2, r3
 800317a:	dbf0      	blt.n	800315e <_read+0x12>
	}

return len;
 800317c:	687b      	ldr	r3, [r7, #4]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b086      	sub	sp, #24
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	e009      	b.n	80031ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	60ba      	str	r2, [r7, #8]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	3301      	adds	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	dbf1      	blt.n	8003198 <_write+0x12>
	}
	return len;
 80031b4:	687b      	ldr	r3, [r7, #4]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}

080031be <_close>:

int _close(int file)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
	return -1;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e6:	605a      	str	r2, [r3, #4]
	return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <_isatty>:

int _isatty(int file)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
	return 1;
 80031fe:	2301      	movs	r3, #1
}
 8003200:	4618      	mov	r0, r3
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
	return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <_sbrk+0x5c>)
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <_sbrk+0x60>)
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800323c:	4b13      	ldr	r3, [pc, #76]	; (800328c <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <_sbrk+0x64>)
 8003246:	4a12      	ldr	r2, [pc, #72]	; (8003290 <_sbrk+0x68>)
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324a:	4b10      	ldr	r3, [pc, #64]	; (800328c <_sbrk+0x64>)
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4413      	add	r3, r2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	429a      	cmp	r2, r3
 8003256:	d207      	bcs.n	8003268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003258:	f003 fc1c 	bl	8006a94 <__errno>
 800325c:	4603      	mov	r3, r0
 800325e:	220c      	movs	r2, #12
 8003260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003262:	f04f 33ff 	mov.w	r3, #4294967295
 8003266:	e009      	b.n	800327c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <_sbrk+0x64>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <_sbrk+0x64>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4413      	add	r3, r2
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <_sbrk+0x64>)
 8003278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800327a:	68fb      	ldr	r3, [r7, #12]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3718      	adds	r7, #24
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20020000 	.word	0x20020000
 8003288:	00000400 	.word	0x00000400
 800328c:	20000394 	.word	0x20000394
 8003290:	200005f0 	.word	0x200005f0

08003294 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <SystemInit+0x20>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <SystemInit+0x20>)
 80032a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032a8:	bf00      	nop
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032bc:	480d      	ldr	r0, [pc, #52]	; (80032f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032be:	490e      	ldr	r1, [pc, #56]	; (80032f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c4:	e002      	b.n	80032cc <LoopCopyDataInit>

080032c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ca:	3304      	adds	r3, #4

080032cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d0:	d3f9      	bcc.n	80032c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d2:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032d4:	4c0b      	ldr	r4, [pc, #44]	; (8003304 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d8:	e001      	b.n	80032de <LoopFillZerobss>

080032da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032dc:	3204      	adds	r2, #4

080032de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e0:	d3fb      	bcc.n	80032da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032e2:	f7ff ffd7 	bl	8003294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e6:	f003 fbdb 	bl	8006aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ea:	f7fe ff41 	bl	8002170 <main>
  bx  lr    
 80032ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80032fc:	0800c188 	.word	0x0800c188
  ldr r2, =_sbss
 8003300:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8003304:	200005ec 	.word	0x200005ec

08003308 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC_IRQHandler>
	...

0800330c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003310:	4b0e      	ldr	r3, [pc, #56]	; (800334c <HAL_Init+0x40>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a0d      	ldr	r2, [pc, #52]	; (800334c <HAL_Init+0x40>)
 8003316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800331a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_Init+0x40>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <HAL_Init+0x40>)
 8003322:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003326:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <HAL_Init+0x40>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <HAL_Init+0x40>)
 800332e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003332:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003334:	2003      	movs	r0, #3
 8003336:	f000 fd47 	bl	8003dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800333a:	2000      	movs	r0, #0
 800333c:	f000 f808 	bl	8003350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003340:	f7ff fcaa 	bl	8002c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00

08003350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_InitTick+0x54>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	4b12      	ldr	r3, [pc, #72]	; (80033a8 <HAL_InitTick+0x58>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	4619      	mov	r1, r3
 8003362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003366:	fbb3 f3f1 	udiv	r3, r3, r1
 800336a:	fbb2 f3f3 	udiv	r3, r2, r3
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fd5f 	bl	8003e32 <HAL_SYSTICK_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e00e      	b.n	800339c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b0f      	cmp	r3, #15
 8003382:	d80a      	bhi.n	800339a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003384:	2200      	movs	r2, #0
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	f000 fd27 	bl	8003dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003390:	4a06      	ldr	r2, [pc, #24]	; (80033ac <HAL_InitTick+0x5c>)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000100 	.word	0x20000100
 80033a8:	20000108 	.word	0x20000108
 80033ac:	20000104 	.word	0x20000104

080033b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b4:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <HAL_IncTick+0x20>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_IncTick+0x24>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4413      	add	r3, r2
 80033c0:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <HAL_IncTick+0x24>)
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	20000108 	.word	0x20000108
 80033d4:	200005d8 	.word	0x200005d8

080033d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return uwTick;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_GetTick+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200005d8 	.word	0x200005d8

080033f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033f8:	f7ff ffee 	bl	80033d8 <HAL_GetTick>
 80033fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003408:	d005      	beq.n	8003416 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_Delay+0x44>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	4413      	add	r3, r2
 8003414:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003416:	bf00      	nop
 8003418:	f7ff ffde 	bl	80033d8 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	429a      	cmp	r2, r3
 8003426:	d8f7      	bhi.n	8003418 <HAL_Delay+0x28>
  {
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20000108 	.word	0x20000108

08003438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e033      	b.n	80034b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff fc46 	bl	8002ce8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800347e:	f023 0302 	bic.w	r3, r3, #2
 8003482:	f043 0202 	orr.w	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fa4e 	bl	800392c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
 80034a6:	e001      	b.n	80034ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Start_DMA+0x1e>
 80034da:	2302      	movs	r3, #2
 80034dc:	e0ce      	b.n	800367c <HAL_ADC_Start_DMA+0x1bc>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d018      	beq.n	8003526 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003504:	4b5f      	ldr	r3, [pc, #380]	; (8003684 <HAL_ADC_Start_DMA+0x1c4>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a5f      	ldr	r2, [pc, #380]	; (8003688 <HAL_ADC_Start_DMA+0x1c8>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9a      	lsrs	r2, r3, #18
 8003510:	4613      	mov	r3, r2
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4413      	add	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003518:	e002      	b.n	8003520 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3b01      	subs	r3, #1
 800351e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f9      	bne.n	800351a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d107      	bne.n	8003546 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003544:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	f040 8086 	bne.w	8003662 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003580:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003594:	d106      	bne.n	80035a4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f023 0206 	bic.w	r2, r3, #6
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	645a      	str	r2, [r3, #68]	; 0x44
 80035a2:	e002      	b.n	80035aa <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80035b2:	4b36      	ldr	r3, [pc, #216]	; (800368c <HAL_ADC_Start_DMA+0x1cc>)
 80035b4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	4a35      	ldr	r2, [pc, #212]	; (8003690 <HAL_ADC_Start_DMA+0x1d0>)
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4a34      	ldr	r2, [pc, #208]	; (8003694 <HAL_ADC_Start_DMA+0x1d4>)
 80035c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4a33      	ldr	r2, [pc, #204]	; (8003698 <HAL_ADC_Start_DMA+0x1d8>)
 80035cc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80035d6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80035e6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035f6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	334c      	adds	r3, #76	; 0x4c
 8003602:	4619      	mov	r1, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f000 fcce 	bl	8003fa8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10f      	bne.n	8003638 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d129      	bne.n	800367a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	e020      	b.n	800367a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a17      	ldr	r2, [pc, #92]	; (800369c <HAL_ADC_Start_DMA+0x1dc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d11b      	bne.n	800367a <HAL_ADC_Start_DMA+0x1ba>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d114      	bne.n	800367a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	e00b      	b.n	800367a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0210 	orr.w	r2, r3, #16
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	f043 0201 	orr.w	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3718      	adds	r7, #24
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	20000100 	.word	0x20000100
 8003688:	431bde83 	.word	0x431bde83
 800368c:	40012300 	.word	0x40012300
 8003690:	08003b25 	.word	0x08003b25
 8003694:	08003bdf 	.word	0x08003bdf
 8003698:	08003bfb 	.word	0x08003bfb
 800369c:	40012000 	.word	0x40012000

080036a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x1c>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e113      	b.n	800390c <HAL_ADC_ConfigChannel+0x244>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b09      	cmp	r3, #9
 80036f2:	d925      	bls.n	8003740 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	68d9      	ldr	r1, [r3, #12]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	461a      	mov	r2, r3
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	3b1e      	subs	r3, #30
 800370a:	2207      	movs	r2, #7
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43da      	mvns	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	400a      	ands	r2, r1
 8003718:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68d9      	ldr	r1, [r3, #12]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	b29b      	uxth	r3, r3
 800372a:	4618      	mov	r0, r3
 800372c:	4603      	mov	r3, r0
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4403      	add	r3, r0
 8003732:	3b1e      	subs	r3, #30
 8003734:	409a      	lsls	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e022      	b.n	8003786 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6919      	ldr	r1, [r3, #16]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	b29b      	uxth	r3, r3
 800374c:	461a      	mov	r2, r3
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	2207      	movs	r2, #7
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43da      	mvns	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	400a      	ands	r2, r1
 8003762:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	b29b      	uxth	r3, r3
 8003774:	4618      	mov	r0, r3
 8003776:	4603      	mov	r3, r0
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4403      	add	r3, r0
 800377c:	409a      	lsls	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	430a      	orrs	r2, r1
 8003784:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b06      	cmp	r3, #6
 800378c:	d824      	bhi.n	80037d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	4413      	add	r3, r2
 800379e:	3b05      	subs	r3, #5
 80037a0:	221f      	movs	r2, #31
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43da      	mvns	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	400a      	ands	r2, r1
 80037ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	4618      	mov	r0, r3
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	3b05      	subs	r3, #5
 80037ca:	fa00 f203 	lsl.w	r2, r0, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	635a      	str	r2, [r3, #52]	; 0x34
 80037d6:	e04c      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d824      	bhi.n	800382a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	3b23      	subs	r3, #35	; 0x23
 80037f2:	221f      	movs	r2, #31
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	b29b      	uxth	r3, r3
 800380e:	4618      	mov	r0, r3
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	3b23      	subs	r3, #35	; 0x23
 800381c:	fa00 f203 	lsl.w	r2, r0, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
 8003828:	e023      	b.n	8003872 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	3b41      	subs	r3, #65	; 0x41
 800383c:	221f      	movs	r2, #31
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	43da      	mvns	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	400a      	ands	r2, r1
 800384a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	4618      	mov	r0, r3
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	3b41      	subs	r3, #65	; 0x41
 8003866:	fa00 f203 	lsl.w	r2, r0, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003872:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_ADC_ConfigChannel+0x250>)
 8003874:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a28      	ldr	r2, [pc, #160]	; (800391c <HAL_ADC_ConfigChannel+0x254>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d10f      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1d8>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b12      	cmp	r3, #18
 8003886:	d10b      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	; (800391c <HAL_ADC_ConfigChannel+0x254>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d12b      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <HAL_ADC_ConfigChannel+0x258>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <HAL_ADC_ConfigChannel+0x1f4>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b11      	cmp	r3, #17
 80038ba:	d122      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a11      	ldr	r2, [pc, #68]	; (8003920 <HAL_ADC_ConfigChannel+0x258>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d111      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038de:	4b11      	ldr	r3, [pc, #68]	; (8003924 <HAL_ADC_ConfigChannel+0x25c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a11      	ldr	r2, [pc, #68]	; (8003928 <HAL_ADC_ConfigChannel+0x260>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9a      	lsrs	r2, r3, #18
 80038ea:	4613      	mov	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038f4:	e002      	b.n	80038fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f9      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr
 8003918:	40012300 	.word	0x40012300
 800391c:	40012000 	.word	0x40012000
 8003920:	10000012 	.word	0x10000012
 8003924:	20000100 	.word	0x20000100
 8003928:	431bde83 	.word	0x431bde83

0800392c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003934:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <ADC_Init+0x1f0>)
 8003936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	4a58      	ldr	r2, [pc, #352]	; (8003b20 <ADC_Init+0x1f4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d022      	beq.n	8003a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6899      	ldr	r1, [r3, #8]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6899      	ldr	r1, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e00f      	b.n	8003a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0202 	bic.w	r2, r2, #2
 8003a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6899      	ldr	r1, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7e1b      	ldrb	r3, [r3, #24]
 8003a44:	005a      	lsls	r2, r3, #1
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	3b01      	subs	r3, #1
 8003a84:	035a      	lsls	r2, r3, #13
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	e007      	b.n	8003aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	051a      	lsls	r2, r3, #20
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ae2:	025a      	lsls	r2, r3, #9
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6899      	ldr	r1, [r3, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	029a      	lsls	r2, r3, #10
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	609a      	str	r2, [r3, #8]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	40012300 	.word	0x40012300
 8003b20:	0f000001 	.word	0x0f000001

08003b24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13c      	bne.n	8003bb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d12b      	bne.n	8003bb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d127      	bne.n	8003bb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d119      	bne.n	8003bb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f022 0220 	bic.w	r2, r2, #32
 8003b8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d105      	bne.n	8003bb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	f043 0201 	orr.w	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7fe f8cd 	bl	8001d50 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bb6:	e00e      	b.n	8003bd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff fd75 	bl	80036b4 <HAL_ADC_ErrorCallback>
}
 8003bca:	e004      	b.n	8003bd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b084      	sub	sp, #16
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f7ff fd57 	bl	80036a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b084      	sub	sp, #16
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2240      	movs	r2, #64	; 0x40
 8003c0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c12:	f043 0204 	orr.w	r2, r3, #4
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff fd4a 	bl	80036b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	db0b      	blt.n	8003cb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	f003 021f 	and.w	r2, r3, #31
 8003ca4:	4907      	ldr	r1, [pc, #28]	; (8003cc4 <__NVIC_EnableIRQ+0x38>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	2001      	movs	r0, #1
 8003cae:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	e000e100 	.word	0xe000e100

08003cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	db0a      	blt.n	8003cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	490c      	ldr	r1, [pc, #48]	; (8003d14 <__NVIC_SetPriority+0x4c>)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	0112      	lsls	r2, r2, #4
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	440b      	add	r3, r1
 8003cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cf0:	e00a      	b.n	8003d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <__NVIC_SetPriority+0x50>)
 8003cf8:	79fb      	ldrb	r3, [r7, #7]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	3b04      	subs	r3, #4
 8003d00:	0112      	lsls	r2, r2, #4
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	440b      	add	r3, r1
 8003d06:	761a      	strb	r2, [r3, #24]
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000e100 	.word	0xe000e100
 8003d18:	e000ed00 	.word	0xe000ed00

08003d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b089      	sub	sp, #36	; 0x24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f1c3 0307 	rsb	r3, r3, #7
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	bf28      	it	cs
 8003d3a:	2304      	movcs	r3, #4
 8003d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d902      	bls.n	8003d4c <NVIC_EncodePriority+0x30>
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3b03      	subs	r3, #3
 8003d4a:	e000      	b.n	8003d4e <NVIC_EncodePriority+0x32>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d50:	f04f 32ff 	mov.w	r2, #4294967295
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	401a      	ands	r2, r3
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d64:	f04f 31ff 	mov.w	r1, #4294967295
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	43d9      	mvns	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d74:	4313      	orrs	r3, r2
         );
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3724      	adds	r7, #36	; 0x24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d94:	d301      	bcc.n	8003d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d96:	2301      	movs	r3, #1
 8003d98:	e00f      	b.n	8003dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <SysTick_Config+0x40>)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003da2:	210f      	movs	r1, #15
 8003da4:	f04f 30ff 	mov.w	r0, #4294967295
 8003da8:	f7ff ff8e 	bl	8003cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <SysTick_Config+0x40>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <SysTick_Config+0x40>)
 8003db4:	2207      	movs	r2, #7
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff ff29 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003dd6:	bf00      	nop
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b086      	sub	sp, #24
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003df0:	f7ff ff3e 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	6978      	ldr	r0, [r7, #20]
 8003dfc:	f7ff ff8e 	bl	8003d1c <NVIC_EncodePriority>
 8003e00:	4602      	mov	r2, r0
 8003e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ff5d 	bl	8003cc8 <__NVIC_SetPriority>
}
 8003e0e:	bf00      	nop
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b082      	sub	sp, #8
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff31 	bl	8003c8c <__NVIC_EnableIRQ>
}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7ff ffa2 	bl	8003d84 <SysTick_Config>
 8003e40:	4603      	mov	r3, r0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
	...

08003e4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e58:	f7ff fabe 	bl	80033d8 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e099      	b.n	8003f9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e88:	e00f      	b.n	8003eaa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8a:	f7ff faa5 	bl	80033d8 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b05      	cmp	r3, #5
 8003e96:	d908      	bls.n	8003eaa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e078      	b.n	8003f9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1e8      	bne.n	8003e8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <HAL_DMA_Init+0x158>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d107      	bne.n	8003f14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d117      	bne.n	8003f6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00e      	beq.n	8003f6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa6f 	bl	8004434 <DMA_CheckFifoParam>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2240      	movs	r2, #64	; 0x40
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e016      	b.n	8003f9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	697a      	ldr	r2, [r7, #20]
 8003f74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa26 	bl	80043c8 <DMA_CalcBaseAndBitshift>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f84:	223f      	movs	r2, #63	; 0x3f
 8003f86:	409a      	lsls	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	f010803f 	.word	0xf010803f

08003fa8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d101      	bne.n	8003fce <HAL_DMA_Start_IT+0x26>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e040      	b.n	8004050 <HAL_DMA_Start_IT+0xa8>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d12f      	bne.n	8004042 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 f9b8 	bl	800436c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004000:	223f      	movs	r2, #63	; 0x3f
 8004002:	409a      	lsls	r2, r3
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0216 	orr.w	r2, r2, #22
 8004016:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0208 	orr.w	r2, r2, #8
 800402e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	e005      	b.n	800404e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800404a:	2302      	movs	r3, #2
 800404c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004064:	4b92      	ldr	r3, [pc, #584]	; (80042b0 <HAL_DMA_IRQHandler+0x258>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a92      	ldr	r2, [pc, #584]	; (80042b4 <HAL_DMA_IRQHandler+0x25c>)
 800406a:	fba2 2303 	umull	r2, r3, r2, r3
 800406e:	0a9b      	lsrs	r3, r3, #10
 8004070:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004082:	2208      	movs	r2, #8
 8004084:	409a      	lsls	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01a      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0304 	and.w	r3, r3, #4
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0204 	bic.w	r2, r2, #4
 80040aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b0:	2208      	movs	r2, #8
 80040b2:	409a      	lsls	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4013      	ands	r3, r2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d012      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e6:	2201      	movs	r2, #1
 80040e8:	409a      	lsls	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0202 	orr.w	r2, r3, #2
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	2204      	movs	r2, #4
 8004100:	409a      	lsls	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4013      	ands	r3, r2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00b      	beq.n	8004130 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800411c:	2204      	movs	r2, #4
 800411e:	409a      	lsls	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	f043 0204 	orr.w	r2, r3, #4
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004134:	2210      	movs	r2, #16
 8004136:	409a      	lsls	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d043      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b00      	cmp	r3, #0
 800414c:	d03c      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	2210      	movs	r2, #16
 8004154:	409a      	lsls	r2, r3
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d018      	beq.n	800419a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d108      	bne.n	8004188 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d024      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	4798      	blx	r3
 8004186:	e01f      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01b      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	4798      	blx	r3
 8004198:	e016      	b.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d107      	bne.n	80041b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0208 	bic.w	r2, r2, #8
 80041b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041cc:	2220      	movs	r2, #32
 80041ce:	409a      	lsls	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 808e 	beq.w	80042f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0310 	and.w	r3, r3, #16
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8086 	beq.w	80042f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	2220      	movs	r2, #32
 80041f0:	409a      	lsls	r2, r3
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d136      	bne.n	8004270 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0216 	bic.w	r2, r2, #22
 8004210:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695a      	ldr	r2, [r3, #20]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004220:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_DMA_IRQHandler+0x1da>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	2b00      	cmp	r3, #0
 8004230:	d007      	beq.n	8004242 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0208 	bic.w	r2, r2, #8
 8004240:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004246:	223f      	movs	r2, #63	; 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	d07d      	beq.n	8004362 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	4798      	blx	r3
        }
        return;
 800426e:	e078      	b.n	8004362 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d01c      	beq.n	80042b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	2b00      	cmp	r3, #0
 8004292:	d030      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
 800429c:	e02b      	b.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d027      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	4798      	blx	r3
 80042ae:	e022      	b.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
 80042b0:	20000100 	.word	0x20000100
 80042b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0210 	bic.w	r2, r2, #16
 80042d4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d032      	beq.n	8004364 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d022      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2205      	movs	r2, #5
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3301      	adds	r3, #1
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	429a      	cmp	r2, r3
 800432c:	d307      	bcc.n	800433e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f2      	bne.n	8004322 <HAL_DMA_IRQHandler+0x2ca>
 800433c:	e000      	b.n	8004340 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800433e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	4798      	blx	r3
 8004360:	e000      	b.n	8004364 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004362:	bf00      	nop
    }
  }
}
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop

0800436c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004388:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	d108      	bne.n	80043ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043aa:	e007      	b.n	80043bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	60da      	str	r2, [r3, #12]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	3b10      	subs	r3, #16
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <DMA_CalcBaseAndBitshift+0x64>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	091b      	lsrs	r3, r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043e2:	4a13      	ldr	r2, [pc, #76]	; (8004430 <DMA_CalcBaseAndBitshift+0x68>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b03      	cmp	r3, #3
 80043f4:	d909      	bls.n	800440a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	1d1a      	adds	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	659a      	str	r2, [r3, #88]	; 0x58
 8004408:	e007      	b.n	800441a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	aaaaaaab 	.word	0xaaaaaaab
 8004430:	0800bd48 	.word	0x0800bd48

08004434 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d11f      	bne.n	800448e <DMA_CheckFifoParam+0x5a>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b03      	cmp	r3, #3
 8004452:	d856      	bhi.n	8004502 <DMA_CheckFifoParam+0xce>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <DMA_CheckFifoParam+0x28>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	0800446d 	.word	0x0800446d
 8004460:	0800447f 	.word	0x0800447f
 8004464:	0800446d 	.word	0x0800446d
 8004468:	08004503 	.word	0x08004503
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d046      	beq.n	8004506 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e043      	b.n	8004506 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004486:	d140      	bne.n	800450a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448c:	e03d      	b.n	800450a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004496:	d121      	bne.n	80044dc <DMA_CheckFifoParam+0xa8>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d837      	bhi.n	800450e <DMA_CheckFifoParam+0xda>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <DMA_CheckFifoParam+0x70>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044bb 	.word	0x080044bb
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	080044cd 	.word	0x080044cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
      break;
 80044b8:	e030      	b.n	800451c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ca:	e022      	b.n	8004512 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d4:	d11f      	bne.n	8004516 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044da:	e01c      	b.n	8004516 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d903      	bls.n	80044ea <DMA_CheckFifoParam+0xb6>
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044e8:	e018      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      break;
 80044ee:	e015      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e00b      	b.n	800451a <DMA_CheckFifoParam+0xe6>
      break;
 8004502:	bf00      	nop
 8004504:	e00a      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004506:	bf00      	nop
 8004508:	e008      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450a:	bf00      	nop
 800450c:	e006      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;   
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
    }
  } 
  
  return status; 
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	; 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800453e:	2300      	movs	r3, #0
 8004540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e159      	b.n	80047fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004548:	2201      	movs	r2, #1
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	697a      	ldr	r2, [r7, #20]
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	429a      	cmp	r2, r3
 8004562:	f040 8148 	bne.w	80047f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b01      	cmp	r3, #1
 8004570:	d005      	beq.n	800457e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800457a:	2b02      	cmp	r3, #2
 800457c:	d130      	bne.n	80045e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	2203      	movs	r2, #3
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	68da      	ldr	r2, [r3, #12]
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045b4:	2201      	movs	r2, #1
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 0201 	and.w	r2, r3, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f003 0303 	and.w	r3, r3, #3
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d017      	beq.n	800461c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	2203      	movs	r2, #3
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	4013      	ands	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	fa02 f303 	lsl.w	r3, r2, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4313      	orrs	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	2b02      	cmp	r3, #2
 8004626:	d123      	bne.n	8004670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	08da      	lsrs	r2, r3, #3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	3208      	adds	r2, #8
 8004630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	220f      	movs	r2, #15
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43db      	mvns	r3, r3
 8004646:	69ba      	ldr	r2, [r7, #24]
 8004648:	4013      	ands	r3, r2
 800464a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	fa02 f303 	lsl.w	r3, r2, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	08da      	lsrs	r2, r3, #3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	3208      	adds	r2, #8
 800466a:	69b9      	ldr	r1, [r7, #24]
 800466c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2203      	movs	r2, #3
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 0203 	and.w	r2, r3, #3
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4313      	orrs	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a2 	beq.w	80047f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
 80046b6:	4b57      	ldr	r3, [pc, #348]	; (8004814 <HAL_GPIO_Init+0x2e8>)
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	4a56      	ldr	r2, [pc, #344]	; (8004814 <HAL_GPIO_Init+0x2e8>)
 80046bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c0:	6453      	str	r3, [r2, #68]	; 0x44
 80046c2:	4b54      	ldr	r3, [pc, #336]	; (8004814 <HAL_GPIO_Init+0x2e8>)
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80046ce:	4a52      	ldr	r2, [pc, #328]	; (8004818 <HAL_GPIO_Init+0x2ec>)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	089b      	lsrs	r3, r3, #2
 80046d4:	3302      	adds	r3, #2
 80046d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	220f      	movs	r2, #15
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43db      	mvns	r3, r3
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	4013      	ands	r3, r2
 80046f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a49      	ldr	r2, [pc, #292]	; (800481c <HAL_GPIO_Init+0x2f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d019      	beq.n	800472e <HAL_GPIO_Init+0x202>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a48      	ldr	r2, [pc, #288]	; (8004820 <HAL_GPIO_Init+0x2f4>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d013      	beq.n	800472a <HAL_GPIO_Init+0x1fe>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a47      	ldr	r2, [pc, #284]	; (8004824 <HAL_GPIO_Init+0x2f8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00d      	beq.n	8004726 <HAL_GPIO_Init+0x1fa>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a46      	ldr	r2, [pc, #280]	; (8004828 <HAL_GPIO_Init+0x2fc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <HAL_GPIO_Init+0x1f6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a45      	ldr	r2, [pc, #276]	; (800482c <HAL_GPIO_Init+0x300>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_GPIO_Init+0x1f2>
 800471a:	2304      	movs	r3, #4
 800471c:	e008      	b.n	8004730 <HAL_GPIO_Init+0x204>
 800471e:	2307      	movs	r3, #7
 8004720:	e006      	b.n	8004730 <HAL_GPIO_Init+0x204>
 8004722:	2303      	movs	r3, #3
 8004724:	e004      	b.n	8004730 <HAL_GPIO_Init+0x204>
 8004726:	2302      	movs	r3, #2
 8004728:	e002      	b.n	8004730 <HAL_GPIO_Init+0x204>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_GPIO_Init+0x204>
 800472e:	2300      	movs	r3, #0
 8004730:	69fa      	ldr	r2, [r7, #28]
 8004732:	f002 0203 	and.w	r2, r2, #3
 8004736:	0092      	lsls	r2, r2, #2
 8004738:	4093      	lsls	r3, r2
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004740:	4935      	ldr	r1, [pc, #212]	; (8004818 <HAL_GPIO_Init+0x2ec>)
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	3302      	adds	r3, #2
 8004748:	69ba      	ldr	r2, [r7, #24]
 800474a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <HAL_GPIO_Init+0x304>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	43db      	mvns	r3, r3
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	4013      	ands	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004772:	4a2f      	ldr	r2, [pc, #188]	; (8004830 <HAL_GPIO_Init+0x304>)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004778:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <HAL_GPIO_Init+0x304>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	4013      	ands	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d003      	beq.n	800479c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800479c:	4a24      	ldr	r2, [pc, #144]	; (8004830 <HAL_GPIO_Init+0x304>)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047a2:	4b23      	ldr	r3, [pc, #140]	; (8004830 <HAL_GPIO_Init+0x304>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4013      	ands	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047c6:	4a1a      	ldr	r2, [pc, #104]	; (8004830 <HAL_GPIO_Init+0x304>)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_GPIO_Init+0x304>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_GPIO_Init+0x304>)
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3301      	adds	r3, #1
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b0f      	cmp	r3, #15
 8004800:	f67f aea2 	bls.w	8004548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop
 8004808:	3724      	adds	r7, #36	; 0x24
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40013800 	.word	0x40013800
 800481c:	40020000 	.word	0x40020000
 8004820:	40020400 	.word	0x40020400
 8004824:	40020800 	.word	0x40020800
 8004828:	40020c00 	.word	0x40020c00
 800482c:	40021000 	.word	0x40021000
 8004830:	40013c00 	.word	0x40013c00

08004834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	807b      	strh	r3, [r7, #2]
 8004840:	4613      	mov	r3, r2
 8004842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004844:	787b      	ldrb	r3, [r7, #1]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800484a:	887a      	ldrh	r2, [r7, #2]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004850:	e003      	b.n	800485a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004852:	887b      	ldrh	r3, [r7, #2]
 8004854:	041a      	lsls	r2, r3, #16
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	619a      	str	r2, [r3, #24]
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004872:	4b08      	ldr	r3, [pc, #32]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	88fb      	ldrh	r3, [r7, #6]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800487e:	4a05      	ldr	r2, [pc, #20]	; (8004894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004880:	88fb      	ldrh	r3, [r7, #6]
 8004882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004884:	88fb      	ldrh	r3, [r7, #6]
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fc34 	bl	80020f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40013c00 	.word	0x40013c00

08004898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e264      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d075      	beq.n	80049a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b6:	4ba3      	ldr	r3, [pc, #652]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 030c 	and.w	r3, r3, #12
 80048be:	2b04      	cmp	r3, #4
 80048c0:	d00c      	beq.n	80048dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048c2:	4ba0      	ldr	r3, [pc, #640]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d112      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4b9d      	ldr	r3, [pc, #628]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048da:	d10b      	bne.n	80048f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048dc:	4b99      	ldr	r3, [pc, #612]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d05b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x108>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d157      	bne.n	80049a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e23f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d106      	bne.n	800490c <HAL_RCC_OscConfig+0x74>
 80048fe:	4b91      	ldr	r3, [pc, #580]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a90      	ldr	r2, [pc, #576]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0x98>
 8004916:	4b8b      	ldr	r3, [pc, #556]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a8a      	ldr	r2, [pc, #552]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a87      	ldr	r2, [pc, #540]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xb0>
 8004930:	4b84      	ldr	r3, [pc, #528]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a83      	ldr	r2, [pc, #524]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a80      	ldr	r2, [pc, #512]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fe fd42 	bl	80033d8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004958:	f7fe fd3e 	bl	80033d8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e204      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b76      	ldr	r3, [pc, #472]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xc0>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fe fd2e 	bl	80033d8 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe fd2a 	bl	80033d8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1f0      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b6c      	ldr	r3, [pc, #432]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xe8>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d063      	beq.n	8004a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ae:	4b65      	ldr	r3, [pc, #404]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1c4      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b56      	ldr	r3, [pc, #344]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4952      	ldr	r1, [pc, #328]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e03a      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d020      	beq.n	8004a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b4f      	ldr	r3, [pc, #316]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fe fce3 	bl	80033d8 <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fe fcdf 	bl	80033d8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e1a5      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	4b46      	ldr	r3, [pc, #280]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d0f0      	beq.n	8004a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a34:	4b43      	ldr	r3, [pc, #268]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	4940      	ldr	r1, [pc, #256]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	600b      	str	r3, [r1, #0]
 8004a48:	e015      	b.n	8004a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a4a:	4b3f      	ldr	r3, [pc, #252]	; (8004b48 <HAL_RCC_OscConfig+0x2b0>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fe fcc2 	bl	80033d8 <HAL_GetTick>
 8004a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a56:	e008      	b.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a58:	f7fe fcbe 	bl	80033d8 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e184      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d1f0      	bne.n	8004a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0308 	and.w	r3, r3, #8
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d030      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8a:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a90:	f7fe fca2 	bl	80033d8 <HAL_GetTick>
 8004a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a96:	e008      	b.n	8004aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a98:	f7fe fc9e 	bl	80033d8 <HAL_GetTick>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	2b02      	cmp	r3, #2
 8004aa4:	d901      	bls.n	8004aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e164      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d0f0      	beq.n	8004a98 <HAL_RCC_OscConfig+0x200>
 8004ab6:	e015      	b.n	8004ae4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab8:	4b24      	ldr	r3, [pc, #144]	; (8004b4c <HAL_RCC_OscConfig+0x2b4>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004abe:	f7fe fc8b 	bl	80033d8 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac6:	f7fe fc87 	bl	80033d8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e14d      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	4b1a      	ldr	r3, [pc, #104]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1f0      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80a0 	beq.w	8004c32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af2:	2300      	movs	r3, #0
 8004af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af6:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10f      	bne.n	8004b22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	4b0f      	ldr	r3, [pc, #60]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	4a0e      	ldr	r2, [pc, #56]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b10:	6413      	str	r3, [r2, #64]	; 0x40
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b22:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d121      	bne.n	8004b72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2e:	4b08      	ldr	r3, [pc, #32]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a07      	ldr	r2, [pc, #28]	; (8004b50 <HAL_RCC_OscConfig+0x2b8>)
 8004b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b3a:	f7fe fc4d 	bl	80033d8 <HAL_GetTick>
 8004b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	e011      	b.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
 8004b42:	bf00      	nop
 8004b44:	40023800 	.word	0x40023800
 8004b48:	42470000 	.word	0x42470000
 8004b4c:	42470e80 	.word	0x42470e80
 8004b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fe fc40 	bl	80033d8 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e106      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b66:	4b85      	ldr	r3, [pc, #532]	; (8004d7c <HAL_RCC_OscConfig+0x4e4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d106      	bne.n	8004b88 <HAL_RCC_OscConfig+0x2f0>
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7e:	4a80      	ldr	r2, [pc, #512]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6713      	str	r3, [r2, #112]	; 0x70
 8004b86:	e01c      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	2b05      	cmp	r3, #5
 8004b8e:	d10c      	bne.n	8004baa <HAL_RCC_OscConfig+0x312>
 8004b90:	4b7b      	ldr	r3, [pc, #492]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b94:	4a7a      	ldr	r2, [pc, #488]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b96:	f043 0304 	orr.w	r3, r3, #4
 8004b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9c:	4b78      	ldr	r3, [pc, #480]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a77      	ldr	r2, [pc, #476]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	e00b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x32a>
 8004baa:	4b75      	ldr	r3, [pc, #468]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bae:	4a74      	ldr	r2, [pc, #464]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb6:	4b72      	ldr	r3, [pc, #456]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a71      	ldr	r2, [pc, #452]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bbc:	f023 0304 	bic.w	r3, r3, #4
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d015      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bca:	f7fe fc05 	bl	80033d8 <HAL_GetTick>
 8004bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd0:	e00a      	b.n	8004be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bd2:	f7fe fc01 	bl	80033d8 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e0c5      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be8:	4b65      	ldr	r3, [pc, #404]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0302 	and.w	r3, r3, #2
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d0ee      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x33a>
 8004bf4:	e014      	b.n	8004c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf6:	f7fe fbef 	bl	80033d8 <HAL_GetTick>
 8004bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bfc:	e00a      	b.n	8004c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfe:	f7fe fbeb 	bl	80033d8 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e0af      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c14:	4b5a      	ldr	r3, [pc, #360]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ee      	bne.n	8004bfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c20:	7dfb      	ldrb	r3, [r7, #23]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c26:	4b56      	ldr	r3, [pc, #344]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	4a55      	ldr	r2, [pc, #340]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 809b 	beq.w	8004d72 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d05c      	beq.n	8004d02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d141      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c50:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c56:	f7fe fbbf 	bl	80033d8 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5e:	f7fe fbbb 	bl	80033d8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e081      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	4b43      	ldr	r3, [pc, #268]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f0      	bne.n	8004c5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	019b      	lsls	r3, r3, #6
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	3b01      	subs	r3, #1
 8004c96:	041b      	lsls	r3, r3, #16
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	061b      	lsls	r3, r3, #24
 8004ca0:	4937      	ldr	r1, [pc, #220]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca6:	4b37      	ldr	r3, [pc, #220]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cac:	f7fe fb94 	bl	80033d8 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb2:	e008      	b.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb4:	f7fe fb90 	bl	80033d8 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d901      	bls.n	8004cc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e056      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	4b2e      	ldr	r3, [pc, #184]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0f0      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x41c>
 8004cd2:	e04e      	b.n	8004d72 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd4:	4b2b      	ldr	r3, [pc, #172]	; (8004d84 <HAL_RCC_OscConfig+0x4ec>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cda:	f7fe fb7d 	bl	80033d8 <HAL_GetTick>
 8004cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce0:	e008      	b.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ce2:	f7fe fb79 	bl	80033d8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e03f      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	4b22      	ldr	r3, [pc, #136]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x44a>
 8004d00:	e037      	b.n	8004d72 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e032      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d0e:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <HAL_RCC_OscConfig+0x4e8>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d028      	beq.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d121      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d11a      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d44:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d111      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	085b      	lsrs	r3, r3, #1
 8004d56:	3b01      	subs	r3, #1
 8004d58:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d107      	bne.n	8004d6e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	40007000 	.word	0x40007000
 8004d80:	40023800 	.word	0x40023800
 8004d84:	42470060 	.word	0x42470060

08004d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e0cc      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d9c:	4b68      	ldr	r3, [pc, #416]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d90c      	bls.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004daa:	4b65      	ldr	r3, [pc, #404]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db2:	4b63      	ldr	r3, [pc, #396]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0b8      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d020      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ddc:	4b59      	ldr	r3, [pc, #356]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	4a58      	ldr	r2, [pc, #352]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df4:	4b53      	ldr	r3, [pc, #332]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a52      	ldr	r2, [pc, #328]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e00:	4b50      	ldr	r3, [pc, #320]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	494d      	ldr	r1, [pc, #308]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d044      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d107      	bne.n	8004e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e26:	4b47      	ldr	r3, [pc, #284]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e07f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d003      	beq.n	8004e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e46:	4b3f      	ldr	r3, [pc, #252]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d109      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e06f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e56:	4b3b      	ldr	r3, [pc, #236]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0302 	and.w	r3, r3, #2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e067      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e66:	4b37      	ldr	r3, [pc, #220]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 0203 	bic.w	r2, r3, #3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	4934      	ldr	r1, [pc, #208]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	4313      	orrs	r3, r2
 8004e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e78:	f7fe faae 	bl	80033d8 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	e00a      	b.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e80:	f7fe faaa 	bl	80033d8 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e04f      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 020c 	and.w	r2, r3, #12
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d1eb      	bne.n	8004e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea8:	4b25      	ldr	r3, [pc, #148]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d20c      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb6:	4b22      	ldr	r3, [pc, #136]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b20      	ldr	r3, [pc, #128]	; (8004f40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0307 	and.w	r3, r3, #7
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e032      	b.n	8004f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d008      	beq.n	8004eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004edc:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	4916      	ldr	r1, [pc, #88]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d009      	beq.n	8004f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efa:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	490e      	ldr	r1, [pc, #56]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f0e:	f000 f821 	bl	8004f54 <HAL_RCC_GetSysClockFreq>
 8004f12:	4602      	mov	r2, r0
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	091b      	lsrs	r3, r3, #4
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	490a      	ldr	r1, [pc, #40]	; (8004f48 <HAL_RCC_ClockConfig+0x1c0>)
 8004f20:	5ccb      	ldrb	r3, [r1, r3]
 8004f22:	fa22 f303 	lsr.w	r3, r2, r3
 8004f26:	4a09      	ldr	r2, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1c4>)
 8004f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2a:	4b09      	ldr	r3, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fa0e 	bl	8003350 <HAL_InitTick>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023c00 	.word	0x40023c00
 8004f44:	40023800 	.word	0x40023800
 8004f48:	0800bd38 	.word	0x0800bd38
 8004f4c:	20000100 	.word	0x20000100
 8004f50:	20000104 	.word	0x20000104

08004f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f54:	b5b0      	push	{r4, r5, r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	6079      	str	r1, [r7, #4]
 8004f5e:	2100      	movs	r1, #0
 8004f60:	60f9      	str	r1, [r7, #12]
 8004f62:	2100      	movs	r1, #0
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f66:	2100      	movs	r1, #0
 8004f68:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6a:	4952      	ldr	r1, [pc, #328]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f6c:	6889      	ldr	r1, [r1, #8]
 8004f6e:	f001 010c 	and.w	r1, r1, #12
 8004f72:	2908      	cmp	r1, #8
 8004f74:	d00d      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x3e>
 8004f76:	2908      	cmp	r1, #8
 8004f78:	f200 8094 	bhi.w	80050a4 <HAL_RCC_GetSysClockFreq+0x150>
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d002      	beq.n	8004f86 <HAL_RCC_GetSysClockFreq+0x32>
 8004f80:	2904      	cmp	r1, #4
 8004f82:	d003      	beq.n	8004f8c <HAL_RCC_GetSysClockFreq+0x38>
 8004f84:	e08e      	b.n	80050a4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f86:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x164>)
 8004f88:	60bb      	str	r3, [r7, #8]
       break;
 8004f8a:	e08e      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8c:	4b4b      	ldr	r3, [pc, #300]	; (80050bc <HAL_RCC_GetSysClockFreq+0x168>)
 8004f8e:	60bb      	str	r3, [r7, #8]
      break;
 8004f90:	e08b      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f92:	4948      	ldr	r1, [pc, #288]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f94:	6849      	ldr	r1, [r1, #4]
 8004f96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004f9a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9c:	4945      	ldr	r1, [pc, #276]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004f9e:	6849      	ldr	r1, [r1, #4]
 8004fa0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004fa4:	2900      	cmp	r1, #0
 8004fa6:	d024      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa8:	4942      	ldr	r1, [pc, #264]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004faa:	6849      	ldr	r1, [r1, #4]
 8004fac:	0989      	lsrs	r1, r1, #6
 8004fae:	4608      	mov	r0, r1
 8004fb0:	f04f 0100 	mov.w	r1, #0
 8004fb4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004fb8:	f04f 0500 	mov.w	r5, #0
 8004fbc:	ea00 0204 	and.w	r2, r0, r4
 8004fc0:	ea01 0305 	and.w	r3, r1, r5
 8004fc4:	493d      	ldr	r1, [pc, #244]	; (80050bc <HAL_RCC_GetSysClockFreq+0x168>)
 8004fc6:	fb01 f003 	mul.w	r0, r1, r3
 8004fca:	2100      	movs	r1, #0
 8004fcc:	fb01 f102 	mul.w	r1, r1, r2
 8004fd0:	1844      	adds	r4, r0, r1
 8004fd2:	493a      	ldr	r1, [pc, #232]	; (80050bc <HAL_RCC_GetSysClockFreq+0x168>)
 8004fd4:	fba2 0101 	umull	r0, r1, r2, r1
 8004fd8:	1863      	adds	r3, r4, r1
 8004fda:	4619      	mov	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	f7fb fe38 	bl	8000c58 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
 8004ff0:	e04a      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff2:	4b30      	ldr	r3, [pc, #192]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	ea02 0400 	and.w	r4, r2, r0
 800500a:	ea03 0501 	and.w	r5, r3, r1
 800500e:	4620      	mov	r0, r4
 8005010:	4629      	mov	r1, r5
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	014b      	lsls	r3, r1, #5
 800501c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005020:	0142      	lsls	r2, r0, #5
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	1b00      	subs	r0, r0, r4
 8005028:	eb61 0105 	sbc.w	r1, r1, r5
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	018b      	lsls	r3, r1, #6
 8005036:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800503a:	0182      	lsls	r2, r0, #6
 800503c:	1a12      	subs	r2, r2, r0
 800503e:	eb63 0301 	sbc.w	r3, r3, r1
 8005042:	f04f 0000 	mov.w	r0, #0
 8005046:	f04f 0100 	mov.w	r1, #0
 800504a:	00d9      	lsls	r1, r3, #3
 800504c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005050:	00d0      	lsls	r0, r2, #3
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	1912      	adds	r2, r2, r4
 8005058:	eb45 0303 	adc.w	r3, r5, r3
 800505c:	f04f 0000 	mov.w	r0, #0
 8005060:	f04f 0100 	mov.w	r1, #0
 8005064:	0299      	lsls	r1, r3, #10
 8005066:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800506a:	0290      	lsls	r0, r2, #10
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4610      	mov	r0, r2
 8005072:	4619      	mov	r1, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	461a      	mov	r2, r3
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	f7fb fdec 	bl	8000c58 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4613      	mov	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <HAL_RCC_GetSysClockFreq+0x160>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	0c1b      	lsrs	r3, r3, #16
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	3301      	adds	r3, #1
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a0:	60bb      	str	r3, [r7, #8]
      break;
 80050a2:	e002      	b.n	80050aa <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050a4:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <HAL_RCC_GetSysClockFreq+0x164>)
 80050a6:	60bb      	str	r3, [r7, #8]
      break;
 80050a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050aa:	68bb      	ldr	r3, [r7, #8]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bdb0      	pop	{r4, r5, r7, pc}
 80050b4:	40023800 	.word	0x40023800
 80050b8:	00f42400 	.word	0x00f42400
 80050bc:	017d7840 	.word	0x017d7840

080050c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e07b      	b.n	80051ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d009      	beq.n	80050f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e005      	b.n	80050f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fd fe5e 	bl	8002dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005140:	431a      	orrs	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	431a      	orrs	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	ea42 0103 	orr.w	r1, r2, r3
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	0c1b      	lsrs	r3, r3, #16
 8005196:	f003 0104 	and.w	r1, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	f003 0210 	and.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	60f8      	str	r0, [r7, #12]
 80051da:	60b9      	str	r1, [r7, #8]
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	4613      	mov	r3, r2
 80051e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d101      	bne.n	80051f4 <HAL_SPI_Transmit+0x22>
 80051f0:	2302      	movs	r3, #2
 80051f2:	e126      	b.n	8005442 <HAL_SPI_Transmit+0x270>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051fc:	f7fe f8ec 	bl	80033d8 <HAL_GetTick>
 8005200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b01      	cmp	r3, #1
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005212:	2302      	movs	r3, #2
 8005214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005216:	e10b      	b.n	8005430 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <HAL_SPI_Transmit+0x52>
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005228:	e102      	b.n	8005430 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	88fa      	ldrh	r2, [r7, #6]
 8005242:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	88fa      	ldrh	r2, [r7, #6]
 8005248:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005270:	d10f      	bne.n	8005292 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b40      	cmp	r3, #64	; 0x40
 800529e:	d007      	beq.n	80052b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b8:	d14b      	bne.n	8005352 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d002      	beq.n	80052c8 <HAL_SPI_Transmit+0xf6>
 80052c2:	8afb      	ldrh	r3, [r7, #22]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d13e      	bne.n	8005346 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052cc:	881a      	ldrh	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d8:	1c9a      	adds	r2, r3, #2
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052ec:	e02b      	b.n	8005346 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d112      	bne.n	8005322 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	881a      	ldrh	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	1c9a      	adds	r2, r3, #2
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29a      	uxth	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005320:	e011      	b.n	8005346 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005322:	f7fe f859 	bl	80033d8 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d803      	bhi.n	800533a <HAL_SPI_Transmit+0x168>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005338:	d102      	bne.n	8005340 <HAL_SPI_Transmit+0x16e>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005344:	e074      	b.n	8005430 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d1ce      	bne.n	80052ee <HAL_SPI_Transmit+0x11c>
 8005350:	e04c      	b.n	80053ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_SPI_Transmit+0x18e>
 800535a:	8afb      	ldrh	r3, [r7, #22]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d140      	bne.n	80053e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	330c      	adds	r3, #12
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005386:	e02c      	b.n	80053e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	f003 0302 	and.w	r3, r3, #2
 8005392:	2b02      	cmp	r3, #2
 8005394:	d113      	bne.n	80053be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	330c      	adds	r3, #12
 80053a0:	7812      	ldrb	r2, [r2, #0]
 80053a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80053bc:	e011      	b.n	80053e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053be:	f7fe f80b 	bl	80033d8 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d803      	bhi.n	80053d6 <HAL_SPI_Transmit+0x204>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d102      	bne.n	80053dc <HAL_SPI_Transmit+0x20a>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80053e0:	e026      	b.n	8005430 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1cd      	bne.n	8005388 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f000 f9ff 	bl	80057f4 <SPI_EndRxTxTransaction>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d002      	beq.n	8005402 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800540a:	2300      	movs	r3, #0
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	613b      	str	r3, [r7, #16]
 800541e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	77fb      	strb	r3, [r7, #31]
 800542c:	e000      	b.n	8005430 <HAL_SPI_Transmit+0x25e>
  }

error:
 800542e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005440:	7ffb      	ldrb	r3, [r7, #31]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3720      	adds	r7, #32
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b086      	sub	sp, #24
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_SPI_Transmit_DMA+0x20>
 8005468:	2302      	movs	r3, #2
 800546a:	e09b      	b.n	80055a4 <HAL_SPI_Transmit_DMA+0x158>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d002      	beq.n	8005486 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005480:	2302      	movs	r3, #2
 8005482:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005484:	e089      	b.n	800559a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d002      	beq.n	8005492 <HAL_SPI_Transmit_DMA+0x46>
 800548c:	88fb      	ldrh	r3, [r7, #6]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d102      	bne.n	8005498 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005496:	e080      	b.n	800559a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2203      	movs	r2, #3
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	88fa      	ldrh	r2, [r7, #6]
 80054b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	88fa      	ldrh	r2, [r7, #6]
 80054b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054de:	d10f      	bne.n	8005500 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005504:	4a29      	ldr	r2, [pc, #164]	; (80055ac <HAL_SPI_Transmit_DMA+0x160>)
 8005506:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550c:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <HAL_SPI_Transmit_DMA+0x164>)
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005514:	4a27      	ldr	r2, [pc, #156]	; (80055b4 <HAL_SPI_Transmit_DMA+0x168>)
 8005516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800551c:	2200      	movs	r2, #0
 800551e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005528:	4619      	mov	r1, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	330c      	adds	r3, #12
 8005530:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005536:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005538:	f7fe fd36 	bl	8003fa8 <HAL_DMA_Start_IT>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00c      	beq.n	800555c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005546:	f043 0210 	orr.w	r2, r3, #16
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800555a:	e01e      	b.n	800559a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d007      	beq.n	800557a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f042 0220 	orr.w	r2, r2, #32
 8005588:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0202 	orr.w	r2, r2, #2
 8005598:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	08005689 	.word	0x08005689
 80055b0:	080055e1 	.word	0x080055e1
 80055b4:	080056a5 	.word	0x080056a5

080055b8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ec:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ee:	f7fd fef3 	bl	80033d8 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005602:	d03b      	beq.n	800567c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0220 	bic.w	r2, r2, #32
 8005612:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0202 	bic.w	r2, r2, #2
 8005622:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	2164      	movs	r1, #100	; 0x64
 8005628:	6978      	ldr	r0, [r7, #20]
 800562a:	f000 f8e3 	bl	80057f4 <SPI_EndRxTxTransaction>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	f043 0220 	orr.w	r2, r3, #32
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10a      	bne.n	800565e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60fb      	str	r3, [r7, #12]
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005674:	6978      	ldr	r0, [r7, #20]
 8005676:	f7ff ffa9 	bl	80055cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800567a:	e002      	b.n	8005682 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800567c:	6978      	ldr	r0, [r7, #20]
 800567e:	f7fb fe85 	bl	800138c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff ff8e 	bl	80055b8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800569c:	bf00      	nop
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0203 	bic.w	r2, r2, #3
 80056c0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c6:	f043 0210 	orr.w	r2, r3, #16
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff ff78 	bl	80055cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80056dc:	bf00      	nop
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056f4:	f7fd fe70 	bl	80033d8 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	4413      	add	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005704:	f7fd fe68 	bl	80033d8 <HAL_GetTick>
 8005708:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800570a:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	015b      	lsls	r3, r3, #5
 8005710:	0d1b      	lsrs	r3, r3, #20
 8005712:	69fa      	ldr	r2, [r7, #28]
 8005714:	fb02 f303 	mul.w	r3, r2, r3
 8005718:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800571a:	e054      	b.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d050      	beq.n	80057c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005724:	f7fd fe58 	bl	80033d8 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	429a      	cmp	r2, r3
 8005732:	d902      	bls.n	800573a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d13d      	bne.n	80057b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005748:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005752:	d111      	bne.n	8005778 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800575c:	d004      	beq.n	8005768 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005766:	d107      	bne.n	8005778 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005776:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005780:	d10f      	bne.n	80057a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057b2:	2303      	movs	r3, #3
 80057b4:	e017      	b.n	80057e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057bc:	2300      	movs	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3b01      	subs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d19b      	bne.n	800571c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3720      	adds	r7, #32
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	20000100 	.word	0x20000100

080057f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b088      	sub	sp, #32
 80057f8:	af02      	add	r7, sp, #8
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <SPI_EndRxTxTransaction+0x7c>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <SPI_EndRxTxTransaction+0x80>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	0d5b      	lsrs	r3, r3, #21
 800580c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005810:	fb02 f303 	mul.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581e:	d112      	bne.n	8005846 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2200      	movs	r2, #0
 8005828:	2180      	movs	r1, #128	; 0x80
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ff5a 	bl	80056e4 <SPI_WaitFlagStateUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d016      	beq.n	8005864 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e00f      	b.n	8005866 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	3b01      	subs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	d0f2      	beq.n	8005846 <SPI_EndRxTxTransaction+0x52>
 8005860:	e000      	b.n	8005864 <SPI_EndRxTxTransaction+0x70>
        break;
 8005862:	bf00      	nop
  }

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000100 	.word	0x20000100
 8005874:	165e9f81 	.word	0x165e9f81

08005878 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e041      	b.n	800590e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d106      	bne.n	80058a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f7fd fb60 	bl	8002f64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f000 fd9e 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
	...

08005918 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b01      	cmp	r3, #1
 800592a:	d001      	beq.n	8005930 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e044      	b.n	80059ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2202      	movs	r2, #2
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68da      	ldr	r2, [r3, #12]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f042 0201 	orr.w	r2, r2, #1
 8005946:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1e      	ldr	r2, [pc, #120]	; (80059c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d018      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800595a:	d013      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a1a      	ldr	r2, [pc, #104]	; (80059cc <HAL_TIM_Base_Start_IT+0xb4>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00e      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a19      	ldr	r2, [pc, #100]	; (80059d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d009      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <HAL_TIM_Base_Start_IT+0x6c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a16      	ldr	r2, [pc, #88]	; (80059d8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d111      	bne.n	80059a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d010      	beq.n	80059b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f042 0201 	orr.w	r2, r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a6:	e007      	b.n	80059b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f042 0201 	orr.w	r2, r2, #1
 80059b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000
 80059cc:	40000400 	.word	0x40000400
 80059d0:	40000800 	.word	0x40000800
 80059d4:	40000c00 	.word	0x40000c00
 80059d8:	40014000 	.word	0x40014000

080059dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e041      	b.n	8005a72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f839 	bl	8005a7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3304      	adds	r3, #4
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4610      	mov	r0, r2
 8005a1c:	f000 fcec 	bl	80063f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a82:	bf00      	nop
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d109      	bne.n	8005ab4 <HAL_TIM_PWM_Start+0x24>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf14      	ite	ne
 8005aac:	2301      	movne	r3, #1
 8005aae:	2300      	moveq	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	e022      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d109      	bne.n	8005ace <HAL_TIM_PWM_Start+0x3e>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	bf14      	ite	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	2300      	moveq	r3, #0
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	e015      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d109      	bne.n	8005ae8 <HAL_TIM_PWM_Start+0x58>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	bf14      	ite	ne
 8005ae0:	2301      	movne	r3, #1
 8005ae2:	2300      	moveq	r3, #0
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	e008      	b.n	8005afa <HAL_TIM_PWM_Start+0x6a>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	bf14      	ite	ne
 8005af4:	2301      	movne	r3, #1
 8005af6:	2300      	moveq	r3, #0
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e068      	b.n	8005bd4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0x82>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b10:	e013      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b04      	cmp	r3, #4
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_PWM_Start+0x92>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b20:	e00b      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_PWM_Start+0xa2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b30:	e003      	b.n	8005b3a <HAL_TIM_PWM_Start+0xaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fefe 	bl	8006944 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a23      	ldr	r2, [pc, #140]	; (8005bdc <HAL_TIM_PWM_Start+0x14c>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1d      	ldr	r2, [pc, #116]	; (8005bdc <HAL_TIM_PWM_Start+0x14c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d013      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_TIM_PWM_Start+0x150>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_TIM_PWM_Start+0x154>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIM_PWM_Start+0x158>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIM_PWM_Start+0x10e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <HAL_TIM_PWM_Start+0x15c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d010      	beq.n	8005bd2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc0:	e007      	b.n	8005bd2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f042 0201 	orr.w	r2, r2, #1
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	40010000 	.word	0x40010000
 8005be0:	40000400 	.word	0x40000400
 8005be4:	40000800 	.word	0x40000800
 8005be8:	40000c00 	.word	0x40000c00
 8005bec:	40014000 	.word	0x40014000

08005bf0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e097      	b.n	8005d34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fd f955 	bl	8002ec8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6812      	ldr	r2, [r2, #0]
 8005c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c34:	f023 0307 	bic.w	r3, r3, #7
 8005c38:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	3304      	adds	r3, #4
 8005c42:	4619      	mov	r1, r3
 8005c44:	4610      	mov	r0, r2
 8005c46:	f000 fbd7 	bl	80063f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	4313      	orrs	r3, r2
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c90:	f023 030c 	bic.w	r3, r3, #12
 8005c94:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68da      	ldr	r2, [r3, #12]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	4313      	orrs	r3, r2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	011a      	lsls	r2, r3, #4
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	031b      	lsls	r3, r3, #12
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005cd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d110      	bne.n	8005d8e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d102      	bne.n	8005d78 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d72:	7b7b      	ldrb	r3, [r7, #13]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d001      	beq.n	8005d7c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e089      	b.n	8005e90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8c:	e031      	b.n	8005df2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d110      	bne.n	8005db6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d102      	bne.n	8005da0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005d9a:	7b3b      	ldrb	r3, [r7, #12]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d001      	beq.n	8005da4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e075      	b.n	8005e90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db4:	e01d      	b.n	8005df2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d108      	bne.n	8005dce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d105      	bne.n	8005dce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005dc2:	7b7b      	ldrb	r3, [r7, #13]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d102      	bne.n	8005dce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dc8:	7b3b      	ldrb	r3, [r7, #12]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d001      	beq.n	8005dd2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e05e      	b.n	8005e90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2202      	movs	r2, #2
 8005dee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d003      	beq.n	8005e00 <HAL_TIM_Encoder_Start_IT+0xc4>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d010      	beq.n	8005e20 <HAL_TIM_Encoder_Start_IT+0xe4>
 8005dfe:	e01f      	b.n	8005e40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2201      	movs	r2, #1
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fd9b 	bl	8006944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0202 	orr.w	r2, r2, #2
 8005e1c:	60da      	str	r2, [r3, #12]
      break;
 8005e1e:	e02e      	b.n	8005e7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2201      	movs	r2, #1
 8005e26:	2104      	movs	r1, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 fd8b 	bl	8006944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0204 	orr.w	r2, r2, #4
 8005e3c:	60da      	str	r2, [r3, #12]
      break;
 8005e3e:	e01e      	b.n	8005e7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2201      	movs	r2, #1
 8005e46:	2100      	movs	r1, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fd7b 	bl	8006944 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2201      	movs	r2, #1
 8005e54:	2104      	movs	r1, #4
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fd74 	bl	8006944 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0202 	orr.w	r2, r2, #2
 8005e6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0204 	orr.w	r2, r2, #4
 8005e7a:	60da      	str	r2, [r3, #12]
      break;
 8005e7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0202 	mvn.w	r2, #2
 8005ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb fec8 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa69 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa70 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0304 	and.w	r3, r3, #4
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0204 	mvn.w	r2, #4
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f7fb fe9e 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa3f 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fa46 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d122      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d11b      	bne.n	8005f9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0208 	mvn.w	r2, #8
 8005f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2204      	movs	r2, #4
 8005f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	f003 0303 	and.w	r3, r3, #3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb fe74 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005f88:	e005      	b.n	8005f96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fa15 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 fa1c 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	2b10      	cmp	r3, #16
 8005fa8:	d122      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d11b      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f06f 0210 	mvn.w	r2, #16
 8005fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2208      	movs	r2, #8
 8005fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb fe4a 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
 8005fdc:	e005      	b.n	8005fea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f9eb 	bl	80063ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f9f2 	bl	80063ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b01      	cmp	r3, #1
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0201 	mvn.w	r2, #1
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7fb fe86 	bl	8001d28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006026:	2b80      	cmp	r3, #128	; 0x80
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006034:	2b80      	cmp	r3, #128	; 0x80
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fd1c 	bl	8006a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	691b      	ldr	r3, [r3, #16]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d10e      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006060:	2b40      	cmp	r3, #64	; 0x40
 8006062:	d107      	bne.n	8006074 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800606c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f9b7 	bl	80063e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b20      	cmp	r3, #32
 8006080:	d10e      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d107      	bne.n	80060a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0220 	mvn.w	r2, #32
 8006098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fce6 	bl	8006a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0ae      	b.n	8006224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2b0c      	cmp	r3, #12
 80060d2:	f200 809f 	bhi.w	8006214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80060d6:	a201      	add	r2, pc, #4	; (adr r2, 80060dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	08006111 	.word	0x08006111
 80060e0:	08006215 	.word	0x08006215
 80060e4:	08006215 	.word	0x08006215
 80060e8:	08006215 	.word	0x08006215
 80060ec:	08006151 	.word	0x08006151
 80060f0:	08006215 	.word	0x08006215
 80060f4:	08006215 	.word	0x08006215
 80060f8:	08006215 	.word	0x08006215
 80060fc:	08006193 	.word	0x08006193
 8006100:	08006215 	.word	0x08006215
 8006104:	08006215 	.word	0x08006215
 8006108:	08006215 	.word	0x08006215
 800610c:	080061d3 	.word	0x080061d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	4618      	mov	r0, r3
 8006118:	f000 f9ee 	bl	80064f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699a      	ldr	r2, [r3, #24]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0208 	orr.w	r2, r2, #8
 800612a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0204 	bic.w	r2, r2, #4
 800613a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6999      	ldr	r1, [r3, #24]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	619a      	str	r2, [r3, #24]
      break;
 800614e:	e064      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fa34 	bl	80065c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	699a      	ldr	r2, [r3, #24]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6999      	ldr	r1, [r3, #24]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	021a      	lsls	r2, r3, #8
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	619a      	str	r2, [r3, #24]
      break;
 8006190:	e043      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	4618      	mov	r0, r3
 800619a:	f000 fa7f 	bl	800669c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0208 	orr.w	r2, r2, #8
 80061ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69da      	ldr	r2, [r3, #28]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0204 	bic.w	r2, r2, #4
 80061bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69d9      	ldr	r1, [r3, #28]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	61da      	str	r2, [r3, #28]
      break;
 80061d0:	e023      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 fac9 	bl	8006770 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69da      	ldr	r2, [r3, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69d9      	ldr	r1, [r3, #28]
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	021a      	lsls	r2, r3, #8
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	430a      	orrs	r2, r1
 8006210:	61da      	str	r2, [r3, #28]
      break;
 8006212:	e002      	b.n	800621a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	75fb      	strb	r3, [r7, #23]
      break;
 8006218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006222:	7dfb      	ldrb	r3, [r7, #23]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006236:	2300      	movs	r3, #0
 8006238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_TIM_ConfigClockSource+0x1c>
 8006244:	2302      	movs	r3, #2
 8006246:	e0b4      	b.n	80063b2 <HAL_TIM_ConfigClockSource+0x186>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800626e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006280:	d03e      	beq.n	8006300 <HAL_TIM_ConfigClockSource+0xd4>
 8006282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006286:	f200 8087 	bhi.w	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	f000 8086 	beq.w	800639e <HAL_TIM_ConfigClockSource+0x172>
 8006292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006296:	d87f      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 8006298:	2b70      	cmp	r3, #112	; 0x70
 800629a:	d01a      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0xa6>
 800629c:	2b70      	cmp	r3, #112	; 0x70
 800629e:	d87b      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062a0:	2b60      	cmp	r3, #96	; 0x60
 80062a2:	d050      	beq.n	8006346 <HAL_TIM_ConfigClockSource+0x11a>
 80062a4:	2b60      	cmp	r3, #96	; 0x60
 80062a6:	d877      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062a8:	2b50      	cmp	r3, #80	; 0x50
 80062aa:	d03c      	beq.n	8006326 <HAL_TIM_ConfigClockSource+0xfa>
 80062ac:	2b50      	cmp	r3, #80	; 0x50
 80062ae:	d873      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062b0:	2b40      	cmp	r3, #64	; 0x40
 80062b2:	d058      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x13a>
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d86f      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d064      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d86b      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d060      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062c4:	2b20      	cmp	r3, #32
 80062c6:	d867      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d05c      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d05a      	beq.n	8006386 <HAL_TIM_ConfigClockSource+0x15a>
 80062d0:	e062      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6899      	ldr	r1, [r3, #8]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f000 fb0f 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	609a      	str	r2, [r3, #8]
      break;
 80062fe:	e04f      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	6899      	ldr	r1, [r3, #8]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f000 faf8 	bl	8006904 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006322:	609a      	str	r2, [r3, #8]
      break;
 8006324:	e03c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6859      	ldr	r1, [r3, #4]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f000 fa6c 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2150      	movs	r1, #80	; 0x50
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fac5 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006344:	e02c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6818      	ldr	r0, [r3, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6859      	ldr	r1, [r3, #4]
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	461a      	mov	r2, r3
 8006354:	f000 fa8b 	bl	800686e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2160      	movs	r1, #96	; 0x60
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fab5 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006364:	e01c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	6859      	ldr	r1, [r3, #4]
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	461a      	mov	r2, r3
 8006374:	f000 fa4c 	bl	8006810 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2140      	movs	r1, #64	; 0x40
 800637e:	4618      	mov	r0, r3
 8006380:	f000 faa5 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006384:	e00c      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4619      	mov	r1, r3
 8006390:	4610      	mov	r0, r2
 8006392:	f000 fa9c 	bl	80068ce <TIM_ITRx_SetConfig>
      break;
 8006396:	e003      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	e000      	b.n	80063a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800639e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063c2:	bf00      	nop
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ea:	bf00      	nop
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a34      	ldr	r2, [pc, #208]	; (80064dc <TIM_Base_SetConfig+0xe4>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d00f      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d00b      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a31      	ldr	r2, [pc, #196]	; (80064e0 <TIM_Base_SetConfig+0xe8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d007      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <TIM_Base_SetConfig+0xec>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_Base_SetConfig+0x38>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a2f      	ldr	r2, [pc, #188]	; (80064e8 <TIM_Base_SetConfig+0xf0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d108      	bne.n	8006442 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006436:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a25      	ldr	r2, [pc, #148]	; (80064dc <TIM_Base_SetConfig+0xe4>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01b      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006450:	d017      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a22      	ldr	r2, [pc, #136]	; (80064e0 <TIM_Base_SetConfig+0xe8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d013      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <TIM_Base_SetConfig+0xec>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d00f      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a20      	ldr	r2, [pc, #128]	; (80064e8 <TIM_Base_SetConfig+0xf0>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00b      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a1f      	ldr	r2, [pc, #124]	; (80064ec <TIM_Base_SetConfig+0xf4>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d007      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a1e      	ldr	r2, [pc, #120]	; (80064f0 <TIM_Base_SetConfig+0xf8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d003      	beq.n	8006482 <TIM_Base_SetConfig+0x8a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <TIM_Base_SetConfig+0xfc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d108      	bne.n	8006494 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a08      	ldr	r2, [pc, #32]	; (80064dc <TIM_Base_SetConfig+0xe4>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d103      	bne.n	80064c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	691a      	ldr	r2, [r3, #16]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	615a      	str	r2, [r3, #20]
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40014400 	.word	0x40014400
 80064f4:	40014800 	.word	0x40014800

080064f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f023 0201 	bic.w	r2, r3, #1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f023 0302 	bic.w	r3, r3, #2
 8006540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4313      	orrs	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <TIM_OC1_SetConfig+0xc8>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d10c      	bne.n	800656e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f023 0308 	bic.w	r3, r3, #8
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	4313      	orrs	r3, r2
 8006564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 0304 	bic.w	r3, r3, #4
 800656c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a13      	ldr	r2, [pc, #76]	; (80065c0 <TIM_OC1_SetConfig+0xc8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d111      	bne.n	800659a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800657c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	699b      	ldr	r3, [r3, #24]
 8006594:	693a      	ldr	r2, [r7, #16]
 8006596:	4313      	orrs	r3, r2
 8006598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	621a      	str	r2, [r3, #32]
}
 80065b4:	bf00      	nop
 80065b6:	371c      	adds	r7, #28
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	40010000 	.word	0x40010000

080065c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	f023 0210 	bic.w	r2, r3, #16
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0320 	bic.w	r3, r3, #32
 800660e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <TIM_OC2_SetConfig+0xd4>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d10d      	bne.n	8006640 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a15      	ldr	r2, [pc, #84]	; (8006698 <TIM_OC2_SetConfig+0xd4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d113      	bne.n	8006670 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800664e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	4313      	orrs	r3, r2
 8006662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	4313      	orrs	r3, r2
 800666e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685a      	ldr	r2, [r3, #4]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	621a      	str	r2, [r3, #32]
}
 800668a:	bf00      	nop
 800668c:	371c      	adds	r7, #28
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40010000 	.word	0x40010000

0800669c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a1b      	ldr	r3, [r3, #32]
 80066b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	69db      	ldr	r3, [r3, #28]
 80066c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0303 	bic.w	r3, r3, #3
 80066d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	021b      	lsls	r3, r3, #8
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1d      	ldr	r2, [pc, #116]	; (800676c <TIM_OC3_SetConfig+0xd0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10d      	bne.n	8006716 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a14      	ldr	r2, [pc, #80]	; (800676c <TIM_OC3_SetConfig+0xd0>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d113      	bne.n	8006746 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	621a      	str	r2, [r3, #32]
}
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40010000 	.word	0x40010000

08006770 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	69db      	ldr	r3, [r3, #28]
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800679e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	021b      	lsls	r3, r3, #8
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	031b      	lsls	r3, r3, #12
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a10      	ldr	r2, [pc, #64]	; (800680c <TIM_OC4_SetConfig+0x9c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d109      	bne.n	80067e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	019b      	lsls	r3, r3, #6
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000

08006810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 030a 	bic.w	r3, r3, #10
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0210 	bic.w	r2, r3, #16
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	697a      	ldr	r2, [r7, #20]
 80068ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f043 0307 	orr.w	r3, r3, #7
 80068f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	609a      	str	r2, [r3, #8]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800691e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	021a      	lsls	r2, r3, #8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4313      	orrs	r3, r2
 800692c:	697a      	ldr	r2, [r7, #20]
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	609a      	str	r2, [r3, #8]
}
 8006938:	bf00      	nop
 800693a:	371c      	adds	r7, #28
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006944:	b480      	push	{r7}
 8006946:	b087      	sub	sp, #28
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	f003 031f 	and.w	r3, r3, #31
 8006956:	2201      	movs	r2, #1
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a1a      	ldr	r2, [r3, #32]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f003 031f 	and.w	r3, r3, #31
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	fa01 f303 	lsl.w	r3, r1, r3
 800697c:	431a      	orrs	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
	...

08006990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d101      	bne.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a4:	2302      	movs	r3, #2
 80069a6:	e050      	b.n	8006a4a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1c      	ldr	r2, [pc, #112]	; (8006a58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d018      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f4:	d013      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d00e      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d009      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a15      	ldr	r2, [pc, #84]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d004      	beq.n	8006a1e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a13      	ldr	r2, [pc, #76]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d10c      	bne.n	8006a38 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40014000 	.word	0x40014000

08006a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <__errno>:
 8006a94:	4b01      	ldr	r3, [pc, #4]	; (8006a9c <__errno+0x8>)
 8006a96:	6818      	ldr	r0, [r3, #0]
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	2000010c 	.word	0x2000010c

08006aa0 <__libc_init_array>:
 8006aa0:	b570      	push	{r4, r5, r6, lr}
 8006aa2:	4d0d      	ldr	r5, [pc, #52]	; (8006ad8 <__libc_init_array+0x38>)
 8006aa4:	4c0d      	ldr	r4, [pc, #52]	; (8006adc <__libc_init_array+0x3c>)
 8006aa6:	1b64      	subs	r4, r4, r5
 8006aa8:	10a4      	asrs	r4, r4, #2
 8006aaa:	2600      	movs	r6, #0
 8006aac:	42a6      	cmp	r6, r4
 8006aae:	d109      	bne.n	8006ac4 <__libc_init_array+0x24>
 8006ab0:	4d0b      	ldr	r5, [pc, #44]	; (8006ae0 <__libc_init_array+0x40>)
 8006ab2:	4c0c      	ldr	r4, [pc, #48]	; (8006ae4 <__libc_init_array+0x44>)
 8006ab4:	f004 f872 	bl	800ab9c <_init>
 8006ab8:	1b64      	subs	r4, r4, r5
 8006aba:	10a4      	asrs	r4, r4, #2
 8006abc:	2600      	movs	r6, #0
 8006abe:	42a6      	cmp	r6, r4
 8006ac0:	d105      	bne.n	8006ace <__libc_init_array+0x2e>
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}
 8006ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ac8:	4798      	blx	r3
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7ee      	b.n	8006aac <__libc_init_array+0xc>
 8006ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ad2:	4798      	blx	r3
 8006ad4:	3601      	adds	r6, #1
 8006ad6:	e7f2      	b.n	8006abe <__libc_init_array+0x1e>
 8006ad8:	0800c180 	.word	0x0800c180
 8006adc:	0800c180 	.word	0x0800c180
 8006ae0:	0800c180 	.word	0x0800c180
 8006ae4:	0800c184 	.word	0x0800c184

08006ae8 <memset>:
 8006ae8:	4402      	add	r2, r0
 8006aea:	4603      	mov	r3, r0
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d100      	bne.n	8006af2 <memset+0xa>
 8006af0:	4770      	bx	lr
 8006af2:	f803 1b01 	strb.w	r1, [r3], #1
 8006af6:	e7f9      	b.n	8006aec <memset+0x4>

08006af8 <__cvt>:
 8006af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	ec55 4b10 	vmov	r4, r5, d0
 8006b00:	2d00      	cmp	r5, #0
 8006b02:	460e      	mov	r6, r1
 8006b04:	4619      	mov	r1, r3
 8006b06:	462b      	mov	r3, r5
 8006b08:	bfbb      	ittet	lt
 8006b0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b0e:	461d      	movlt	r5, r3
 8006b10:	2300      	movge	r3, #0
 8006b12:	232d      	movlt	r3, #45	; 0x2d
 8006b14:	700b      	strb	r3, [r1, #0]
 8006b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b1c:	4691      	mov	r9, r2
 8006b1e:	f023 0820 	bic.w	r8, r3, #32
 8006b22:	bfbc      	itt	lt
 8006b24:	4622      	movlt	r2, r4
 8006b26:	4614      	movlt	r4, r2
 8006b28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b2c:	d005      	beq.n	8006b3a <__cvt+0x42>
 8006b2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b32:	d100      	bne.n	8006b36 <__cvt+0x3e>
 8006b34:	3601      	adds	r6, #1
 8006b36:	2102      	movs	r1, #2
 8006b38:	e000      	b.n	8006b3c <__cvt+0x44>
 8006b3a:	2103      	movs	r1, #3
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	ab02      	add	r3, sp, #8
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	ec45 4b10 	vmov	d0, r4, r5
 8006b48:	4653      	mov	r3, sl
 8006b4a:	4632      	mov	r2, r6
 8006b4c:	f000 fcec 	bl	8007528 <_dtoa_r>
 8006b50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b54:	4607      	mov	r7, r0
 8006b56:	d102      	bne.n	8006b5e <__cvt+0x66>
 8006b58:	f019 0f01 	tst.w	r9, #1
 8006b5c:	d022      	beq.n	8006ba4 <__cvt+0xac>
 8006b5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b62:	eb07 0906 	add.w	r9, r7, r6
 8006b66:	d110      	bne.n	8006b8a <__cvt+0x92>
 8006b68:	783b      	ldrb	r3, [r7, #0]
 8006b6a:	2b30      	cmp	r3, #48	; 0x30
 8006b6c:	d10a      	bne.n	8006b84 <__cvt+0x8c>
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2300      	movs	r3, #0
 8006b72:	4620      	mov	r0, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	f7f9 ffaf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b7a:	b918      	cbnz	r0, 8006b84 <__cvt+0x8c>
 8006b7c:	f1c6 0601 	rsb	r6, r6, #1
 8006b80:	f8ca 6000 	str.w	r6, [sl]
 8006b84:	f8da 3000 	ldr.w	r3, [sl]
 8006b88:	4499      	add	r9, r3
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4620      	mov	r0, r4
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7f9 ffa1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b96:	b108      	cbz	r0, 8006b9c <__cvt+0xa4>
 8006b98:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b9c:	2230      	movs	r2, #48	; 0x30
 8006b9e:	9b03      	ldr	r3, [sp, #12]
 8006ba0:	454b      	cmp	r3, r9
 8006ba2:	d307      	bcc.n	8006bb4 <__cvt+0xbc>
 8006ba4:	9b03      	ldr	r3, [sp, #12]
 8006ba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ba8:	1bdb      	subs	r3, r3, r7
 8006baa:	4638      	mov	r0, r7
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	b004      	add	sp, #16
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	1c59      	adds	r1, r3, #1
 8006bb6:	9103      	str	r1, [sp, #12]
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	e7f0      	b.n	8006b9e <__cvt+0xa6>

08006bbc <__exponent>:
 8006bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	bfb8      	it	lt
 8006bc4:	4249      	neglt	r1, r1
 8006bc6:	f803 2b02 	strb.w	r2, [r3], #2
 8006bca:	bfb4      	ite	lt
 8006bcc:	222d      	movlt	r2, #45	; 0x2d
 8006bce:	222b      	movge	r2, #43	; 0x2b
 8006bd0:	2909      	cmp	r1, #9
 8006bd2:	7042      	strb	r2, [r0, #1]
 8006bd4:	dd2a      	ble.n	8006c2c <__exponent+0x70>
 8006bd6:	f10d 0407 	add.w	r4, sp, #7
 8006bda:	46a4      	mov	ip, r4
 8006bdc:	270a      	movs	r7, #10
 8006bde:	46a6      	mov	lr, r4
 8006be0:	460a      	mov	r2, r1
 8006be2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006be6:	fb07 1516 	mls	r5, r7, r6, r1
 8006bea:	3530      	adds	r5, #48	; 0x30
 8006bec:	2a63      	cmp	r2, #99	; 0x63
 8006bee:	f104 34ff 	add.w	r4, r4, #4294967295
 8006bf2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	dcf1      	bgt.n	8006bde <__exponent+0x22>
 8006bfa:	3130      	adds	r1, #48	; 0x30
 8006bfc:	f1ae 0502 	sub.w	r5, lr, #2
 8006c00:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c04:	1c44      	adds	r4, r0, #1
 8006c06:	4629      	mov	r1, r5
 8006c08:	4561      	cmp	r1, ip
 8006c0a:	d30a      	bcc.n	8006c22 <__exponent+0x66>
 8006c0c:	f10d 0209 	add.w	r2, sp, #9
 8006c10:	eba2 020e 	sub.w	r2, r2, lr
 8006c14:	4565      	cmp	r5, ip
 8006c16:	bf88      	it	hi
 8006c18:	2200      	movhi	r2, #0
 8006c1a:	4413      	add	r3, r2
 8006c1c:	1a18      	subs	r0, r3, r0
 8006c1e:	b003      	add	sp, #12
 8006c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c26:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c2a:	e7ed      	b.n	8006c08 <__exponent+0x4c>
 8006c2c:	2330      	movs	r3, #48	; 0x30
 8006c2e:	3130      	adds	r1, #48	; 0x30
 8006c30:	7083      	strb	r3, [r0, #2]
 8006c32:	70c1      	strb	r1, [r0, #3]
 8006c34:	1d03      	adds	r3, r0, #4
 8006c36:	e7f1      	b.n	8006c1c <__exponent+0x60>

08006c38 <_printf_float>:
 8006c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3c:	ed2d 8b02 	vpush	{d8}
 8006c40:	b08d      	sub	sp, #52	; 0x34
 8006c42:	460c      	mov	r4, r1
 8006c44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c48:	4616      	mov	r6, r2
 8006c4a:	461f      	mov	r7, r3
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	f001 fa57 	bl	8008100 <_localeconv_r>
 8006c52:	f8d0 a000 	ldr.w	sl, [r0]
 8006c56:	4650      	mov	r0, sl
 8006c58:	f7f9 fac2 	bl	80001e0 <strlen>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	f8d8 3000 	ldr.w	r3, [r8]
 8006c68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c6c:	3307      	adds	r3, #7
 8006c6e:	f023 0307 	bic.w	r3, r3, #7
 8006c72:	f103 0208 	add.w	r2, r3, #8
 8006c76:	f8c8 2000 	str.w	r2, [r8]
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c82:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c86:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c8a:	9307      	str	r3, [sp, #28]
 8006c8c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c90:	ee08 0a10 	vmov	s16, r0
 8006c94:	4b9f      	ldr	r3, [pc, #636]	; (8006f14 <_printf_float+0x2dc>)
 8006c96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9e:	f7f9 ff4d 	bl	8000b3c <__aeabi_dcmpun>
 8006ca2:	bb88      	cbnz	r0, 8006d08 <_printf_float+0xd0>
 8006ca4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ca8:	4b9a      	ldr	r3, [pc, #616]	; (8006f14 <_printf_float+0x2dc>)
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cae:	f7f9 ff27 	bl	8000b00 <__aeabi_dcmple>
 8006cb2:	bb48      	cbnz	r0, 8006d08 <_printf_float+0xd0>
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff16 	bl	8000aec <__aeabi_dcmplt>
 8006cc0:	b110      	cbz	r0, 8006cc8 <_printf_float+0x90>
 8006cc2:	232d      	movs	r3, #45	; 0x2d
 8006cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc8:	4b93      	ldr	r3, [pc, #588]	; (8006f18 <_printf_float+0x2e0>)
 8006cca:	4894      	ldr	r0, [pc, #592]	; (8006f1c <_printf_float+0x2e4>)
 8006ccc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006cd0:	bf94      	ite	ls
 8006cd2:	4698      	movls	r8, r3
 8006cd4:	4680      	movhi	r8, r0
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	f023 0204 	bic.w	r2, r3, #4
 8006ce0:	6022      	str	r2, [r4, #0]
 8006ce2:	f04f 0900 	mov.w	r9, #0
 8006ce6:	9700      	str	r7, [sp, #0]
 8006ce8:	4633      	mov	r3, r6
 8006cea:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cec:	4621      	mov	r1, r4
 8006cee:	4628      	mov	r0, r5
 8006cf0:	f000 f9d8 	bl	80070a4 <_printf_common>
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	f040 8090 	bne.w	8006e1a <_printf_float+0x1e2>
 8006cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfe:	b00d      	add	sp, #52	; 0x34
 8006d00:	ecbd 8b02 	vpop	{d8}
 8006d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d08:	4642      	mov	r2, r8
 8006d0a:	464b      	mov	r3, r9
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4649      	mov	r1, r9
 8006d10:	f7f9 ff14 	bl	8000b3c <__aeabi_dcmpun>
 8006d14:	b140      	cbz	r0, 8006d28 <_printf_float+0xf0>
 8006d16:	464b      	mov	r3, r9
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfbc      	itt	lt
 8006d1c:	232d      	movlt	r3, #45	; 0x2d
 8006d1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d22:	487f      	ldr	r0, [pc, #508]	; (8006f20 <_printf_float+0x2e8>)
 8006d24:	4b7f      	ldr	r3, [pc, #508]	; (8006f24 <_printf_float+0x2ec>)
 8006d26:	e7d1      	b.n	8006ccc <_printf_float+0x94>
 8006d28:	6863      	ldr	r3, [r4, #4]
 8006d2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d2e:	9206      	str	r2, [sp, #24]
 8006d30:	1c5a      	adds	r2, r3, #1
 8006d32:	d13f      	bne.n	8006db4 <_printf_float+0x17c>
 8006d34:	2306      	movs	r3, #6
 8006d36:	6063      	str	r3, [r4, #4]
 8006d38:	9b05      	ldr	r3, [sp, #20]
 8006d3a:	6861      	ldr	r1, [r4, #4]
 8006d3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d40:	2300      	movs	r3, #0
 8006d42:	9303      	str	r3, [sp, #12]
 8006d44:	ab0a      	add	r3, sp, #40	; 0x28
 8006d46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d4a:	ab09      	add	r3, sp, #36	; 0x24
 8006d4c:	ec49 8b10 	vmov	d0, r8, r9
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	6022      	str	r2, [r4, #0]
 8006d54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f7ff fecd 	bl	8006af8 <__cvt>
 8006d5e:	9b06      	ldr	r3, [sp, #24]
 8006d60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d62:	2b47      	cmp	r3, #71	; 0x47
 8006d64:	4680      	mov	r8, r0
 8006d66:	d108      	bne.n	8006d7a <_printf_float+0x142>
 8006d68:	1cc8      	adds	r0, r1, #3
 8006d6a:	db02      	blt.n	8006d72 <_printf_float+0x13a>
 8006d6c:	6863      	ldr	r3, [r4, #4]
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	dd41      	ble.n	8006df6 <_printf_float+0x1be>
 8006d72:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d76:	fa5f fb8b 	uxtb.w	fp, fp
 8006d7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d7e:	d820      	bhi.n	8006dc2 <_printf_float+0x18a>
 8006d80:	3901      	subs	r1, #1
 8006d82:	465a      	mov	r2, fp
 8006d84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d88:	9109      	str	r1, [sp, #36]	; 0x24
 8006d8a:	f7ff ff17 	bl	8006bbc <__exponent>
 8006d8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d90:	1813      	adds	r3, r2, r0
 8006d92:	2a01      	cmp	r2, #1
 8006d94:	4681      	mov	r9, r0
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	dc02      	bgt.n	8006da0 <_printf_float+0x168>
 8006d9a:	6822      	ldr	r2, [r4, #0]
 8006d9c:	07d2      	lsls	r2, r2, #31
 8006d9e:	d501      	bpl.n	8006da4 <_printf_float+0x16c>
 8006da0:	3301      	adds	r3, #1
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d09c      	beq.n	8006ce6 <_printf_float+0xae>
 8006dac:	232d      	movs	r3, #45	; 0x2d
 8006dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db2:	e798      	b.n	8006ce6 <_printf_float+0xae>
 8006db4:	9a06      	ldr	r2, [sp, #24]
 8006db6:	2a47      	cmp	r2, #71	; 0x47
 8006db8:	d1be      	bne.n	8006d38 <_printf_float+0x100>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1bc      	bne.n	8006d38 <_printf_float+0x100>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e7b9      	b.n	8006d36 <_printf_float+0xfe>
 8006dc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dc6:	d118      	bne.n	8006dfa <_printf_float+0x1c2>
 8006dc8:	2900      	cmp	r1, #0
 8006dca:	6863      	ldr	r3, [r4, #4]
 8006dcc:	dd0b      	ble.n	8006de6 <_printf_float+0x1ae>
 8006dce:	6121      	str	r1, [r4, #16]
 8006dd0:	b913      	cbnz	r3, 8006dd8 <_printf_float+0x1a0>
 8006dd2:	6822      	ldr	r2, [r4, #0]
 8006dd4:	07d0      	lsls	r0, r2, #31
 8006dd6:	d502      	bpl.n	8006dde <_printf_float+0x1a6>
 8006dd8:	3301      	adds	r3, #1
 8006dda:	440b      	add	r3, r1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	65a1      	str	r1, [r4, #88]	; 0x58
 8006de0:	f04f 0900 	mov.w	r9, #0
 8006de4:	e7de      	b.n	8006da4 <_printf_float+0x16c>
 8006de6:	b913      	cbnz	r3, 8006dee <_printf_float+0x1b6>
 8006de8:	6822      	ldr	r2, [r4, #0]
 8006dea:	07d2      	lsls	r2, r2, #31
 8006dec:	d501      	bpl.n	8006df2 <_printf_float+0x1ba>
 8006dee:	3302      	adds	r3, #2
 8006df0:	e7f4      	b.n	8006ddc <_printf_float+0x1a4>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7f2      	b.n	8006ddc <_printf_float+0x1a4>
 8006df6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006dfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dfc:	4299      	cmp	r1, r3
 8006dfe:	db05      	blt.n	8006e0c <_printf_float+0x1d4>
 8006e00:	6823      	ldr	r3, [r4, #0]
 8006e02:	6121      	str	r1, [r4, #16]
 8006e04:	07d8      	lsls	r0, r3, #31
 8006e06:	d5ea      	bpl.n	8006dde <_printf_float+0x1a6>
 8006e08:	1c4b      	adds	r3, r1, #1
 8006e0a:	e7e7      	b.n	8006ddc <_printf_float+0x1a4>
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	bfd4      	ite	le
 8006e10:	f1c1 0202 	rsble	r2, r1, #2
 8006e14:	2201      	movgt	r2, #1
 8006e16:	4413      	add	r3, r2
 8006e18:	e7e0      	b.n	8006ddc <_printf_float+0x1a4>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	055a      	lsls	r2, r3, #21
 8006e1e:	d407      	bmi.n	8006e30 <_printf_float+0x1f8>
 8006e20:	6923      	ldr	r3, [r4, #16]
 8006e22:	4642      	mov	r2, r8
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	47b8      	blx	r7
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d12c      	bne.n	8006e88 <_printf_float+0x250>
 8006e2e:	e764      	b.n	8006cfa <_printf_float+0xc2>
 8006e30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e34:	f240 80e0 	bls.w	8006ff8 <_printf_float+0x3c0>
 8006e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f7f9 fe4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d034      	beq.n	8006eb2 <_printf_float+0x27a>
 8006e48:	4a37      	ldr	r2, [pc, #220]	; (8006f28 <_printf_float+0x2f0>)
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af51 	beq.w	8006cfa <_printf_float+0xc2>
 8006e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	db02      	blt.n	8006e66 <_printf_float+0x22e>
 8006e60:	6823      	ldr	r3, [r4, #0]
 8006e62:	07d8      	lsls	r0, r3, #31
 8006e64:	d510      	bpl.n	8006e88 <_printf_float+0x250>
 8006e66:	ee18 3a10 	vmov	r3, s16
 8006e6a:	4652      	mov	r2, sl
 8006e6c:	4631      	mov	r1, r6
 8006e6e:	4628      	mov	r0, r5
 8006e70:	47b8      	blx	r7
 8006e72:	3001      	adds	r0, #1
 8006e74:	f43f af41 	beq.w	8006cfa <_printf_float+0xc2>
 8006e78:	f04f 0800 	mov.w	r8, #0
 8006e7c:	f104 091a 	add.w	r9, r4, #26
 8006e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e82:	3b01      	subs	r3, #1
 8006e84:	4543      	cmp	r3, r8
 8006e86:	dc09      	bgt.n	8006e9c <_printf_float+0x264>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	079b      	lsls	r3, r3, #30
 8006e8c:	f100 8105 	bmi.w	800709a <_printf_float+0x462>
 8006e90:	68e0      	ldr	r0, [r4, #12]
 8006e92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e94:	4298      	cmp	r0, r3
 8006e96:	bfb8      	it	lt
 8006e98:	4618      	movlt	r0, r3
 8006e9a:	e730      	b.n	8006cfe <_printf_float+0xc6>
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	464a      	mov	r2, r9
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f43f af27 	beq.w	8006cfa <_printf_float+0xc2>
 8006eac:	f108 0801 	add.w	r8, r8, #1
 8006eb0:	e7e6      	b.n	8006e80 <_printf_float+0x248>
 8006eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dc39      	bgt.n	8006f2c <_printf_float+0x2f4>
 8006eb8:	4a1b      	ldr	r2, [pc, #108]	; (8006f28 <_printf_float+0x2f0>)
 8006eba:	2301      	movs	r3, #1
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	f43f af19 	beq.w	8006cfa <_printf_float+0xc2>
 8006ec8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	d102      	bne.n	8006ed6 <_printf_float+0x29e>
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	07d9      	lsls	r1, r3, #31
 8006ed4:	d5d8      	bpl.n	8006e88 <_printf_float+0x250>
 8006ed6:	ee18 3a10 	vmov	r3, s16
 8006eda:	4652      	mov	r2, sl
 8006edc:	4631      	mov	r1, r6
 8006ede:	4628      	mov	r0, r5
 8006ee0:	47b8      	blx	r7
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	f43f af09 	beq.w	8006cfa <_printf_float+0xc2>
 8006ee8:	f04f 0900 	mov.w	r9, #0
 8006eec:	f104 0a1a 	add.w	sl, r4, #26
 8006ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef2:	425b      	negs	r3, r3
 8006ef4:	454b      	cmp	r3, r9
 8006ef6:	dc01      	bgt.n	8006efc <_printf_float+0x2c4>
 8006ef8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006efa:	e792      	b.n	8006e22 <_printf_float+0x1ea>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4652      	mov	r2, sl
 8006f00:	4631      	mov	r1, r6
 8006f02:	4628      	mov	r0, r5
 8006f04:	47b8      	blx	r7
 8006f06:	3001      	adds	r0, #1
 8006f08:	f43f aef7 	beq.w	8006cfa <_printf_float+0xc2>
 8006f0c:	f109 0901 	add.w	r9, r9, #1
 8006f10:	e7ee      	b.n	8006ef0 <_printf_float+0x2b8>
 8006f12:	bf00      	nop
 8006f14:	7fefffff 	.word	0x7fefffff
 8006f18:	0800bd54 	.word	0x0800bd54
 8006f1c:	0800bd58 	.word	0x0800bd58
 8006f20:	0800bd60 	.word	0x0800bd60
 8006f24:	0800bd5c 	.word	0x0800bd5c
 8006f28:	0800bd64 	.word	0x0800bd64
 8006f2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bfa8      	it	ge
 8006f34:	461a      	movge	r2, r3
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	4691      	mov	r9, r2
 8006f3a:	dc37      	bgt.n	8006fac <_printf_float+0x374>
 8006f3c:	f04f 0b00 	mov.w	fp, #0
 8006f40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f44:	f104 021a 	add.w	r2, r4, #26
 8006f48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	eba3 0309 	sub.w	r3, r3, r9
 8006f50:	455b      	cmp	r3, fp
 8006f52:	dc33      	bgt.n	8006fbc <_printf_float+0x384>
 8006f54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	db3b      	blt.n	8006fd4 <_printf_float+0x39c>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	07da      	lsls	r2, r3, #31
 8006f60:	d438      	bmi.n	8006fd4 <_printf_float+0x39c>
 8006f62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f64:	9b05      	ldr	r3, [sp, #20]
 8006f66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	eba2 0901 	sub.w	r9, r2, r1
 8006f6e:	4599      	cmp	r9, r3
 8006f70:	bfa8      	it	ge
 8006f72:	4699      	movge	r9, r3
 8006f74:	f1b9 0f00 	cmp.w	r9, #0
 8006f78:	dc35      	bgt.n	8006fe6 <_printf_float+0x3ae>
 8006f7a:	f04f 0800 	mov.w	r8, #0
 8006f7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f82:	f104 0a1a 	add.w	sl, r4, #26
 8006f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	eba3 0309 	sub.w	r3, r3, r9
 8006f90:	4543      	cmp	r3, r8
 8006f92:	f77f af79 	ble.w	8006e88 <_printf_float+0x250>
 8006f96:	2301      	movs	r3, #1
 8006f98:	4652      	mov	r2, sl
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	47b8      	blx	r7
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f43f aeaa 	beq.w	8006cfa <_printf_float+0xc2>
 8006fa6:	f108 0801 	add.w	r8, r8, #1
 8006faa:	e7ec      	b.n	8006f86 <_printf_float+0x34e>
 8006fac:	4613      	mov	r3, r2
 8006fae:	4631      	mov	r1, r6
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	47b8      	blx	r7
 8006fb6:	3001      	adds	r0, #1
 8006fb8:	d1c0      	bne.n	8006f3c <_printf_float+0x304>
 8006fba:	e69e      	b.n	8006cfa <_printf_float+0xc2>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	9205      	str	r2, [sp, #20]
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	f43f ae97 	beq.w	8006cfa <_printf_float+0xc2>
 8006fcc:	9a05      	ldr	r2, [sp, #20]
 8006fce:	f10b 0b01 	add.w	fp, fp, #1
 8006fd2:	e7b9      	b.n	8006f48 <_printf_float+0x310>
 8006fd4:	ee18 3a10 	vmov	r3, s16
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	d1be      	bne.n	8006f62 <_printf_float+0x32a>
 8006fe4:	e689      	b.n	8006cfa <_printf_float+0xc2>
 8006fe6:	9a05      	ldr	r2, [sp, #20]
 8006fe8:	464b      	mov	r3, r9
 8006fea:	4442      	add	r2, r8
 8006fec:	4631      	mov	r1, r6
 8006fee:	4628      	mov	r0, r5
 8006ff0:	47b8      	blx	r7
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d1c1      	bne.n	8006f7a <_printf_float+0x342>
 8006ff6:	e680      	b.n	8006cfa <_printf_float+0xc2>
 8006ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ffa:	2a01      	cmp	r2, #1
 8006ffc:	dc01      	bgt.n	8007002 <_printf_float+0x3ca>
 8006ffe:	07db      	lsls	r3, r3, #31
 8007000:	d538      	bpl.n	8007074 <_printf_float+0x43c>
 8007002:	2301      	movs	r3, #1
 8007004:	4642      	mov	r2, r8
 8007006:	4631      	mov	r1, r6
 8007008:	4628      	mov	r0, r5
 800700a:	47b8      	blx	r7
 800700c:	3001      	adds	r0, #1
 800700e:	f43f ae74 	beq.w	8006cfa <_printf_float+0xc2>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f ae6b 	beq.w	8006cfa <_printf_float+0xc2>
 8007024:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007028:	2200      	movs	r2, #0
 800702a:	2300      	movs	r3, #0
 800702c:	f7f9 fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 8007030:	b9d8      	cbnz	r0, 800706a <_printf_float+0x432>
 8007032:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007034:	f108 0201 	add.w	r2, r8, #1
 8007038:	3b01      	subs	r3, #1
 800703a:	4631      	mov	r1, r6
 800703c:	4628      	mov	r0, r5
 800703e:	47b8      	blx	r7
 8007040:	3001      	adds	r0, #1
 8007042:	d10e      	bne.n	8007062 <_printf_float+0x42a>
 8007044:	e659      	b.n	8006cfa <_printf_float+0xc2>
 8007046:	2301      	movs	r3, #1
 8007048:	4652      	mov	r2, sl
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	f43f ae52 	beq.w	8006cfa <_printf_float+0xc2>
 8007056:	f108 0801 	add.w	r8, r8, #1
 800705a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800705c:	3b01      	subs	r3, #1
 800705e:	4543      	cmp	r3, r8
 8007060:	dcf1      	bgt.n	8007046 <_printf_float+0x40e>
 8007062:	464b      	mov	r3, r9
 8007064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007068:	e6dc      	b.n	8006e24 <_printf_float+0x1ec>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	f104 0a1a 	add.w	sl, r4, #26
 8007072:	e7f2      	b.n	800705a <_printf_float+0x422>
 8007074:	2301      	movs	r3, #1
 8007076:	4642      	mov	r2, r8
 8007078:	e7df      	b.n	800703a <_printf_float+0x402>
 800707a:	2301      	movs	r3, #1
 800707c:	464a      	mov	r2, r9
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f ae38 	beq.w	8006cfa <_printf_float+0xc2>
 800708a:	f108 0801 	add.w	r8, r8, #1
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007092:	1a5b      	subs	r3, r3, r1
 8007094:	4543      	cmp	r3, r8
 8007096:	dcf0      	bgt.n	800707a <_printf_float+0x442>
 8007098:	e6fa      	b.n	8006e90 <_printf_float+0x258>
 800709a:	f04f 0800 	mov.w	r8, #0
 800709e:	f104 0919 	add.w	r9, r4, #25
 80070a2:	e7f4      	b.n	800708e <_printf_float+0x456>

080070a4 <_printf_common>:
 80070a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a8:	4616      	mov	r6, r2
 80070aa:	4699      	mov	r9, r3
 80070ac:	688a      	ldr	r2, [r1, #8]
 80070ae:	690b      	ldr	r3, [r1, #16]
 80070b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bfb8      	it	lt
 80070b8:	4613      	movlt	r3, r2
 80070ba:	6033      	str	r3, [r6, #0]
 80070bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070c0:	4607      	mov	r7, r0
 80070c2:	460c      	mov	r4, r1
 80070c4:	b10a      	cbz	r2, 80070ca <_printf_common+0x26>
 80070c6:	3301      	adds	r3, #1
 80070c8:	6033      	str	r3, [r6, #0]
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	0699      	lsls	r1, r3, #26
 80070ce:	bf42      	ittt	mi
 80070d0:	6833      	ldrmi	r3, [r6, #0]
 80070d2:	3302      	addmi	r3, #2
 80070d4:	6033      	strmi	r3, [r6, #0]
 80070d6:	6825      	ldr	r5, [r4, #0]
 80070d8:	f015 0506 	ands.w	r5, r5, #6
 80070dc:	d106      	bne.n	80070ec <_printf_common+0x48>
 80070de:	f104 0a19 	add.w	sl, r4, #25
 80070e2:	68e3      	ldr	r3, [r4, #12]
 80070e4:	6832      	ldr	r2, [r6, #0]
 80070e6:	1a9b      	subs	r3, r3, r2
 80070e8:	42ab      	cmp	r3, r5
 80070ea:	dc26      	bgt.n	800713a <_printf_common+0x96>
 80070ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070f0:	1e13      	subs	r3, r2, #0
 80070f2:	6822      	ldr	r2, [r4, #0]
 80070f4:	bf18      	it	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	0692      	lsls	r2, r2, #26
 80070fa:	d42b      	bmi.n	8007154 <_printf_common+0xb0>
 80070fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007100:	4649      	mov	r1, r9
 8007102:	4638      	mov	r0, r7
 8007104:	47c0      	blx	r8
 8007106:	3001      	adds	r0, #1
 8007108:	d01e      	beq.n	8007148 <_printf_common+0xa4>
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	68e5      	ldr	r5, [r4, #12]
 800710e:	6832      	ldr	r2, [r6, #0]
 8007110:	f003 0306 	and.w	r3, r3, #6
 8007114:	2b04      	cmp	r3, #4
 8007116:	bf08      	it	eq
 8007118:	1aad      	subeq	r5, r5, r2
 800711a:	68a3      	ldr	r3, [r4, #8]
 800711c:	6922      	ldr	r2, [r4, #16]
 800711e:	bf0c      	ite	eq
 8007120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007124:	2500      	movne	r5, #0
 8007126:	4293      	cmp	r3, r2
 8007128:	bfc4      	itt	gt
 800712a:	1a9b      	subgt	r3, r3, r2
 800712c:	18ed      	addgt	r5, r5, r3
 800712e:	2600      	movs	r6, #0
 8007130:	341a      	adds	r4, #26
 8007132:	42b5      	cmp	r5, r6
 8007134:	d11a      	bne.n	800716c <_printf_common+0xc8>
 8007136:	2000      	movs	r0, #0
 8007138:	e008      	b.n	800714c <_printf_common+0xa8>
 800713a:	2301      	movs	r3, #1
 800713c:	4652      	mov	r2, sl
 800713e:	4649      	mov	r1, r9
 8007140:	4638      	mov	r0, r7
 8007142:	47c0      	blx	r8
 8007144:	3001      	adds	r0, #1
 8007146:	d103      	bne.n	8007150 <_printf_common+0xac>
 8007148:	f04f 30ff 	mov.w	r0, #4294967295
 800714c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007150:	3501      	adds	r5, #1
 8007152:	e7c6      	b.n	80070e2 <_printf_common+0x3e>
 8007154:	18e1      	adds	r1, r4, r3
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	2030      	movs	r0, #48	; 0x30
 800715a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800715e:	4422      	add	r2, r4
 8007160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007168:	3302      	adds	r3, #2
 800716a:	e7c7      	b.n	80070fc <_printf_common+0x58>
 800716c:	2301      	movs	r3, #1
 800716e:	4622      	mov	r2, r4
 8007170:	4649      	mov	r1, r9
 8007172:	4638      	mov	r0, r7
 8007174:	47c0      	blx	r8
 8007176:	3001      	adds	r0, #1
 8007178:	d0e6      	beq.n	8007148 <_printf_common+0xa4>
 800717a:	3601      	adds	r6, #1
 800717c:	e7d9      	b.n	8007132 <_printf_common+0x8e>
	...

08007180 <_printf_i>:
 8007180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007184:	460c      	mov	r4, r1
 8007186:	4691      	mov	r9, r2
 8007188:	7e27      	ldrb	r7, [r4, #24]
 800718a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800718c:	2f78      	cmp	r7, #120	; 0x78
 800718e:	4680      	mov	r8, r0
 8007190:	469a      	mov	sl, r3
 8007192:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007196:	d807      	bhi.n	80071a8 <_printf_i+0x28>
 8007198:	2f62      	cmp	r7, #98	; 0x62
 800719a:	d80a      	bhi.n	80071b2 <_printf_i+0x32>
 800719c:	2f00      	cmp	r7, #0
 800719e:	f000 80d8 	beq.w	8007352 <_printf_i+0x1d2>
 80071a2:	2f58      	cmp	r7, #88	; 0x58
 80071a4:	f000 80a3 	beq.w	80072ee <_printf_i+0x16e>
 80071a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071b0:	e03a      	b.n	8007228 <_printf_i+0xa8>
 80071b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071b6:	2b15      	cmp	r3, #21
 80071b8:	d8f6      	bhi.n	80071a8 <_printf_i+0x28>
 80071ba:	a001      	add	r0, pc, #4	; (adr r0, 80071c0 <_printf_i+0x40>)
 80071bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80071c0:	08007219 	.word	0x08007219
 80071c4:	0800722d 	.word	0x0800722d
 80071c8:	080071a9 	.word	0x080071a9
 80071cc:	080071a9 	.word	0x080071a9
 80071d0:	080071a9 	.word	0x080071a9
 80071d4:	080071a9 	.word	0x080071a9
 80071d8:	0800722d 	.word	0x0800722d
 80071dc:	080071a9 	.word	0x080071a9
 80071e0:	080071a9 	.word	0x080071a9
 80071e4:	080071a9 	.word	0x080071a9
 80071e8:	080071a9 	.word	0x080071a9
 80071ec:	08007339 	.word	0x08007339
 80071f0:	0800725d 	.word	0x0800725d
 80071f4:	0800731b 	.word	0x0800731b
 80071f8:	080071a9 	.word	0x080071a9
 80071fc:	080071a9 	.word	0x080071a9
 8007200:	0800735b 	.word	0x0800735b
 8007204:	080071a9 	.word	0x080071a9
 8007208:	0800725d 	.word	0x0800725d
 800720c:	080071a9 	.word	0x080071a9
 8007210:	080071a9 	.word	0x080071a9
 8007214:	08007323 	.word	0x08007323
 8007218:	680b      	ldr	r3, [r1, #0]
 800721a:	1d1a      	adds	r2, r3, #4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	600a      	str	r2, [r1, #0]
 8007220:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007228:	2301      	movs	r3, #1
 800722a:	e0a3      	b.n	8007374 <_printf_i+0x1f4>
 800722c:	6825      	ldr	r5, [r4, #0]
 800722e:	6808      	ldr	r0, [r1, #0]
 8007230:	062e      	lsls	r6, r5, #24
 8007232:	f100 0304 	add.w	r3, r0, #4
 8007236:	d50a      	bpl.n	800724e <_printf_i+0xce>
 8007238:	6805      	ldr	r5, [r0, #0]
 800723a:	600b      	str	r3, [r1, #0]
 800723c:	2d00      	cmp	r5, #0
 800723e:	da03      	bge.n	8007248 <_printf_i+0xc8>
 8007240:	232d      	movs	r3, #45	; 0x2d
 8007242:	426d      	negs	r5, r5
 8007244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007248:	485e      	ldr	r0, [pc, #376]	; (80073c4 <_printf_i+0x244>)
 800724a:	230a      	movs	r3, #10
 800724c:	e019      	b.n	8007282 <_printf_i+0x102>
 800724e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007252:	6805      	ldr	r5, [r0, #0]
 8007254:	600b      	str	r3, [r1, #0]
 8007256:	bf18      	it	ne
 8007258:	b22d      	sxthne	r5, r5
 800725a:	e7ef      	b.n	800723c <_printf_i+0xbc>
 800725c:	680b      	ldr	r3, [r1, #0]
 800725e:	6825      	ldr	r5, [r4, #0]
 8007260:	1d18      	adds	r0, r3, #4
 8007262:	6008      	str	r0, [r1, #0]
 8007264:	0628      	lsls	r0, r5, #24
 8007266:	d501      	bpl.n	800726c <_printf_i+0xec>
 8007268:	681d      	ldr	r5, [r3, #0]
 800726a:	e002      	b.n	8007272 <_printf_i+0xf2>
 800726c:	0669      	lsls	r1, r5, #25
 800726e:	d5fb      	bpl.n	8007268 <_printf_i+0xe8>
 8007270:	881d      	ldrh	r5, [r3, #0]
 8007272:	4854      	ldr	r0, [pc, #336]	; (80073c4 <_printf_i+0x244>)
 8007274:	2f6f      	cmp	r7, #111	; 0x6f
 8007276:	bf0c      	ite	eq
 8007278:	2308      	moveq	r3, #8
 800727a:	230a      	movne	r3, #10
 800727c:	2100      	movs	r1, #0
 800727e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007282:	6866      	ldr	r6, [r4, #4]
 8007284:	60a6      	str	r6, [r4, #8]
 8007286:	2e00      	cmp	r6, #0
 8007288:	bfa2      	ittt	ge
 800728a:	6821      	ldrge	r1, [r4, #0]
 800728c:	f021 0104 	bicge.w	r1, r1, #4
 8007290:	6021      	strge	r1, [r4, #0]
 8007292:	b90d      	cbnz	r5, 8007298 <_printf_i+0x118>
 8007294:	2e00      	cmp	r6, #0
 8007296:	d04d      	beq.n	8007334 <_printf_i+0x1b4>
 8007298:	4616      	mov	r6, r2
 800729a:	fbb5 f1f3 	udiv	r1, r5, r3
 800729e:	fb03 5711 	mls	r7, r3, r1, r5
 80072a2:	5dc7      	ldrb	r7, [r0, r7]
 80072a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072a8:	462f      	mov	r7, r5
 80072aa:	42bb      	cmp	r3, r7
 80072ac:	460d      	mov	r5, r1
 80072ae:	d9f4      	bls.n	800729a <_printf_i+0x11a>
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d10b      	bne.n	80072cc <_printf_i+0x14c>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07df      	lsls	r7, r3, #31
 80072b8:	d508      	bpl.n	80072cc <_printf_i+0x14c>
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	6861      	ldr	r1, [r4, #4]
 80072be:	4299      	cmp	r1, r3
 80072c0:	bfde      	ittt	le
 80072c2:	2330      	movle	r3, #48	; 0x30
 80072c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072cc:	1b92      	subs	r2, r2, r6
 80072ce:	6122      	str	r2, [r4, #16]
 80072d0:	f8cd a000 	str.w	sl, [sp]
 80072d4:	464b      	mov	r3, r9
 80072d6:	aa03      	add	r2, sp, #12
 80072d8:	4621      	mov	r1, r4
 80072da:	4640      	mov	r0, r8
 80072dc:	f7ff fee2 	bl	80070a4 <_printf_common>
 80072e0:	3001      	adds	r0, #1
 80072e2:	d14c      	bne.n	800737e <_printf_i+0x1fe>
 80072e4:	f04f 30ff 	mov.w	r0, #4294967295
 80072e8:	b004      	add	sp, #16
 80072ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ee:	4835      	ldr	r0, [pc, #212]	; (80073c4 <_printf_i+0x244>)
 80072f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072f4:	6823      	ldr	r3, [r4, #0]
 80072f6:	680e      	ldr	r6, [r1, #0]
 80072f8:	061f      	lsls	r7, r3, #24
 80072fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80072fe:	600e      	str	r6, [r1, #0]
 8007300:	d514      	bpl.n	800732c <_printf_i+0x1ac>
 8007302:	07d9      	lsls	r1, r3, #31
 8007304:	bf44      	itt	mi
 8007306:	f043 0320 	orrmi.w	r3, r3, #32
 800730a:	6023      	strmi	r3, [r4, #0]
 800730c:	b91d      	cbnz	r5, 8007316 <_printf_i+0x196>
 800730e:	6823      	ldr	r3, [r4, #0]
 8007310:	f023 0320 	bic.w	r3, r3, #32
 8007314:	6023      	str	r3, [r4, #0]
 8007316:	2310      	movs	r3, #16
 8007318:	e7b0      	b.n	800727c <_printf_i+0xfc>
 800731a:	6823      	ldr	r3, [r4, #0]
 800731c:	f043 0320 	orr.w	r3, r3, #32
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	2378      	movs	r3, #120	; 0x78
 8007324:	4828      	ldr	r0, [pc, #160]	; (80073c8 <_printf_i+0x248>)
 8007326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800732a:	e7e3      	b.n	80072f4 <_printf_i+0x174>
 800732c:	065e      	lsls	r6, r3, #25
 800732e:	bf48      	it	mi
 8007330:	b2ad      	uxthmi	r5, r5
 8007332:	e7e6      	b.n	8007302 <_printf_i+0x182>
 8007334:	4616      	mov	r6, r2
 8007336:	e7bb      	b.n	80072b0 <_printf_i+0x130>
 8007338:	680b      	ldr	r3, [r1, #0]
 800733a:	6826      	ldr	r6, [r4, #0]
 800733c:	6960      	ldr	r0, [r4, #20]
 800733e:	1d1d      	adds	r5, r3, #4
 8007340:	600d      	str	r5, [r1, #0]
 8007342:	0635      	lsls	r5, r6, #24
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	d501      	bpl.n	800734c <_printf_i+0x1cc>
 8007348:	6018      	str	r0, [r3, #0]
 800734a:	e002      	b.n	8007352 <_printf_i+0x1d2>
 800734c:	0671      	lsls	r1, r6, #25
 800734e:	d5fb      	bpl.n	8007348 <_printf_i+0x1c8>
 8007350:	8018      	strh	r0, [r3, #0]
 8007352:	2300      	movs	r3, #0
 8007354:	6123      	str	r3, [r4, #16]
 8007356:	4616      	mov	r6, r2
 8007358:	e7ba      	b.n	80072d0 <_printf_i+0x150>
 800735a:	680b      	ldr	r3, [r1, #0]
 800735c:	1d1a      	adds	r2, r3, #4
 800735e:	600a      	str	r2, [r1, #0]
 8007360:	681e      	ldr	r6, [r3, #0]
 8007362:	6862      	ldr	r2, [r4, #4]
 8007364:	2100      	movs	r1, #0
 8007366:	4630      	mov	r0, r6
 8007368:	f7f8 ff42 	bl	80001f0 <memchr>
 800736c:	b108      	cbz	r0, 8007372 <_printf_i+0x1f2>
 800736e:	1b80      	subs	r0, r0, r6
 8007370:	6060      	str	r0, [r4, #4]
 8007372:	6863      	ldr	r3, [r4, #4]
 8007374:	6123      	str	r3, [r4, #16]
 8007376:	2300      	movs	r3, #0
 8007378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800737c:	e7a8      	b.n	80072d0 <_printf_i+0x150>
 800737e:	6923      	ldr	r3, [r4, #16]
 8007380:	4632      	mov	r2, r6
 8007382:	4649      	mov	r1, r9
 8007384:	4640      	mov	r0, r8
 8007386:	47d0      	blx	sl
 8007388:	3001      	adds	r0, #1
 800738a:	d0ab      	beq.n	80072e4 <_printf_i+0x164>
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	079b      	lsls	r3, r3, #30
 8007390:	d413      	bmi.n	80073ba <_printf_i+0x23a>
 8007392:	68e0      	ldr	r0, [r4, #12]
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	4298      	cmp	r0, r3
 8007398:	bfb8      	it	lt
 800739a:	4618      	movlt	r0, r3
 800739c:	e7a4      	b.n	80072e8 <_printf_i+0x168>
 800739e:	2301      	movs	r3, #1
 80073a0:	4632      	mov	r2, r6
 80073a2:	4649      	mov	r1, r9
 80073a4:	4640      	mov	r0, r8
 80073a6:	47d0      	blx	sl
 80073a8:	3001      	adds	r0, #1
 80073aa:	d09b      	beq.n	80072e4 <_printf_i+0x164>
 80073ac:	3501      	adds	r5, #1
 80073ae:	68e3      	ldr	r3, [r4, #12]
 80073b0:	9903      	ldr	r1, [sp, #12]
 80073b2:	1a5b      	subs	r3, r3, r1
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	dcf2      	bgt.n	800739e <_printf_i+0x21e>
 80073b8:	e7eb      	b.n	8007392 <_printf_i+0x212>
 80073ba:	2500      	movs	r5, #0
 80073bc:	f104 0619 	add.w	r6, r4, #25
 80073c0:	e7f5      	b.n	80073ae <_printf_i+0x22e>
 80073c2:	bf00      	nop
 80073c4:	0800bd66 	.word	0x0800bd66
 80073c8:	0800bd77 	.word	0x0800bd77

080073cc <siprintf>:
 80073cc:	b40e      	push	{r1, r2, r3}
 80073ce:	b500      	push	{lr}
 80073d0:	b09c      	sub	sp, #112	; 0x70
 80073d2:	ab1d      	add	r3, sp, #116	; 0x74
 80073d4:	9002      	str	r0, [sp, #8]
 80073d6:	9006      	str	r0, [sp, #24]
 80073d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073dc:	4809      	ldr	r0, [pc, #36]	; (8007404 <siprintf+0x38>)
 80073de:	9107      	str	r1, [sp, #28]
 80073e0:	9104      	str	r1, [sp, #16]
 80073e2:	4909      	ldr	r1, [pc, #36]	; (8007408 <siprintf+0x3c>)
 80073e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	a902      	add	r1, sp, #8
 80073f0:	f001 fb34 	bl	8008a5c <_svfiprintf_r>
 80073f4:	9b02      	ldr	r3, [sp, #8]
 80073f6:	2200      	movs	r2, #0
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	b01c      	add	sp, #112	; 0x70
 80073fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007400:	b003      	add	sp, #12
 8007402:	4770      	bx	lr
 8007404:	2000010c 	.word	0x2000010c
 8007408:	ffff0208 	.word	0xffff0208

0800740c <quorem>:
 800740c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	6903      	ldr	r3, [r0, #16]
 8007412:	690c      	ldr	r4, [r1, #16]
 8007414:	42a3      	cmp	r3, r4
 8007416:	4607      	mov	r7, r0
 8007418:	f2c0 8081 	blt.w	800751e <quorem+0x112>
 800741c:	3c01      	subs	r4, #1
 800741e:	f101 0814 	add.w	r8, r1, #20
 8007422:	f100 0514 	add.w	r5, r0, #20
 8007426:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007430:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007434:	3301      	adds	r3, #1
 8007436:	429a      	cmp	r2, r3
 8007438:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800743c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007440:	fbb2 f6f3 	udiv	r6, r2, r3
 8007444:	d331      	bcc.n	80074aa <quorem+0x9e>
 8007446:	f04f 0e00 	mov.w	lr, #0
 800744a:	4640      	mov	r0, r8
 800744c:	46ac      	mov	ip, r5
 800744e:	46f2      	mov	sl, lr
 8007450:	f850 2b04 	ldr.w	r2, [r0], #4
 8007454:	b293      	uxth	r3, r2
 8007456:	fb06 e303 	mla	r3, r6, r3, lr
 800745a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800745e:	b29b      	uxth	r3, r3
 8007460:	ebaa 0303 	sub.w	r3, sl, r3
 8007464:	0c12      	lsrs	r2, r2, #16
 8007466:	f8dc a000 	ldr.w	sl, [ip]
 800746a:	fb06 e202 	mla	r2, r6, r2, lr
 800746e:	fa13 f38a 	uxtah	r3, r3, sl
 8007472:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007476:	fa1f fa82 	uxth.w	sl, r2
 800747a:	f8dc 2000 	ldr.w	r2, [ip]
 800747e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007482:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007486:	b29b      	uxth	r3, r3
 8007488:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800748c:	4581      	cmp	r9, r0
 800748e:	f84c 3b04 	str.w	r3, [ip], #4
 8007492:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007496:	d2db      	bcs.n	8007450 <quorem+0x44>
 8007498:	f855 300b 	ldr.w	r3, [r5, fp]
 800749c:	b92b      	cbnz	r3, 80074aa <quorem+0x9e>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	429d      	cmp	r5, r3
 80074a4:	461a      	mov	r2, r3
 80074a6:	d32e      	bcc.n	8007506 <quorem+0xfa>
 80074a8:	613c      	str	r4, [r7, #16]
 80074aa:	4638      	mov	r0, r7
 80074ac:	f001 f8c0 	bl	8008630 <__mcmp>
 80074b0:	2800      	cmp	r0, #0
 80074b2:	db24      	blt.n	80074fe <quorem+0xf2>
 80074b4:	3601      	adds	r6, #1
 80074b6:	4628      	mov	r0, r5
 80074b8:	f04f 0c00 	mov.w	ip, #0
 80074bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80074c0:	f8d0 e000 	ldr.w	lr, [r0]
 80074c4:	b293      	uxth	r3, r2
 80074c6:	ebac 0303 	sub.w	r3, ip, r3
 80074ca:	0c12      	lsrs	r2, r2, #16
 80074cc:	fa13 f38e 	uxtah	r3, r3, lr
 80074d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80074d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074d8:	b29b      	uxth	r3, r3
 80074da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074de:	45c1      	cmp	r9, r8
 80074e0:	f840 3b04 	str.w	r3, [r0], #4
 80074e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80074e8:	d2e8      	bcs.n	80074bc <quorem+0xb0>
 80074ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074f2:	b922      	cbnz	r2, 80074fe <quorem+0xf2>
 80074f4:	3b04      	subs	r3, #4
 80074f6:	429d      	cmp	r5, r3
 80074f8:	461a      	mov	r2, r3
 80074fa:	d30a      	bcc.n	8007512 <quorem+0x106>
 80074fc:	613c      	str	r4, [r7, #16]
 80074fe:	4630      	mov	r0, r6
 8007500:	b003      	add	sp, #12
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	6812      	ldr	r2, [r2, #0]
 8007508:	3b04      	subs	r3, #4
 800750a:	2a00      	cmp	r2, #0
 800750c:	d1cc      	bne.n	80074a8 <quorem+0x9c>
 800750e:	3c01      	subs	r4, #1
 8007510:	e7c7      	b.n	80074a2 <quorem+0x96>
 8007512:	6812      	ldr	r2, [r2, #0]
 8007514:	3b04      	subs	r3, #4
 8007516:	2a00      	cmp	r2, #0
 8007518:	d1f0      	bne.n	80074fc <quorem+0xf0>
 800751a:	3c01      	subs	r4, #1
 800751c:	e7eb      	b.n	80074f6 <quorem+0xea>
 800751e:	2000      	movs	r0, #0
 8007520:	e7ee      	b.n	8007500 <quorem+0xf4>
 8007522:	0000      	movs	r0, r0
 8007524:	0000      	movs	r0, r0
	...

08007528 <_dtoa_r>:
 8007528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800752c:	ed2d 8b02 	vpush	{d8}
 8007530:	ec57 6b10 	vmov	r6, r7, d0
 8007534:	b095      	sub	sp, #84	; 0x54
 8007536:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007538:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800753c:	9105      	str	r1, [sp, #20]
 800753e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007542:	4604      	mov	r4, r0
 8007544:	9209      	str	r2, [sp, #36]	; 0x24
 8007546:	930f      	str	r3, [sp, #60]	; 0x3c
 8007548:	b975      	cbnz	r5, 8007568 <_dtoa_r+0x40>
 800754a:	2010      	movs	r0, #16
 800754c:	f000 fddc 	bl	8008108 <malloc>
 8007550:	4602      	mov	r2, r0
 8007552:	6260      	str	r0, [r4, #36]	; 0x24
 8007554:	b920      	cbnz	r0, 8007560 <_dtoa_r+0x38>
 8007556:	4bb2      	ldr	r3, [pc, #712]	; (8007820 <_dtoa_r+0x2f8>)
 8007558:	21ea      	movs	r1, #234	; 0xea
 800755a:	48b2      	ldr	r0, [pc, #712]	; (8007824 <_dtoa_r+0x2fc>)
 800755c:	f001 fb8e 	bl	8008c7c <__assert_func>
 8007560:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007564:	6005      	str	r5, [r0, #0]
 8007566:	60c5      	str	r5, [r0, #12]
 8007568:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800756a:	6819      	ldr	r1, [r3, #0]
 800756c:	b151      	cbz	r1, 8007584 <_dtoa_r+0x5c>
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	604a      	str	r2, [r1, #4]
 8007572:	2301      	movs	r3, #1
 8007574:	4093      	lsls	r3, r2
 8007576:	608b      	str	r3, [r1, #8]
 8007578:	4620      	mov	r0, r4
 800757a:	f000 fe1b 	bl	80081b4 <_Bfree>
 800757e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]
 8007584:	1e3b      	subs	r3, r7, #0
 8007586:	bfb9      	ittee	lt
 8007588:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800758c:	9303      	strlt	r3, [sp, #12]
 800758e:	2300      	movge	r3, #0
 8007590:	f8c8 3000 	strge.w	r3, [r8]
 8007594:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007598:	4ba3      	ldr	r3, [pc, #652]	; (8007828 <_dtoa_r+0x300>)
 800759a:	bfbc      	itt	lt
 800759c:	2201      	movlt	r2, #1
 800759e:	f8c8 2000 	strlt.w	r2, [r8]
 80075a2:	ea33 0309 	bics.w	r3, r3, r9
 80075a6:	d11b      	bne.n	80075e0 <_dtoa_r+0xb8>
 80075a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80075ae:	6013      	str	r3, [r2, #0]
 80075b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075b4:	4333      	orrs	r3, r6
 80075b6:	f000 857a 	beq.w	80080ae <_dtoa_r+0xb86>
 80075ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075bc:	b963      	cbnz	r3, 80075d8 <_dtoa_r+0xb0>
 80075be:	4b9b      	ldr	r3, [pc, #620]	; (800782c <_dtoa_r+0x304>)
 80075c0:	e024      	b.n	800760c <_dtoa_r+0xe4>
 80075c2:	4b9b      	ldr	r3, [pc, #620]	; (8007830 <_dtoa_r+0x308>)
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	3308      	adds	r3, #8
 80075c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	9800      	ldr	r0, [sp, #0]
 80075ce:	b015      	add	sp, #84	; 0x54
 80075d0:	ecbd 8b02 	vpop	{d8}
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	4b94      	ldr	r3, [pc, #592]	; (800782c <_dtoa_r+0x304>)
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	3303      	adds	r3, #3
 80075de:	e7f3      	b.n	80075c8 <_dtoa_r+0xa0>
 80075e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	ec51 0b17 	vmov	r0, r1, d7
 80075ea:	2300      	movs	r3, #0
 80075ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80075f0:	f7f9 fa72 	bl	8000ad8 <__aeabi_dcmpeq>
 80075f4:	4680      	mov	r8, r0
 80075f6:	b158      	cbz	r0, 8007610 <_dtoa_r+0xe8>
 80075f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075fa:	2301      	movs	r3, #1
 80075fc:	6013      	str	r3, [r2, #0]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8551 	beq.w	80080a8 <_dtoa_r+0xb80>
 8007606:	488b      	ldr	r0, [pc, #556]	; (8007834 <_dtoa_r+0x30c>)
 8007608:	6018      	str	r0, [r3, #0]
 800760a:	1e43      	subs	r3, r0, #1
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	e7dd      	b.n	80075cc <_dtoa_r+0xa4>
 8007610:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007614:	aa12      	add	r2, sp, #72	; 0x48
 8007616:	a913      	add	r1, sp, #76	; 0x4c
 8007618:	4620      	mov	r0, r4
 800761a:	f001 f8ad 	bl	8008778 <__d2b>
 800761e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007622:	4683      	mov	fp, r0
 8007624:	2d00      	cmp	r5, #0
 8007626:	d07c      	beq.n	8007722 <_dtoa_r+0x1fa>
 8007628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800762a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800762e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007632:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007636:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800763a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800763e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007642:	4b7d      	ldr	r3, [pc, #500]	; (8007838 <_dtoa_r+0x310>)
 8007644:	2200      	movs	r2, #0
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f8 fe25 	bl	8000298 <__aeabi_dsub>
 800764e:	a36e      	add	r3, pc, #440	; (adr r3, 8007808 <_dtoa_r+0x2e0>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	a36d      	add	r3, pc, #436	; (adr r3, 8007810 <_dtoa_r+0x2e8>)
 800765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765e:	f7f8 fe1d 	bl	800029c <__adddf3>
 8007662:	4606      	mov	r6, r0
 8007664:	4628      	mov	r0, r5
 8007666:	460f      	mov	r7, r1
 8007668:	f7f8 ff64 	bl	8000534 <__aeabi_i2d>
 800766c:	a36a      	add	r3, pc, #424	; (adr r3, 8007818 <_dtoa_r+0x2f0>)
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	f7f8 ffc9 	bl	8000608 <__aeabi_dmul>
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	f7f8 fe0d 	bl	800029c <__adddf3>
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7f9 fa6f 	bl	8000b68 <__aeabi_d2iz>
 800768a:	2200      	movs	r2, #0
 800768c:	4682      	mov	sl, r0
 800768e:	2300      	movs	r3, #0
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 fa2a 	bl	8000aec <__aeabi_dcmplt>
 8007698:	b148      	cbz	r0, 80076ae <_dtoa_r+0x186>
 800769a:	4650      	mov	r0, sl
 800769c:	f7f8 ff4a 	bl	8000534 <__aeabi_i2d>
 80076a0:	4632      	mov	r2, r6
 80076a2:	463b      	mov	r3, r7
 80076a4:	f7f9 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 80076a8:	b908      	cbnz	r0, 80076ae <_dtoa_r+0x186>
 80076aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ae:	f1ba 0f16 	cmp.w	sl, #22
 80076b2:	d854      	bhi.n	800775e <_dtoa_r+0x236>
 80076b4:	4b61      	ldr	r3, [pc, #388]	; (800783c <_dtoa_r+0x314>)
 80076b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80076ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80076c2:	f7f9 fa13 	bl	8000aec <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d04b      	beq.n	8007762 <_dtoa_r+0x23a>
 80076ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ce:	2300      	movs	r3, #0
 80076d0:	930e      	str	r3, [sp, #56]	; 0x38
 80076d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076d4:	1b5d      	subs	r5, r3, r5
 80076d6:	1e6b      	subs	r3, r5, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	bf43      	ittte	mi
 80076dc:	2300      	movmi	r3, #0
 80076de:	f1c5 0801 	rsbmi	r8, r5, #1
 80076e2:	9304      	strmi	r3, [sp, #16]
 80076e4:	f04f 0800 	movpl.w	r8, #0
 80076e8:	f1ba 0f00 	cmp.w	sl, #0
 80076ec:	db3b      	blt.n	8007766 <_dtoa_r+0x23e>
 80076ee:	9b04      	ldr	r3, [sp, #16]
 80076f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80076f4:	4453      	add	r3, sl
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	2300      	movs	r3, #0
 80076fa:	9306      	str	r3, [sp, #24]
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	2b09      	cmp	r3, #9
 8007700:	d869      	bhi.n	80077d6 <_dtoa_r+0x2ae>
 8007702:	2b05      	cmp	r3, #5
 8007704:	bfc4      	itt	gt
 8007706:	3b04      	subgt	r3, #4
 8007708:	9305      	strgt	r3, [sp, #20]
 800770a:	9b05      	ldr	r3, [sp, #20]
 800770c:	f1a3 0302 	sub.w	r3, r3, #2
 8007710:	bfcc      	ite	gt
 8007712:	2500      	movgt	r5, #0
 8007714:	2501      	movle	r5, #1
 8007716:	2b03      	cmp	r3, #3
 8007718:	d869      	bhi.n	80077ee <_dtoa_r+0x2c6>
 800771a:	e8df f003 	tbb	[pc, r3]
 800771e:	4e2c      	.short	0x4e2c
 8007720:	5a4c      	.short	0x5a4c
 8007722:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007726:	441d      	add	r5, r3
 8007728:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800772c:	2b20      	cmp	r3, #32
 800772e:	bfc1      	itttt	gt
 8007730:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007734:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007738:	fa09 f303 	lslgt.w	r3, r9, r3
 800773c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007740:	bfda      	itte	le
 8007742:	f1c3 0320 	rsble	r3, r3, #32
 8007746:	fa06 f003 	lslle.w	r0, r6, r3
 800774a:	4318      	orrgt	r0, r3
 800774c:	f7f8 fee2 	bl	8000514 <__aeabi_ui2d>
 8007750:	2301      	movs	r3, #1
 8007752:	4606      	mov	r6, r0
 8007754:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007758:	3d01      	subs	r5, #1
 800775a:	9310      	str	r3, [sp, #64]	; 0x40
 800775c:	e771      	b.n	8007642 <_dtoa_r+0x11a>
 800775e:	2301      	movs	r3, #1
 8007760:	e7b6      	b.n	80076d0 <_dtoa_r+0x1a8>
 8007762:	900e      	str	r0, [sp, #56]	; 0x38
 8007764:	e7b5      	b.n	80076d2 <_dtoa_r+0x1aa>
 8007766:	f1ca 0300 	rsb	r3, sl, #0
 800776a:	9306      	str	r3, [sp, #24]
 800776c:	2300      	movs	r3, #0
 800776e:	eba8 080a 	sub.w	r8, r8, sl
 8007772:	930d      	str	r3, [sp, #52]	; 0x34
 8007774:	e7c2      	b.n	80076fc <_dtoa_r+0x1d4>
 8007776:	2300      	movs	r3, #0
 8007778:	9308      	str	r3, [sp, #32]
 800777a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777c:	2b00      	cmp	r3, #0
 800777e:	dc39      	bgt.n	80077f4 <_dtoa_r+0x2cc>
 8007780:	f04f 0901 	mov.w	r9, #1
 8007784:	f8cd 9004 	str.w	r9, [sp, #4]
 8007788:	464b      	mov	r3, r9
 800778a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800778e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007790:	2200      	movs	r2, #0
 8007792:	6042      	str	r2, [r0, #4]
 8007794:	2204      	movs	r2, #4
 8007796:	f102 0614 	add.w	r6, r2, #20
 800779a:	429e      	cmp	r6, r3
 800779c:	6841      	ldr	r1, [r0, #4]
 800779e:	d92f      	bls.n	8007800 <_dtoa_r+0x2d8>
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fcc7 	bl	8008134 <_Balloc>
 80077a6:	9000      	str	r0, [sp, #0]
 80077a8:	2800      	cmp	r0, #0
 80077aa:	d14b      	bne.n	8007844 <_dtoa_r+0x31c>
 80077ac:	4b24      	ldr	r3, [pc, #144]	; (8007840 <_dtoa_r+0x318>)
 80077ae:	4602      	mov	r2, r0
 80077b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80077b4:	e6d1      	b.n	800755a <_dtoa_r+0x32>
 80077b6:	2301      	movs	r3, #1
 80077b8:	e7de      	b.n	8007778 <_dtoa_r+0x250>
 80077ba:	2300      	movs	r3, #0
 80077bc:	9308      	str	r3, [sp, #32]
 80077be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c0:	eb0a 0903 	add.w	r9, sl, r3
 80077c4:	f109 0301 	add.w	r3, r9, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	9301      	str	r3, [sp, #4]
 80077cc:	bfb8      	it	lt
 80077ce:	2301      	movlt	r3, #1
 80077d0:	e7dd      	b.n	800778e <_dtoa_r+0x266>
 80077d2:	2301      	movs	r3, #1
 80077d4:	e7f2      	b.n	80077bc <_dtoa_r+0x294>
 80077d6:	2501      	movs	r5, #1
 80077d8:	2300      	movs	r3, #0
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	9508      	str	r5, [sp, #32]
 80077de:	f04f 39ff 	mov.w	r9, #4294967295
 80077e2:	2200      	movs	r2, #0
 80077e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80077e8:	2312      	movs	r3, #18
 80077ea:	9209      	str	r2, [sp, #36]	; 0x24
 80077ec:	e7cf      	b.n	800778e <_dtoa_r+0x266>
 80077ee:	2301      	movs	r3, #1
 80077f0:	9308      	str	r3, [sp, #32]
 80077f2:	e7f4      	b.n	80077de <_dtoa_r+0x2b6>
 80077f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80077f8:	f8cd 9004 	str.w	r9, [sp, #4]
 80077fc:	464b      	mov	r3, r9
 80077fe:	e7c6      	b.n	800778e <_dtoa_r+0x266>
 8007800:	3101      	adds	r1, #1
 8007802:	6041      	str	r1, [r0, #4]
 8007804:	0052      	lsls	r2, r2, #1
 8007806:	e7c6      	b.n	8007796 <_dtoa_r+0x26e>
 8007808:	636f4361 	.word	0x636f4361
 800780c:	3fd287a7 	.word	0x3fd287a7
 8007810:	8b60c8b3 	.word	0x8b60c8b3
 8007814:	3fc68a28 	.word	0x3fc68a28
 8007818:	509f79fb 	.word	0x509f79fb
 800781c:	3fd34413 	.word	0x3fd34413
 8007820:	0800bd95 	.word	0x0800bd95
 8007824:	0800bdac 	.word	0x0800bdac
 8007828:	7ff00000 	.word	0x7ff00000
 800782c:	0800bd91 	.word	0x0800bd91
 8007830:	0800bd88 	.word	0x0800bd88
 8007834:	0800bd65 	.word	0x0800bd65
 8007838:	3ff80000 	.word	0x3ff80000
 800783c:	0800bea8 	.word	0x0800bea8
 8007840:	0800be0b 	.word	0x0800be0b
 8007844:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007846:	9a00      	ldr	r2, [sp, #0]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	9b01      	ldr	r3, [sp, #4]
 800784c:	2b0e      	cmp	r3, #14
 800784e:	f200 80ad 	bhi.w	80079ac <_dtoa_r+0x484>
 8007852:	2d00      	cmp	r5, #0
 8007854:	f000 80aa 	beq.w	80079ac <_dtoa_r+0x484>
 8007858:	f1ba 0f00 	cmp.w	sl, #0
 800785c:	dd36      	ble.n	80078cc <_dtoa_r+0x3a4>
 800785e:	4ac3      	ldr	r2, [pc, #780]	; (8007b6c <_dtoa_r+0x644>)
 8007860:	f00a 030f 	and.w	r3, sl, #15
 8007864:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007868:	ed93 7b00 	vldr	d7, [r3]
 800786c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007870:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007874:	eeb0 8a47 	vmov.f32	s16, s14
 8007878:	eef0 8a67 	vmov.f32	s17, s15
 800787c:	d016      	beq.n	80078ac <_dtoa_r+0x384>
 800787e:	4bbc      	ldr	r3, [pc, #752]	; (8007b70 <_dtoa_r+0x648>)
 8007880:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007884:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007888:	f7f8 ffe8 	bl	800085c <__aeabi_ddiv>
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	f007 070f 	and.w	r7, r7, #15
 8007894:	2503      	movs	r5, #3
 8007896:	4eb6      	ldr	r6, [pc, #728]	; (8007b70 <_dtoa_r+0x648>)
 8007898:	b957      	cbnz	r7, 80078b0 <_dtoa_r+0x388>
 800789a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800789e:	ec53 2b18 	vmov	r2, r3, d8
 80078a2:	f7f8 ffdb 	bl	800085c <__aeabi_ddiv>
 80078a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078aa:	e029      	b.n	8007900 <_dtoa_r+0x3d8>
 80078ac:	2502      	movs	r5, #2
 80078ae:	e7f2      	b.n	8007896 <_dtoa_r+0x36e>
 80078b0:	07f9      	lsls	r1, r7, #31
 80078b2:	d508      	bpl.n	80078c6 <_dtoa_r+0x39e>
 80078b4:	ec51 0b18 	vmov	r0, r1, d8
 80078b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80078bc:	f7f8 fea4 	bl	8000608 <__aeabi_dmul>
 80078c0:	ec41 0b18 	vmov	d8, r0, r1
 80078c4:	3501      	adds	r5, #1
 80078c6:	107f      	asrs	r7, r7, #1
 80078c8:	3608      	adds	r6, #8
 80078ca:	e7e5      	b.n	8007898 <_dtoa_r+0x370>
 80078cc:	f000 80a6 	beq.w	8007a1c <_dtoa_r+0x4f4>
 80078d0:	f1ca 0600 	rsb	r6, sl, #0
 80078d4:	4ba5      	ldr	r3, [pc, #660]	; (8007b6c <_dtoa_r+0x644>)
 80078d6:	4fa6      	ldr	r7, [pc, #664]	; (8007b70 <_dtoa_r+0x648>)
 80078d8:	f006 020f 	and.w	r2, r6, #15
 80078dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80078e8:	f7f8 fe8e 	bl	8000608 <__aeabi_dmul>
 80078ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f0:	1136      	asrs	r6, r6, #4
 80078f2:	2300      	movs	r3, #0
 80078f4:	2502      	movs	r5, #2
 80078f6:	2e00      	cmp	r6, #0
 80078f8:	f040 8085 	bne.w	8007a06 <_dtoa_r+0x4de>
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1d2      	bne.n	80078a6 <_dtoa_r+0x37e>
 8007900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 808c 	beq.w	8007a20 <_dtoa_r+0x4f8>
 8007908:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800790c:	4b99      	ldr	r3, [pc, #612]	; (8007b74 <_dtoa_r+0x64c>)
 800790e:	2200      	movs	r2, #0
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	f7f9 f8ea 	bl	8000aec <__aeabi_dcmplt>
 8007918:	2800      	cmp	r0, #0
 800791a:	f000 8081 	beq.w	8007a20 <_dtoa_r+0x4f8>
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d07d      	beq.n	8007a20 <_dtoa_r+0x4f8>
 8007924:	f1b9 0f00 	cmp.w	r9, #0
 8007928:	dd3c      	ble.n	80079a4 <_dtoa_r+0x47c>
 800792a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	2200      	movs	r2, #0
 8007932:	4b91      	ldr	r3, [pc, #580]	; (8007b78 <_dtoa_r+0x650>)
 8007934:	4630      	mov	r0, r6
 8007936:	4639      	mov	r1, r7
 8007938:	f7f8 fe66 	bl	8000608 <__aeabi_dmul>
 800793c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007940:	3501      	adds	r5, #1
 8007942:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007946:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800794a:	4628      	mov	r0, r5
 800794c:	f7f8 fdf2 	bl	8000534 <__aeabi_i2d>
 8007950:	4632      	mov	r2, r6
 8007952:	463b      	mov	r3, r7
 8007954:	f7f8 fe58 	bl	8000608 <__aeabi_dmul>
 8007958:	4b88      	ldr	r3, [pc, #544]	; (8007b7c <_dtoa_r+0x654>)
 800795a:	2200      	movs	r2, #0
 800795c:	f7f8 fc9e 	bl	800029c <__adddf3>
 8007960:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007968:	9303      	str	r3, [sp, #12]
 800796a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800796c:	2b00      	cmp	r3, #0
 800796e:	d15c      	bne.n	8007a2a <_dtoa_r+0x502>
 8007970:	4b83      	ldr	r3, [pc, #524]	; (8007b80 <_dtoa_r+0x658>)
 8007972:	2200      	movs	r2, #0
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f8 fc8e 	bl	8000298 <__aeabi_dsub>
 800797c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	f7f9 f8d0 	bl	8000b28 <__aeabi_dcmpgt>
 8007988:	2800      	cmp	r0, #0
 800798a:	f040 8296 	bne.w	8007eba <_dtoa_r+0x992>
 800798e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007992:	4630      	mov	r0, r6
 8007994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007998:	4639      	mov	r1, r7
 800799a:	f7f9 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	f040 8288 	bne.w	8007eb4 <_dtoa_r+0x98c>
 80079a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80079a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f2c0 8158 	blt.w	8007c64 <_dtoa_r+0x73c>
 80079b4:	f1ba 0f0e 	cmp.w	sl, #14
 80079b8:	f300 8154 	bgt.w	8007c64 <_dtoa_r+0x73c>
 80079bc:	4b6b      	ldr	r3, [pc, #428]	; (8007b6c <_dtoa_r+0x644>)
 80079be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f280 80e3 	bge.w	8007b94 <_dtoa_r+0x66c>
 80079ce:	9b01      	ldr	r3, [sp, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f300 80df 	bgt.w	8007b94 <_dtoa_r+0x66c>
 80079d6:	f040 826d 	bne.w	8007eb4 <_dtoa_r+0x98c>
 80079da:	4b69      	ldr	r3, [pc, #420]	; (8007b80 <_dtoa_r+0x658>)
 80079dc:	2200      	movs	r2, #0
 80079de:	4640      	mov	r0, r8
 80079e0:	4649      	mov	r1, r9
 80079e2:	f7f8 fe11 	bl	8000608 <__aeabi_dmul>
 80079e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ea:	f7f9 f893 	bl	8000b14 <__aeabi_dcmpge>
 80079ee:	9e01      	ldr	r6, [sp, #4]
 80079f0:	4637      	mov	r7, r6
 80079f2:	2800      	cmp	r0, #0
 80079f4:	f040 8243 	bne.w	8007e7e <_dtoa_r+0x956>
 80079f8:	9d00      	ldr	r5, [sp, #0]
 80079fa:	2331      	movs	r3, #49	; 0x31
 80079fc:	f805 3b01 	strb.w	r3, [r5], #1
 8007a00:	f10a 0a01 	add.w	sl, sl, #1
 8007a04:	e23f      	b.n	8007e86 <_dtoa_r+0x95e>
 8007a06:	07f2      	lsls	r2, r6, #31
 8007a08:	d505      	bpl.n	8007a16 <_dtoa_r+0x4ee>
 8007a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0e:	f7f8 fdfb 	bl	8000608 <__aeabi_dmul>
 8007a12:	3501      	adds	r5, #1
 8007a14:	2301      	movs	r3, #1
 8007a16:	1076      	asrs	r6, r6, #1
 8007a18:	3708      	adds	r7, #8
 8007a1a:	e76c      	b.n	80078f6 <_dtoa_r+0x3ce>
 8007a1c:	2502      	movs	r5, #2
 8007a1e:	e76f      	b.n	8007900 <_dtoa_r+0x3d8>
 8007a20:	9b01      	ldr	r3, [sp, #4]
 8007a22:	f8cd a01c 	str.w	sl, [sp, #28]
 8007a26:	930c      	str	r3, [sp, #48]	; 0x30
 8007a28:	e78d      	b.n	8007946 <_dtoa_r+0x41e>
 8007a2a:	9900      	ldr	r1, [sp, #0]
 8007a2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007a2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a30:	4b4e      	ldr	r3, [pc, #312]	; (8007b6c <_dtoa_r+0x644>)
 8007a32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a36:	4401      	add	r1, r0
 8007a38:	9102      	str	r1, [sp, #8]
 8007a3a:	9908      	ldr	r1, [sp, #32]
 8007a3c:	eeb0 8a47 	vmov.f32	s16, s14
 8007a40:	eef0 8a67 	vmov.f32	s17, s15
 8007a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a4c:	2900      	cmp	r1, #0
 8007a4e:	d045      	beq.n	8007adc <_dtoa_r+0x5b4>
 8007a50:	494c      	ldr	r1, [pc, #304]	; (8007b84 <_dtoa_r+0x65c>)
 8007a52:	2000      	movs	r0, #0
 8007a54:	f7f8 ff02 	bl	800085c <__aeabi_ddiv>
 8007a58:	ec53 2b18 	vmov	r2, r3, d8
 8007a5c:	f7f8 fc1c 	bl	8000298 <__aeabi_dsub>
 8007a60:	9d00      	ldr	r5, [sp, #0]
 8007a62:	ec41 0b18 	vmov	d8, r0, r1
 8007a66:	4639      	mov	r1, r7
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7f9 f87d 	bl	8000b68 <__aeabi_d2iz>
 8007a6e:	900c      	str	r0, [sp, #48]	; 0x30
 8007a70:	f7f8 fd60 	bl	8000534 <__aeabi_i2d>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	4639      	mov	r1, r7
 8007a7c:	f7f8 fc0c 	bl	8000298 <__aeabi_dsub>
 8007a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a82:	3330      	adds	r3, #48	; 0x30
 8007a84:	f805 3b01 	strb.w	r3, [r5], #1
 8007a88:	ec53 2b18 	vmov	r2, r3, d8
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	460f      	mov	r7, r1
 8007a90:	f7f9 f82c 	bl	8000aec <__aeabi_dcmplt>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d165      	bne.n	8007b64 <_dtoa_r+0x63c>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	4935      	ldr	r1, [pc, #212]	; (8007b74 <_dtoa_r+0x64c>)
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f7f8 fbfa 	bl	8000298 <__aeabi_dsub>
 8007aa4:	ec53 2b18 	vmov	r2, r3, d8
 8007aa8:	f7f9 f820 	bl	8000aec <__aeabi_dcmplt>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	f040 80b9 	bne.w	8007c24 <_dtoa_r+0x6fc>
 8007ab2:	9b02      	ldr	r3, [sp, #8]
 8007ab4:	429d      	cmp	r5, r3
 8007ab6:	f43f af75 	beq.w	80079a4 <_dtoa_r+0x47c>
 8007aba:	4b2f      	ldr	r3, [pc, #188]	; (8007b78 <_dtoa_r+0x650>)
 8007abc:	ec51 0b18 	vmov	r0, r1, d8
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f7f8 fda1 	bl	8000608 <__aeabi_dmul>
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <_dtoa_r+0x650>)
 8007ac8:	ec41 0b18 	vmov	d8, r0, r1
 8007acc:	2200      	movs	r2, #0
 8007ace:	4630      	mov	r0, r6
 8007ad0:	4639      	mov	r1, r7
 8007ad2:	f7f8 fd99 	bl	8000608 <__aeabi_dmul>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460f      	mov	r7, r1
 8007ada:	e7c4      	b.n	8007a66 <_dtoa_r+0x53e>
 8007adc:	ec51 0b17 	vmov	r0, r1, d7
 8007ae0:	f7f8 fd92 	bl	8000608 <__aeabi_dmul>
 8007ae4:	9b02      	ldr	r3, [sp, #8]
 8007ae6:	9d00      	ldr	r5, [sp, #0]
 8007ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aea:	ec41 0b18 	vmov	d8, r0, r1
 8007aee:	4639      	mov	r1, r7
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7f9 f839 	bl	8000b68 <__aeabi_d2iz>
 8007af6:	9011      	str	r0, [sp, #68]	; 0x44
 8007af8:	f7f8 fd1c 	bl	8000534 <__aeabi_i2d>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4630      	mov	r0, r6
 8007b02:	4639      	mov	r1, r7
 8007b04:	f7f8 fbc8 	bl	8000298 <__aeabi_dsub>
 8007b08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b0a:	3330      	adds	r3, #48	; 0x30
 8007b0c:	f805 3b01 	strb.w	r3, [r5], #1
 8007b10:	9b02      	ldr	r3, [sp, #8]
 8007b12:	429d      	cmp	r5, r3
 8007b14:	4606      	mov	r6, r0
 8007b16:	460f      	mov	r7, r1
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	d134      	bne.n	8007b88 <_dtoa_r+0x660>
 8007b1e:	4b19      	ldr	r3, [pc, #100]	; (8007b84 <_dtoa_r+0x65c>)
 8007b20:	ec51 0b18 	vmov	r0, r1, d8
 8007b24:	f7f8 fbba 	bl	800029c <__adddf3>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	4639      	mov	r1, r7
 8007b30:	f7f8 fffa 	bl	8000b28 <__aeabi_dcmpgt>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d175      	bne.n	8007c24 <_dtoa_r+0x6fc>
 8007b38:	ec53 2b18 	vmov	r2, r3, d8
 8007b3c:	4911      	ldr	r1, [pc, #68]	; (8007b84 <_dtoa_r+0x65c>)
 8007b3e:	2000      	movs	r0, #0
 8007b40:	f7f8 fbaa 	bl	8000298 <__aeabi_dsub>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	4630      	mov	r0, r6
 8007b4a:	4639      	mov	r1, r7
 8007b4c:	f7f8 ffce 	bl	8000aec <__aeabi_dcmplt>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	f43f af27 	beq.w	80079a4 <_dtoa_r+0x47c>
 8007b56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007b58:	1e6b      	subs	r3, r5, #1
 8007b5a:	930c      	str	r3, [sp, #48]	; 0x30
 8007b5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b60:	2b30      	cmp	r3, #48	; 0x30
 8007b62:	d0f8      	beq.n	8007b56 <_dtoa_r+0x62e>
 8007b64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007b68:	e04a      	b.n	8007c00 <_dtoa_r+0x6d8>
 8007b6a:	bf00      	nop
 8007b6c:	0800bea8 	.word	0x0800bea8
 8007b70:	0800be80 	.word	0x0800be80
 8007b74:	3ff00000 	.word	0x3ff00000
 8007b78:	40240000 	.word	0x40240000
 8007b7c:	401c0000 	.word	0x401c0000
 8007b80:	40140000 	.word	0x40140000
 8007b84:	3fe00000 	.word	0x3fe00000
 8007b88:	4baf      	ldr	r3, [pc, #700]	; (8007e48 <_dtoa_r+0x920>)
 8007b8a:	f7f8 fd3d 	bl	8000608 <__aeabi_dmul>
 8007b8e:	4606      	mov	r6, r0
 8007b90:	460f      	mov	r7, r1
 8007b92:	e7ac      	b.n	8007aee <_dtoa_r+0x5c6>
 8007b94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b98:	9d00      	ldr	r5, [sp, #0]
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	f7f8 fe5b 	bl	800085c <__aeabi_ddiv>
 8007ba6:	f7f8 ffdf 	bl	8000b68 <__aeabi_d2iz>
 8007baa:	9002      	str	r0, [sp, #8]
 8007bac:	f7f8 fcc2 	bl	8000534 <__aeabi_i2d>
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	464b      	mov	r3, r9
 8007bb4:	f7f8 fd28 	bl	8000608 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 fb6a 	bl	8000298 <__aeabi_dsub>
 8007bc4:	9e02      	ldr	r6, [sp, #8]
 8007bc6:	9f01      	ldr	r7, [sp, #4]
 8007bc8:	3630      	adds	r6, #48	; 0x30
 8007bca:	f805 6b01 	strb.w	r6, [r5], #1
 8007bce:	9e00      	ldr	r6, [sp, #0]
 8007bd0:	1bae      	subs	r6, r5, r6
 8007bd2:	42b7      	cmp	r7, r6
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	d137      	bne.n	8007c4a <_dtoa_r+0x722>
 8007bda:	f7f8 fb5f 	bl	800029c <__adddf3>
 8007bde:	4642      	mov	r2, r8
 8007be0:	464b      	mov	r3, r9
 8007be2:	4606      	mov	r6, r0
 8007be4:	460f      	mov	r7, r1
 8007be6:	f7f8 ff9f 	bl	8000b28 <__aeabi_dcmpgt>
 8007bea:	b9c8      	cbnz	r0, 8007c20 <_dtoa_r+0x6f8>
 8007bec:	4642      	mov	r2, r8
 8007bee:	464b      	mov	r3, r9
 8007bf0:	4630      	mov	r0, r6
 8007bf2:	4639      	mov	r1, r7
 8007bf4:	f7f8 ff70 	bl	8000ad8 <__aeabi_dcmpeq>
 8007bf8:	b110      	cbz	r0, 8007c00 <_dtoa_r+0x6d8>
 8007bfa:	9b02      	ldr	r3, [sp, #8]
 8007bfc:	07d9      	lsls	r1, r3, #31
 8007bfe:	d40f      	bmi.n	8007c20 <_dtoa_r+0x6f8>
 8007c00:	4620      	mov	r0, r4
 8007c02:	4659      	mov	r1, fp
 8007c04:	f000 fad6 	bl	80081b4 <_Bfree>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	702b      	strb	r3, [r5, #0]
 8007c0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c0e:	f10a 0001 	add.w	r0, sl, #1
 8007c12:	6018      	str	r0, [r3, #0]
 8007c14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	f43f acd8 	beq.w	80075cc <_dtoa_r+0xa4>
 8007c1c:	601d      	str	r5, [r3, #0]
 8007c1e:	e4d5      	b.n	80075cc <_dtoa_r+0xa4>
 8007c20:	f8cd a01c 	str.w	sl, [sp, #28]
 8007c24:	462b      	mov	r3, r5
 8007c26:	461d      	mov	r5, r3
 8007c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c2c:	2a39      	cmp	r2, #57	; 0x39
 8007c2e:	d108      	bne.n	8007c42 <_dtoa_r+0x71a>
 8007c30:	9a00      	ldr	r2, [sp, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d1f7      	bne.n	8007c26 <_dtoa_r+0x6fe>
 8007c36:	9a07      	ldr	r2, [sp, #28]
 8007c38:	9900      	ldr	r1, [sp, #0]
 8007c3a:	3201      	adds	r2, #1
 8007c3c:	9207      	str	r2, [sp, #28]
 8007c3e:	2230      	movs	r2, #48	; 0x30
 8007c40:	700a      	strb	r2, [r1, #0]
 8007c42:	781a      	ldrb	r2, [r3, #0]
 8007c44:	3201      	adds	r2, #1
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	e78c      	b.n	8007b64 <_dtoa_r+0x63c>
 8007c4a:	4b7f      	ldr	r3, [pc, #508]	; (8007e48 <_dtoa_r+0x920>)
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	f7f8 fcdb 	bl	8000608 <__aeabi_dmul>
 8007c52:	2200      	movs	r2, #0
 8007c54:	2300      	movs	r3, #0
 8007c56:	4606      	mov	r6, r0
 8007c58:	460f      	mov	r7, r1
 8007c5a:	f7f8 ff3d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d09b      	beq.n	8007b9a <_dtoa_r+0x672>
 8007c62:	e7cd      	b.n	8007c00 <_dtoa_r+0x6d8>
 8007c64:	9a08      	ldr	r2, [sp, #32]
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	f000 80c4 	beq.w	8007df4 <_dtoa_r+0x8cc>
 8007c6c:	9a05      	ldr	r2, [sp, #20]
 8007c6e:	2a01      	cmp	r2, #1
 8007c70:	f300 80a8 	bgt.w	8007dc4 <_dtoa_r+0x89c>
 8007c74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	f000 80a0 	beq.w	8007dbc <_dtoa_r+0x894>
 8007c7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c80:	9e06      	ldr	r6, [sp, #24]
 8007c82:	4645      	mov	r5, r8
 8007c84:	9a04      	ldr	r2, [sp, #16]
 8007c86:	2101      	movs	r1, #1
 8007c88:	441a      	add	r2, r3
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	4498      	add	r8, r3
 8007c8e:	9204      	str	r2, [sp, #16]
 8007c90:	f000 fb4c 	bl	800832c <__i2b>
 8007c94:	4607      	mov	r7, r0
 8007c96:	2d00      	cmp	r5, #0
 8007c98:	dd0b      	ble.n	8007cb2 <_dtoa_r+0x78a>
 8007c9a:	9b04      	ldr	r3, [sp, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd08      	ble.n	8007cb2 <_dtoa_r+0x78a>
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	9a04      	ldr	r2, [sp, #16]
 8007ca4:	bfa8      	it	ge
 8007ca6:	462b      	movge	r3, r5
 8007ca8:	eba8 0803 	sub.w	r8, r8, r3
 8007cac:	1aed      	subs	r5, r5, r3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	9304      	str	r3, [sp, #16]
 8007cb2:	9b06      	ldr	r3, [sp, #24]
 8007cb4:	b1fb      	cbz	r3, 8007cf6 <_dtoa_r+0x7ce>
 8007cb6:	9b08      	ldr	r3, [sp, #32]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 809f 	beq.w	8007dfc <_dtoa_r+0x8d4>
 8007cbe:	2e00      	cmp	r6, #0
 8007cc0:	dd11      	ble.n	8007ce6 <_dtoa_r+0x7be>
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4632      	mov	r2, r6
 8007cc6:	4620      	mov	r0, r4
 8007cc8:	f000 fbec 	bl	80084a4 <__pow5mult>
 8007ccc:	465a      	mov	r2, fp
 8007cce:	4601      	mov	r1, r0
 8007cd0:	4607      	mov	r7, r0
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 fb40 	bl	8008358 <__multiply>
 8007cd8:	4659      	mov	r1, fp
 8007cda:	9007      	str	r0, [sp, #28]
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f000 fa69 	bl	80081b4 <_Bfree>
 8007ce2:	9b07      	ldr	r3, [sp, #28]
 8007ce4:	469b      	mov	fp, r3
 8007ce6:	9b06      	ldr	r3, [sp, #24]
 8007ce8:	1b9a      	subs	r2, r3, r6
 8007cea:	d004      	beq.n	8007cf6 <_dtoa_r+0x7ce>
 8007cec:	4659      	mov	r1, fp
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f000 fbd8 	bl	80084a4 <__pow5mult>
 8007cf4:	4683      	mov	fp, r0
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f000 fb17 	bl	800832c <__i2b>
 8007cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	4606      	mov	r6, r0
 8007d04:	dd7c      	ble.n	8007e00 <_dtoa_r+0x8d8>
 8007d06:	461a      	mov	r2, r3
 8007d08:	4601      	mov	r1, r0
 8007d0a:	4620      	mov	r0, r4
 8007d0c:	f000 fbca 	bl	80084a4 <__pow5mult>
 8007d10:	9b05      	ldr	r3, [sp, #20]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	4606      	mov	r6, r0
 8007d16:	dd76      	ble.n	8007e06 <_dtoa_r+0x8de>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	6933      	ldr	r3, [r6, #16]
 8007d1e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d22:	6918      	ldr	r0, [r3, #16]
 8007d24:	f000 fab2 	bl	800828c <__hi0bits>
 8007d28:	f1c0 0020 	rsb	r0, r0, #32
 8007d2c:	9b04      	ldr	r3, [sp, #16]
 8007d2e:	4418      	add	r0, r3
 8007d30:	f010 001f 	ands.w	r0, r0, #31
 8007d34:	f000 8086 	beq.w	8007e44 <_dtoa_r+0x91c>
 8007d38:	f1c0 0320 	rsb	r3, r0, #32
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	dd7f      	ble.n	8007e40 <_dtoa_r+0x918>
 8007d40:	f1c0 001c 	rsb	r0, r0, #28
 8007d44:	9b04      	ldr	r3, [sp, #16]
 8007d46:	4403      	add	r3, r0
 8007d48:	4480      	add	r8, r0
 8007d4a:	4405      	add	r5, r0
 8007d4c:	9304      	str	r3, [sp, #16]
 8007d4e:	f1b8 0f00 	cmp.w	r8, #0
 8007d52:	dd05      	ble.n	8007d60 <_dtoa_r+0x838>
 8007d54:	4659      	mov	r1, fp
 8007d56:	4642      	mov	r2, r8
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f000 fbfd 	bl	8008558 <__lshift>
 8007d5e:	4683      	mov	fp, r0
 8007d60:	9b04      	ldr	r3, [sp, #16]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	dd05      	ble.n	8007d72 <_dtoa_r+0x84a>
 8007d66:	4631      	mov	r1, r6
 8007d68:	461a      	mov	r2, r3
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 fbf4 	bl	8008558 <__lshift>
 8007d70:	4606      	mov	r6, r0
 8007d72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d069      	beq.n	8007e4c <_dtoa_r+0x924>
 8007d78:	4631      	mov	r1, r6
 8007d7a:	4658      	mov	r0, fp
 8007d7c:	f000 fc58 	bl	8008630 <__mcmp>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	da63      	bge.n	8007e4c <_dtoa_r+0x924>
 8007d84:	2300      	movs	r3, #0
 8007d86:	4659      	mov	r1, fp
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4620      	mov	r0, r4
 8007d8c:	f000 fa34 	bl	80081f8 <__multadd>
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d96:	4683      	mov	fp, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f000 818f 	beq.w	80080bc <_dtoa_r+0xb94>
 8007d9e:	4639      	mov	r1, r7
 8007da0:	2300      	movs	r3, #0
 8007da2:	220a      	movs	r2, #10
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 fa27 	bl	80081f8 <__multadd>
 8007daa:	f1b9 0f00 	cmp.w	r9, #0
 8007dae:	4607      	mov	r7, r0
 8007db0:	f300 808e 	bgt.w	8007ed0 <_dtoa_r+0x9a8>
 8007db4:	9b05      	ldr	r3, [sp, #20]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	dc50      	bgt.n	8007e5c <_dtoa_r+0x934>
 8007dba:	e089      	b.n	8007ed0 <_dtoa_r+0x9a8>
 8007dbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007dbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dc2:	e75d      	b.n	8007c80 <_dtoa_r+0x758>
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	1e5e      	subs	r6, r3, #1
 8007dc8:	9b06      	ldr	r3, [sp, #24]
 8007dca:	42b3      	cmp	r3, r6
 8007dcc:	bfbf      	itttt	lt
 8007dce:	9b06      	ldrlt	r3, [sp, #24]
 8007dd0:	9606      	strlt	r6, [sp, #24]
 8007dd2:	1af2      	sublt	r2, r6, r3
 8007dd4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007dd6:	bfb6      	itet	lt
 8007dd8:	189b      	addlt	r3, r3, r2
 8007dda:	1b9e      	subge	r6, r3, r6
 8007ddc:	930d      	strlt	r3, [sp, #52]	; 0x34
 8007dde:	9b01      	ldr	r3, [sp, #4]
 8007de0:	bfb8      	it	lt
 8007de2:	2600      	movlt	r6, #0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bfb5      	itete	lt
 8007de8:	eba8 0503 	sublt.w	r5, r8, r3
 8007dec:	9b01      	ldrge	r3, [sp, #4]
 8007dee:	2300      	movlt	r3, #0
 8007df0:	4645      	movge	r5, r8
 8007df2:	e747      	b.n	8007c84 <_dtoa_r+0x75c>
 8007df4:	9e06      	ldr	r6, [sp, #24]
 8007df6:	9f08      	ldr	r7, [sp, #32]
 8007df8:	4645      	mov	r5, r8
 8007dfa:	e74c      	b.n	8007c96 <_dtoa_r+0x76e>
 8007dfc:	9a06      	ldr	r2, [sp, #24]
 8007dfe:	e775      	b.n	8007cec <_dtoa_r+0x7c4>
 8007e00:	9b05      	ldr	r3, [sp, #20]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	dc18      	bgt.n	8007e38 <_dtoa_r+0x910>
 8007e06:	9b02      	ldr	r3, [sp, #8]
 8007e08:	b9b3      	cbnz	r3, 8007e38 <_dtoa_r+0x910>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e10:	b9a3      	cbnz	r3, 8007e3c <_dtoa_r+0x914>
 8007e12:	9b03      	ldr	r3, [sp, #12]
 8007e14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e18:	0d1b      	lsrs	r3, r3, #20
 8007e1a:	051b      	lsls	r3, r3, #20
 8007e1c:	b12b      	cbz	r3, 8007e2a <_dtoa_r+0x902>
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3301      	adds	r3, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	f108 0801 	add.w	r8, r8, #1
 8007e28:	2301      	movs	r3, #1
 8007e2a:	9306      	str	r3, [sp, #24]
 8007e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f47f af74 	bne.w	8007d1c <_dtoa_r+0x7f4>
 8007e34:	2001      	movs	r0, #1
 8007e36:	e779      	b.n	8007d2c <_dtoa_r+0x804>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	e7f6      	b.n	8007e2a <_dtoa_r+0x902>
 8007e3c:	9b02      	ldr	r3, [sp, #8]
 8007e3e:	e7f4      	b.n	8007e2a <_dtoa_r+0x902>
 8007e40:	d085      	beq.n	8007d4e <_dtoa_r+0x826>
 8007e42:	4618      	mov	r0, r3
 8007e44:	301c      	adds	r0, #28
 8007e46:	e77d      	b.n	8007d44 <_dtoa_r+0x81c>
 8007e48:	40240000 	.word	0x40240000
 8007e4c:	9b01      	ldr	r3, [sp, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	dc38      	bgt.n	8007ec4 <_dtoa_r+0x99c>
 8007e52:	9b05      	ldr	r3, [sp, #20]
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	dd35      	ble.n	8007ec4 <_dtoa_r+0x99c>
 8007e58:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007e5c:	f1b9 0f00 	cmp.w	r9, #0
 8007e60:	d10d      	bne.n	8007e7e <_dtoa_r+0x956>
 8007e62:	4631      	mov	r1, r6
 8007e64:	464b      	mov	r3, r9
 8007e66:	2205      	movs	r2, #5
 8007e68:	4620      	mov	r0, r4
 8007e6a:	f000 f9c5 	bl	80081f8 <__multadd>
 8007e6e:	4601      	mov	r1, r0
 8007e70:	4606      	mov	r6, r0
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fbdc 	bl	8008630 <__mcmp>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f73f adbd 	bgt.w	80079f8 <_dtoa_r+0x4d0>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e80:	9d00      	ldr	r5, [sp, #0]
 8007e82:	ea6f 0a03 	mvn.w	sl, r3
 8007e86:	f04f 0800 	mov.w	r8, #0
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 f991 	bl	80081b4 <_Bfree>
 8007e92:	2f00      	cmp	r7, #0
 8007e94:	f43f aeb4 	beq.w	8007c00 <_dtoa_r+0x6d8>
 8007e98:	f1b8 0f00 	cmp.w	r8, #0
 8007e9c:	d005      	beq.n	8007eaa <_dtoa_r+0x982>
 8007e9e:	45b8      	cmp	r8, r7
 8007ea0:	d003      	beq.n	8007eaa <_dtoa_r+0x982>
 8007ea2:	4641      	mov	r1, r8
 8007ea4:	4620      	mov	r0, r4
 8007ea6:	f000 f985 	bl	80081b4 <_Bfree>
 8007eaa:	4639      	mov	r1, r7
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 f981 	bl	80081b4 <_Bfree>
 8007eb2:	e6a5      	b.n	8007c00 <_dtoa_r+0x6d8>
 8007eb4:	2600      	movs	r6, #0
 8007eb6:	4637      	mov	r7, r6
 8007eb8:	e7e1      	b.n	8007e7e <_dtoa_r+0x956>
 8007eba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ebc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007ec0:	4637      	mov	r7, r6
 8007ec2:	e599      	b.n	80079f8 <_dtoa_r+0x4d0>
 8007ec4:	9b08      	ldr	r3, [sp, #32]
 8007ec6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 80fd 	beq.w	80080ca <_dtoa_r+0xba2>
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	dd05      	ble.n	8007ee0 <_dtoa_r+0x9b8>
 8007ed4:	4639      	mov	r1, r7
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4620      	mov	r0, r4
 8007eda:	f000 fb3d 	bl	8008558 <__lshift>
 8007ede:	4607      	mov	r7, r0
 8007ee0:	9b06      	ldr	r3, [sp, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d05c      	beq.n	8007fa0 <_dtoa_r+0xa78>
 8007ee6:	6879      	ldr	r1, [r7, #4]
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 f923 	bl	8008134 <_Balloc>
 8007eee:	4605      	mov	r5, r0
 8007ef0:	b928      	cbnz	r0, 8007efe <_dtoa_r+0x9d6>
 8007ef2:	4b80      	ldr	r3, [pc, #512]	; (80080f4 <_dtoa_r+0xbcc>)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007efa:	f7ff bb2e 	b.w	800755a <_dtoa_r+0x32>
 8007efe:	693a      	ldr	r2, [r7, #16]
 8007f00:	3202      	adds	r2, #2
 8007f02:	0092      	lsls	r2, r2, #2
 8007f04:	f107 010c 	add.w	r1, r7, #12
 8007f08:	300c      	adds	r0, #12
 8007f0a:	f000 f905 	bl	8008118 <memcpy>
 8007f0e:	2201      	movs	r2, #1
 8007f10:	4629      	mov	r1, r5
 8007f12:	4620      	mov	r0, r4
 8007f14:	f000 fb20 	bl	8008558 <__lshift>
 8007f18:	9b00      	ldr	r3, [sp, #0]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	9b00      	ldr	r3, [sp, #0]
 8007f20:	444b      	add	r3, r9
 8007f22:	9307      	str	r3, [sp, #28]
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	46b8      	mov	r8, r7
 8007f2c:	9306      	str	r3, [sp, #24]
 8007f2e:	4607      	mov	r7, r0
 8007f30:	9b01      	ldr	r3, [sp, #4]
 8007f32:	4631      	mov	r1, r6
 8007f34:	3b01      	subs	r3, #1
 8007f36:	4658      	mov	r0, fp
 8007f38:	9302      	str	r3, [sp, #8]
 8007f3a:	f7ff fa67 	bl	800740c <quorem>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	3330      	adds	r3, #48	; 0x30
 8007f42:	9004      	str	r0, [sp, #16]
 8007f44:	4641      	mov	r1, r8
 8007f46:	4658      	mov	r0, fp
 8007f48:	9308      	str	r3, [sp, #32]
 8007f4a:	f000 fb71 	bl	8008630 <__mcmp>
 8007f4e:	463a      	mov	r2, r7
 8007f50:	4681      	mov	r9, r0
 8007f52:	4631      	mov	r1, r6
 8007f54:	4620      	mov	r0, r4
 8007f56:	f000 fb87 	bl	8008668 <__mdiff>
 8007f5a:	68c2      	ldr	r2, [r0, #12]
 8007f5c:	9b08      	ldr	r3, [sp, #32]
 8007f5e:	4605      	mov	r5, r0
 8007f60:	bb02      	cbnz	r2, 8007fa4 <_dtoa_r+0xa7c>
 8007f62:	4601      	mov	r1, r0
 8007f64:	4658      	mov	r0, fp
 8007f66:	f000 fb63 	bl	8008630 <__mcmp>
 8007f6a:	9b08      	ldr	r3, [sp, #32]
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	4629      	mov	r1, r5
 8007f70:	4620      	mov	r0, r4
 8007f72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007f76:	f000 f91d 	bl	80081b4 <_Bfree>
 8007f7a:	9b05      	ldr	r3, [sp, #20]
 8007f7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f7e:	9d01      	ldr	r5, [sp, #4]
 8007f80:	ea43 0102 	orr.w	r1, r3, r2
 8007f84:	9b06      	ldr	r3, [sp, #24]
 8007f86:	430b      	orrs	r3, r1
 8007f88:	9b08      	ldr	r3, [sp, #32]
 8007f8a:	d10d      	bne.n	8007fa8 <_dtoa_r+0xa80>
 8007f8c:	2b39      	cmp	r3, #57	; 0x39
 8007f8e:	d029      	beq.n	8007fe4 <_dtoa_r+0xabc>
 8007f90:	f1b9 0f00 	cmp.w	r9, #0
 8007f94:	dd01      	ble.n	8007f9a <_dtoa_r+0xa72>
 8007f96:	9b04      	ldr	r3, [sp, #16]
 8007f98:	3331      	adds	r3, #49	; 0x31
 8007f9a:	9a02      	ldr	r2, [sp, #8]
 8007f9c:	7013      	strb	r3, [r2, #0]
 8007f9e:	e774      	b.n	8007e8a <_dtoa_r+0x962>
 8007fa0:	4638      	mov	r0, r7
 8007fa2:	e7b9      	b.n	8007f18 <_dtoa_r+0x9f0>
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	e7e2      	b.n	8007f6e <_dtoa_r+0xa46>
 8007fa8:	f1b9 0f00 	cmp.w	r9, #0
 8007fac:	db06      	blt.n	8007fbc <_dtoa_r+0xa94>
 8007fae:	9905      	ldr	r1, [sp, #20]
 8007fb0:	ea41 0909 	orr.w	r9, r1, r9
 8007fb4:	9906      	ldr	r1, [sp, #24]
 8007fb6:	ea59 0101 	orrs.w	r1, r9, r1
 8007fba:	d120      	bne.n	8007ffe <_dtoa_r+0xad6>
 8007fbc:	2a00      	cmp	r2, #0
 8007fbe:	ddec      	ble.n	8007f9a <_dtoa_r+0xa72>
 8007fc0:	4659      	mov	r1, fp
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	9301      	str	r3, [sp, #4]
 8007fc8:	f000 fac6 	bl	8008558 <__lshift>
 8007fcc:	4631      	mov	r1, r6
 8007fce:	4683      	mov	fp, r0
 8007fd0:	f000 fb2e 	bl	8008630 <__mcmp>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	9b01      	ldr	r3, [sp, #4]
 8007fd8:	dc02      	bgt.n	8007fe0 <_dtoa_r+0xab8>
 8007fda:	d1de      	bne.n	8007f9a <_dtoa_r+0xa72>
 8007fdc:	07da      	lsls	r2, r3, #31
 8007fde:	d5dc      	bpl.n	8007f9a <_dtoa_r+0xa72>
 8007fe0:	2b39      	cmp	r3, #57	; 0x39
 8007fe2:	d1d8      	bne.n	8007f96 <_dtoa_r+0xa6e>
 8007fe4:	9a02      	ldr	r2, [sp, #8]
 8007fe6:	2339      	movs	r3, #57	; 0x39
 8007fe8:	7013      	strb	r3, [r2, #0]
 8007fea:	462b      	mov	r3, r5
 8007fec:	461d      	mov	r5, r3
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ff4:	2a39      	cmp	r2, #57	; 0x39
 8007ff6:	d050      	beq.n	800809a <_dtoa_r+0xb72>
 8007ff8:	3201      	adds	r2, #1
 8007ffa:	701a      	strb	r2, [r3, #0]
 8007ffc:	e745      	b.n	8007e8a <_dtoa_r+0x962>
 8007ffe:	2a00      	cmp	r2, #0
 8008000:	dd03      	ble.n	800800a <_dtoa_r+0xae2>
 8008002:	2b39      	cmp	r3, #57	; 0x39
 8008004:	d0ee      	beq.n	8007fe4 <_dtoa_r+0xabc>
 8008006:	3301      	adds	r3, #1
 8008008:	e7c7      	b.n	8007f9a <_dtoa_r+0xa72>
 800800a:	9a01      	ldr	r2, [sp, #4]
 800800c:	9907      	ldr	r1, [sp, #28]
 800800e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008012:	428a      	cmp	r2, r1
 8008014:	d02a      	beq.n	800806c <_dtoa_r+0xb44>
 8008016:	4659      	mov	r1, fp
 8008018:	2300      	movs	r3, #0
 800801a:	220a      	movs	r2, #10
 800801c:	4620      	mov	r0, r4
 800801e:	f000 f8eb 	bl	80081f8 <__multadd>
 8008022:	45b8      	cmp	r8, r7
 8008024:	4683      	mov	fp, r0
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	f04f 020a 	mov.w	r2, #10
 800802e:	4641      	mov	r1, r8
 8008030:	4620      	mov	r0, r4
 8008032:	d107      	bne.n	8008044 <_dtoa_r+0xb1c>
 8008034:	f000 f8e0 	bl	80081f8 <__multadd>
 8008038:	4680      	mov	r8, r0
 800803a:	4607      	mov	r7, r0
 800803c:	9b01      	ldr	r3, [sp, #4]
 800803e:	3301      	adds	r3, #1
 8008040:	9301      	str	r3, [sp, #4]
 8008042:	e775      	b.n	8007f30 <_dtoa_r+0xa08>
 8008044:	f000 f8d8 	bl	80081f8 <__multadd>
 8008048:	4639      	mov	r1, r7
 800804a:	4680      	mov	r8, r0
 800804c:	2300      	movs	r3, #0
 800804e:	220a      	movs	r2, #10
 8008050:	4620      	mov	r0, r4
 8008052:	f000 f8d1 	bl	80081f8 <__multadd>
 8008056:	4607      	mov	r7, r0
 8008058:	e7f0      	b.n	800803c <_dtoa_r+0xb14>
 800805a:	f1b9 0f00 	cmp.w	r9, #0
 800805e:	9a00      	ldr	r2, [sp, #0]
 8008060:	bfcc      	ite	gt
 8008062:	464d      	movgt	r5, r9
 8008064:	2501      	movle	r5, #1
 8008066:	4415      	add	r5, r2
 8008068:	f04f 0800 	mov.w	r8, #0
 800806c:	4659      	mov	r1, fp
 800806e:	2201      	movs	r2, #1
 8008070:	4620      	mov	r0, r4
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	f000 fa70 	bl	8008558 <__lshift>
 8008078:	4631      	mov	r1, r6
 800807a:	4683      	mov	fp, r0
 800807c:	f000 fad8 	bl	8008630 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	dcb2      	bgt.n	8007fea <_dtoa_r+0xac2>
 8008084:	d102      	bne.n	800808c <_dtoa_r+0xb64>
 8008086:	9b01      	ldr	r3, [sp, #4]
 8008088:	07db      	lsls	r3, r3, #31
 800808a:	d4ae      	bmi.n	8007fea <_dtoa_r+0xac2>
 800808c:	462b      	mov	r3, r5
 800808e:	461d      	mov	r5, r3
 8008090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008094:	2a30      	cmp	r2, #48	; 0x30
 8008096:	d0fa      	beq.n	800808e <_dtoa_r+0xb66>
 8008098:	e6f7      	b.n	8007e8a <_dtoa_r+0x962>
 800809a:	9a00      	ldr	r2, [sp, #0]
 800809c:	429a      	cmp	r2, r3
 800809e:	d1a5      	bne.n	8007fec <_dtoa_r+0xac4>
 80080a0:	f10a 0a01 	add.w	sl, sl, #1
 80080a4:	2331      	movs	r3, #49	; 0x31
 80080a6:	e779      	b.n	8007f9c <_dtoa_r+0xa74>
 80080a8:	4b13      	ldr	r3, [pc, #76]	; (80080f8 <_dtoa_r+0xbd0>)
 80080aa:	f7ff baaf 	b.w	800760c <_dtoa_r+0xe4>
 80080ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f47f aa86 	bne.w	80075c2 <_dtoa_r+0x9a>
 80080b6:	4b11      	ldr	r3, [pc, #68]	; (80080fc <_dtoa_r+0xbd4>)
 80080b8:	f7ff baa8 	b.w	800760c <_dtoa_r+0xe4>
 80080bc:	f1b9 0f00 	cmp.w	r9, #0
 80080c0:	dc03      	bgt.n	80080ca <_dtoa_r+0xba2>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	2b02      	cmp	r3, #2
 80080c6:	f73f aec9 	bgt.w	8007e5c <_dtoa_r+0x934>
 80080ca:	9d00      	ldr	r5, [sp, #0]
 80080cc:	4631      	mov	r1, r6
 80080ce:	4658      	mov	r0, fp
 80080d0:	f7ff f99c 	bl	800740c <quorem>
 80080d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80080d8:	f805 3b01 	strb.w	r3, [r5], #1
 80080dc:	9a00      	ldr	r2, [sp, #0]
 80080de:	1aaa      	subs	r2, r5, r2
 80080e0:	4591      	cmp	r9, r2
 80080e2:	ddba      	ble.n	800805a <_dtoa_r+0xb32>
 80080e4:	4659      	mov	r1, fp
 80080e6:	2300      	movs	r3, #0
 80080e8:	220a      	movs	r2, #10
 80080ea:	4620      	mov	r0, r4
 80080ec:	f000 f884 	bl	80081f8 <__multadd>
 80080f0:	4683      	mov	fp, r0
 80080f2:	e7eb      	b.n	80080cc <_dtoa_r+0xba4>
 80080f4:	0800be0b 	.word	0x0800be0b
 80080f8:	0800bd64 	.word	0x0800bd64
 80080fc:	0800bd88 	.word	0x0800bd88

08008100 <_localeconv_r>:
 8008100:	4800      	ldr	r0, [pc, #0]	; (8008104 <_localeconv_r+0x4>)
 8008102:	4770      	bx	lr
 8008104:	20000260 	.word	0x20000260

08008108 <malloc>:
 8008108:	4b02      	ldr	r3, [pc, #8]	; (8008114 <malloc+0xc>)
 800810a:	4601      	mov	r1, r0
 800810c:	6818      	ldr	r0, [r3, #0]
 800810e:	f000 bbef 	b.w	80088f0 <_malloc_r>
 8008112:	bf00      	nop
 8008114:	2000010c 	.word	0x2000010c

08008118 <memcpy>:
 8008118:	440a      	add	r2, r1
 800811a:	4291      	cmp	r1, r2
 800811c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008120:	d100      	bne.n	8008124 <memcpy+0xc>
 8008122:	4770      	bx	lr
 8008124:	b510      	push	{r4, lr}
 8008126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800812a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800812e:	4291      	cmp	r1, r2
 8008130:	d1f9      	bne.n	8008126 <memcpy+0xe>
 8008132:	bd10      	pop	{r4, pc}

08008134 <_Balloc>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008138:	4604      	mov	r4, r0
 800813a:	460d      	mov	r5, r1
 800813c:	b976      	cbnz	r6, 800815c <_Balloc+0x28>
 800813e:	2010      	movs	r0, #16
 8008140:	f7ff ffe2 	bl	8008108 <malloc>
 8008144:	4602      	mov	r2, r0
 8008146:	6260      	str	r0, [r4, #36]	; 0x24
 8008148:	b920      	cbnz	r0, 8008154 <_Balloc+0x20>
 800814a:	4b18      	ldr	r3, [pc, #96]	; (80081ac <_Balloc+0x78>)
 800814c:	4818      	ldr	r0, [pc, #96]	; (80081b0 <_Balloc+0x7c>)
 800814e:	2166      	movs	r1, #102	; 0x66
 8008150:	f000 fd94 	bl	8008c7c <__assert_func>
 8008154:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008158:	6006      	str	r6, [r0, #0]
 800815a:	60c6      	str	r6, [r0, #12]
 800815c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800815e:	68f3      	ldr	r3, [r6, #12]
 8008160:	b183      	cbz	r3, 8008184 <_Balloc+0x50>
 8008162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800816a:	b9b8      	cbnz	r0, 800819c <_Balloc+0x68>
 800816c:	2101      	movs	r1, #1
 800816e:	fa01 f605 	lsl.w	r6, r1, r5
 8008172:	1d72      	adds	r2, r6, #5
 8008174:	0092      	lsls	r2, r2, #2
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fb5a 	bl	8008830 <_calloc_r>
 800817c:	b160      	cbz	r0, 8008198 <_Balloc+0x64>
 800817e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008182:	e00e      	b.n	80081a2 <_Balloc+0x6e>
 8008184:	2221      	movs	r2, #33	; 0x21
 8008186:	2104      	movs	r1, #4
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fb51 	bl	8008830 <_calloc_r>
 800818e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008190:	60f0      	str	r0, [r6, #12]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e4      	bne.n	8008162 <_Balloc+0x2e>
 8008198:	2000      	movs	r0, #0
 800819a:	bd70      	pop	{r4, r5, r6, pc}
 800819c:	6802      	ldr	r2, [r0, #0]
 800819e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081a2:	2300      	movs	r3, #0
 80081a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081a8:	e7f7      	b.n	800819a <_Balloc+0x66>
 80081aa:	bf00      	nop
 80081ac:	0800bd95 	.word	0x0800bd95
 80081b0:	0800be1c 	.word	0x0800be1c

080081b4 <_Bfree>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80081b8:	4605      	mov	r5, r0
 80081ba:	460c      	mov	r4, r1
 80081bc:	b976      	cbnz	r6, 80081dc <_Bfree+0x28>
 80081be:	2010      	movs	r0, #16
 80081c0:	f7ff ffa2 	bl	8008108 <malloc>
 80081c4:	4602      	mov	r2, r0
 80081c6:	6268      	str	r0, [r5, #36]	; 0x24
 80081c8:	b920      	cbnz	r0, 80081d4 <_Bfree+0x20>
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <_Bfree+0x3c>)
 80081cc:	4809      	ldr	r0, [pc, #36]	; (80081f4 <_Bfree+0x40>)
 80081ce:	218a      	movs	r1, #138	; 0x8a
 80081d0:	f000 fd54 	bl	8008c7c <__assert_func>
 80081d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081d8:	6006      	str	r6, [r0, #0]
 80081da:	60c6      	str	r6, [r0, #12]
 80081dc:	b13c      	cbz	r4, 80081ee <_Bfree+0x3a>
 80081de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081e8:	6021      	str	r1, [r4, #0]
 80081ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	0800bd95 	.word	0x0800bd95
 80081f4:	0800be1c 	.word	0x0800be1c

080081f8 <__multadd>:
 80081f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081fc:	690e      	ldr	r6, [r1, #16]
 80081fe:	4607      	mov	r7, r0
 8008200:	4698      	mov	r8, r3
 8008202:	460c      	mov	r4, r1
 8008204:	f101 0014 	add.w	r0, r1, #20
 8008208:	2300      	movs	r3, #0
 800820a:	6805      	ldr	r5, [r0, #0]
 800820c:	b2a9      	uxth	r1, r5
 800820e:	fb02 8101 	mla	r1, r2, r1, r8
 8008212:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008216:	0c2d      	lsrs	r5, r5, #16
 8008218:	fb02 c505 	mla	r5, r2, r5, ip
 800821c:	b289      	uxth	r1, r1
 800821e:	3301      	adds	r3, #1
 8008220:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008224:	429e      	cmp	r6, r3
 8008226:	f840 1b04 	str.w	r1, [r0], #4
 800822a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800822e:	dcec      	bgt.n	800820a <__multadd+0x12>
 8008230:	f1b8 0f00 	cmp.w	r8, #0
 8008234:	d022      	beq.n	800827c <__multadd+0x84>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	42b3      	cmp	r3, r6
 800823a:	dc19      	bgt.n	8008270 <__multadd+0x78>
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	4638      	mov	r0, r7
 8008240:	3101      	adds	r1, #1
 8008242:	f7ff ff77 	bl	8008134 <_Balloc>
 8008246:	4605      	mov	r5, r0
 8008248:	b928      	cbnz	r0, 8008256 <__multadd+0x5e>
 800824a:	4602      	mov	r2, r0
 800824c:	4b0d      	ldr	r3, [pc, #52]	; (8008284 <__multadd+0x8c>)
 800824e:	480e      	ldr	r0, [pc, #56]	; (8008288 <__multadd+0x90>)
 8008250:	21b5      	movs	r1, #181	; 0xb5
 8008252:	f000 fd13 	bl	8008c7c <__assert_func>
 8008256:	6922      	ldr	r2, [r4, #16]
 8008258:	3202      	adds	r2, #2
 800825a:	f104 010c 	add.w	r1, r4, #12
 800825e:	0092      	lsls	r2, r2, #2
 8008260:	300c      	adds	r0, #12
 8008262:	f7ff ff59 	bl	8008118 <memcpy>
 8008266:	4621      	mov	r1, r4
 8008268:	4638      	mov	r0, r7
 800826a:	f7ff ffa3 	bl	80081b4 <_Bfree>
 800826e:	462c      	mov	r4, r5
 8008270:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008274:	3601      	adds	r6, #1
 8008276:	f8c3 8014 	str.w	r8, [r3, #20]
 800827a:	6126      	str	r6, [r4, #16]
 800827c:	4620      	mov	r0, r4
 800827e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008282:	bf00      	nop
 8008284:	0800be0b 	.word	0x0800be0b
 8008288:	0800be1c 	.word	0x0800be1c

0800828c <__hi0bits>:
 800828c:	0c03      	lsrs	r3, r0, #16
 800828e:	041b      	lsls	r3, r3, #16
 8008290:	b9d3      	cbnz	r3, 80082c8 <__hi0bits+0x3c>
 8008292:	0400      	lsls	r0, r0, #16
 8008294:	2310      	movs	r3, #16
 8008296:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800829a:	bf04      	itt	eq
 800829c:	0200      	lsleq	r0, r0, #8
 800829e:	3308      	addeq	r3, #8
 80082a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082a4:	bf04      	itt	eq
 80082a6:	0100      	lsleq	r0, r0, #4
 80082a8:	3304      	addeq	r3, #4
 80082aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082ae:	bf04      	itt	eq
 80082b0:	0080      	lsleq	r0, r0, #2
 80082b2:	3302      	addeq	r3, #2
 80082b4:	2800      	cmp	r0, #0
 80082b6:	db05      	blt.n	80082c4 <__hi0bits+0x38>
 80082b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082bc:	f103 0301 	add.w	r3, r3, #1
 80082c0:	bf08      	it	eq
 80082c2:	2320      	moveq	r3, #32
 80082c4:	4618      	mov	r0, r3
 80082c6:	4770      	bx	lr
 80082c8:	2300      	movs	r3, #0
 80082ca:	e7e4      	b.n	8008296 <__hi0bits+0xa>

080082cc <__lo0bits>:
 80082cc:	6803      	ldr	r3, [r0, #0]
 80082ce:	f013 0207 	ands.w	r2, r3, #7
 80082d2:	4601      	mov	r1, r0
 80082d4:	d00b      	beq.n	80082ee <__lo0bits+0x22>
 80082d6:	07da      	lsls	r2, r3, #31
 80082d8:	d424      	bmi.n	8008324 <__lo0bits+0x58>
 80082da:	0798      	lsls	r0, r3, #30
 80082dc:	bf49      	itett	mi
 80082de:	085b      	lsrmi	r3, r3, #1
 80082e0:	089b      	lsrpl	r3, r3, #2
 80082e2:	2001      	movmi	r0, #1
 80082e4:	600b      	strmi	r3, [r1, #0]
 80082e6:	bf5c      	itt	pl
 80082e8:	600b      	strpl	r3, [r1, #0]
 80082ea:	2002      	movpl	r0, #2
 80082ec:	4770      	bx	lr
 80082ee:	b298      	uxth	r0, r3
 80082f0:	b9b0      	cbnz	r0, 8008320 <__lo0bits+0x54>
 80082f2:	0c1b      	lsrs	r3, r3, #16
 80082f4:	2010      	movs	r0, #16
 80082f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80082fa:	bf04      	itt	eq
 80082fc:	0a1b      	lsreq	r3, r3, #8
 80082fe:	3008      	addeq	r0, #8
 8008300:	071a      	lsls	r2, r3, #28
 8008302:	bf04      	itt	eq
 8008304:	091b      	lsreq	r3, r3, #4
 8008306:	3004      	addeq	r0, #4
 8008308:	079a      	lsls	r2, r3, #30
 800830a:	bf04      	itt	eq
 800830c:	089b      	lsreq	r3, r3, #2
 800830e:	3002      	addeq	r0, #2
 8008310:	07da      	lsls	r2, r3, #31
 8008312:	d403      	bmi.n	800831c <__lo0bits+0x50>
 8008314:	085b      	lsrs	r3, r3, #1
 8008316:	f100 0001 	add.w	r0, r0, #1
 800831a:	d005      	beq.n	8008328 <__lo0bits+0x5c>
 800831c:	600b      	str	r3, [r1, #0]
 800831e:	4770      	bx	lr
 8008320:	4610      	mov	r0, r2
 8008322:	e7e8      	b.n	80082f6 <__lo0bits+0x2a>
 8008324:	2000      	movs	r0, #0
 8008326:	4770      	bx	lr
 8008328:	2020      	movs	r0, #32
 800832a:	4770      	bx	lr

0800832c <__i2b>:
 800832c:	b510      	push	{r4, lr}
 800832e:	460c      	mov	r4, r1
 8008330:	2101      	movs	r1, #1
 8008332:	f7ff feff 	bl	8008134 <_Balloc>
 8008336:	4602      	mov	r2, r0
 8008338:	b928      	cbnz	r0, 8008346 <__i2b+0x1a>
 800833a:	4b05      	ldr	r3, [pc, #20]	; (8008350 <__i2b+0x24>)
 800833c:	4805      	ldr	r0, [pc, #20]	; (8008354 <__i2b+0x28>)
 800833e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008342:	f000 fc9b 	bl	8008c7c <__assert_func>
 8008346:	2301      	movs	r3, #1
 8008348:	6144      	str	r4, [r0, #20]
 800834a:	6103      	str	r3, [r0, #16]
 800834c:	bd10      	pop	{r4, pc}
 800834e:	bf00      	nop
 8008350:	0800be0b 	.word	0x0800be0b
 8008354:	0800be1c 	.word	0x0800be1c

08008358 <__multiply>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4614      	mov	r4, r2
 800835e:	690a      	ldr	r2, [r1, #16]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	429a      	cmp	r2, r3
 8008364:	bfb8      	it	lt
 8008366:	460b      	movlt	r3, r1
 8008368:	460d      	mov	r5, r1
 800836a:	bfbc      	itt	lt
 800836c:	4625      	movlt	r5, r4
 800836e:	461c      	movlt	r4, r3
 8008370:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008374:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008378:	68ab      	ldr	r3, [r5, #8]
 800837a:	6869      	ldr	r1, [r5, #4]
 800837c:	eb0a 0709 	add.w	r7, sl, r9
 8008380:	42bb      	cmp	r3, r7
 8008382:	b085      	sub	sp, #20
 8008384:	bfb8      	it	lt
 8008386:	3101      	addlt	r1, #1
 8008388:	f7ff fed4 	bl	8008134 <_Balloc>
 800838c:	b930      	cbnz	r0, 800839c <__multiply+0x44>
 800838e:	4602      	mov	r2, r0
 8008390:	4b42      	ldr	r3, [pc, #264]	; (800849c <__multiply+0x144>)
 8008392:	4843      	ldr	r0, [pc, #268]	; (80084a0 <__multiply+0x148>)
 8008394:	f240 115d 	movw	r1, #349	; 0x15d
 8008398:	f000 fc70 	bl	8008c7c <__assert_func>
 800839c:	f100 0614 	add.w	r6, r0, #20
 80083a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80083a4:	4633      	mov	r3, r6
 80083a6:	2200      	movs	r2, #0
 80083a8:	4543      	cmp	r3, r8
 80083aa:	d31e      	bcc.n	80083ea <__multiply+0x92>
 80083ac:	f105 0c14 	add.w	ip, r5, #20
 80083b0:	f104 0314 	add.w	r3, r4, #20
 80083b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80083b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80083bc:	9202      	str	r2, [sp, #8]
 80083be:	ebac 0205 	sub.w	r2, ip, r5
 80083c2:	3a15      	subs	r2, #21
 80083c4:	f022 0203 	bic.w	r2, r2, #3
 80083c8:	3204      	adds	r2, #4
 80083ca:	f105 0115 	add.w	r1, r5, #21
 80083ce:	458c      	cmp	ip, r1
 80083d0:	bf38      	it	cc
 80083d2:	2204      	movcc	r2, #4
 80083d4:	9201      	str	r2, [sp, #4]
 80083d6:	9a02      	ldr	r2, [sp, #8]
 80083d8:	9303      	str	r3, [sp, #12]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d808      	bhi.n	80083f0 <__multiply+0x98>
 80083de:	2f00      	cmp	r7, #0
 80083e0:	dc55      	bgt.n	800848e <__multiply+0x136>
 80083e2:	6107      	str	r7, [r0, #16]
 80083e4:	b005      	add	sp, #20
 80083e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ea:	f843 2b04 	str.w	r2, [r3], #4
 80083ee:	e7db      	b.n	80083a8 <__multiply+0x50>
 80083f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80083f4:	f1ba 0f00 	cmp.w	sl, #0
 80083f8:	d020      	beq.n	800843c <__multiply+0xe4>
 80083fa:	f105 0e14 	add.w	lr, r5, #20
 80083fe:	46b1      	mov	r9, r6
 8008400:	2200      	movs	r2, #0
 8008402:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008406:	f8d9 b000 	ldr.w	fp, [r9]
 800840a:	b2a1      	uxth	r1, r4
 800840c:	fa1f fb8b 	uxth.w	fp, fp
 8008410:	fb0a b101 	mla	r1, sl, r1, fp
 8008414:	4411      	add	r1, r2
 8008416:	f8d9 2000 	ldr.w	r2, [r9]
 800841a:	0c24      	lsrs	r4, r4, #16
 800841c:	0c12      	lsrs	r2, r2, #16
 800841e:	fb0a 2404 	mla	r4, sl, r4, r2
 8008422:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008426:	b289      	uxth	r1, r1
 8008428:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800842c:	45f4      	cmp	ip, lr
 800842e:	f849 1b04 	str.w	r1, [r9], #4
 8008432:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008436:	d8e4      	bhi.n	8008402 <__multiply+0xaa>
 8008438:	9901      	ldr	r1, [sp, #4]
 800843a:	5072      	str	r2, [r6, r1]
 800843c:	9a03      	ldr	r2, [sp, #12]
 800843e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008442:	3304      	adds	r3, #4
 8008444:	f1b9 0f00 	cmp.w	r9, #0
 8008448:	d01f      	beq.n	800848a <__multiply+0x132>
 800844a:	6834      	ldr	r4, [r6, #0]
 800844c:	f105 0114 	add.w	r1, r5, #20
 8008450:	46b6      	mov	lr, r6
 8008452:	f04f 0a00 	mov.w	sl, #0
 8008456:	880a      	ldrh	r2, [r1, #0]
 8008458:	f8be b002 	ldrh.w	fp, [lr, #2]
 800845c:	fb09 b202 	mla	r2, r9, r2, fp
 8008460:	4492      	add	sl, r2
 8008462:	b2a4      	uxth	r4, r4
 8008464:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008468:	f84e 4b04 	str.w	r4, [lr], #4
 800846c:	f851 4b04 	ldr.w	r4, [r1], #4
 8008470:	f8be 2000 	ldrh.w	r2, [lr]
 8008474:	0c24      	lsrs	r4, r4, #16
 8008476:	fb09 2404 	mla	r4, r9, r4, r2
 800847a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800847e:	458c      	cmp	ip, r1
 8008480:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008484:	d8e7      	bhi.n	8008456 <__multiply+0xfe>
 8008486:	9a01      	ldr	r2, [sp, #4]
 8008488:	50b4      	str	r4, [r6, r2]
 800848a:	3604      	adds	r6, #4
 800848c:	e7a3      	b.n	80083d6 <__multiply+0x7e>
 800848e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1a5      	bne.n	80083e2 <__multiply+0x8a>
 8008496:	3f01      	subs	r7, #1
 8008498:	e7a1      	b.n	80083de <__multiply+0x86>
 800849a:	bf00      	nop
 800849c:	0800be0b 	.word	0x0800be0b
 80084a0:	0800be1c 	.word	0x0800be1c

080084a4 <__pow5mult>:
 80084a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a8:	4615      	mov	r5, r2
 80084aa:	f012 0203 	ands.w	r2, r2, #3
 80084ae:	4606      	mov	r6, r0
 80084b0:	460f      	mov	r7, r1
 80084b2:	d007      	beq.n	80084c4 <__pow5mult+0x20>
 80084b4:	4c25      	ldr	r4, [pc, #148]	; (800854c <__pow5mult+0xa8>)
 80084b6:	3a01      	subs	r2, #1
 80084b8:	2300      	movs	r3, #0
 80084ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084be:	f7ff fe9b 	bl	80081f8 <__multadd>
 80084c2:	4607      	mov	r7, r0
 80084c4:	10ad      	asrs	r5, r5, #2
 80084c6:	d03d      	beq.n	8008544 <__pow5mult+0xa0>
 80084c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084ca:	b97c      	cbnz	r4, 80084ec <__pow5mult+0x48>
 80084cc:	2010      	movs	r0, #16
 80084ce:	f7ff fe1b 	bl	8008108 <malloc>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6270      	str	r0, [r6, #36]	; 0x24
 80084d6:	b928      	cbnz	r0, 80084e4 <__pow5mult+0x40>
 80084d8:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <__pow5mult+0xac>)
 80084da:	481e      	ldr	r0, [pc, #120]	; (8008554 <__pow5mult+0xb0>)
 80084dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084e0:	f000 fbcc 	bl	8008c7c <__assert_func>
 80084e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084e8:	6004      	str	r4, [r0, #0]
 80084ea:	60c4      	str	r4, [r0, #12]
 80084ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80084f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084f4:	b94c      	cbnz	r4, 800850a <__pow5mult+0x66>
 80084f6:	f240 2171 	movw	r1, #625	; 0x271
 80084fa:	4630      	mov	r0, r6
 80084fc:	f7ff ff16 	bl	800832c <__i2b>
 8008500:	2300      	movs	r3, #0
 8008502:	f8c8 0008 	str.w	r0, [r8, #8]
 8008506:	4604      	mov	r4, r0
 8008508:	6003      	str	r3, [r0, #0]
 800850a:	f04f 0900 	mov.w	r9, #0
 800850e:	07eb      	lsls	r3, r5, #31
 8008510:	d50a      	bpl.n	8008528 <__pow5mult+0x84>
 8008512:	4639      	mov	r1, r7
 8008514:	4622      	mov	r2, r4
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff1e 	bl	8008358 <__multiply>
 800851c:	4639      	mov	r1, r7
 800851e:	4680      	mov	r8, r0
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff fe47 	bl	80081b4 <_Bfree>
 8008526:	4647      	mov	r7, r8
 8008528:	106d      	asrs	r5, r5, #1
 800852a:	d00b      	beq.n	8008544 <__pow5mult+0xa0>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	b938      	cbnz	r0, 8008540 <__pow5mult+0x9c>
 8008530:	4622      	mov	r2, r4
 8008532:	4621      	mov	r1, r4
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff ff0f 	bl	8008358 <__multiply>
 800853a:	6020      	str	r0, [r4, #0]
 800853c:	f8c0 9000 	str.w	r9, [r0]
 8008540:	4604      	mov	r4, r0
 8008542:	e7e4      	b.n	800850e <__pow5mult+0x6a>
 8008544:	4638      	mov	r0, r7
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	bf00      	nop
 800854c:	0800bf70 	.word	0x0800bf70
 8008550:	0800bd95 	.word	0x0800bd95
 8008554:	0800be1c 	.word	0x0800be1c

08008558 <__lshift>:
 8008558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800855c:	460c      	mov	r4, r1
 800855e:	6849      	ldr	r1, [r1, #4]
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	4607      	mov	r7, r0
 800856a:	4691      	mov	r9, r2
 800856c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008570:	f108 0601 	add.w	r6, r8, #1
 8008574:	42b3      	cmp	r3, r6
 8008576:	db0b      	blt.n	8008590 <__lshift+0x38>
 8008578:	4638      	mov	r0, r7
 800857a:	f7ff fddb 	bl	8008134 <_Balloc>
 800857e:	4605      	mov	r5, r0
 8008580:	b948      	cbnz	r0, 8008596 <__lshift+0x3e>
 8008582:	4602      	mov	r2, r0
 8008584:	4b28      	ldr	r3, [pc, #160]	; (8008628 <__lshift+0xd0>)
 8008586:	4829      	ldr	r0, [pc, #164]	; (800862c <__lshift+0xd4>)
 8008588:	f240 11d9 	movw	r1, #473	; 0x1d9
 800858c:	f000 fb76 	bl	8008c7c <__assert_func>
 8008590:	3101      	adds	r1, #1
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	e7ee      	b.n	8008574 <__lshift+0x1c>
 8008596:	2300      	movs	r3, #0
 8008598:	f100 0114 	add.w	r1, r0, #20
 800859c:	f100 0210 	add.w	r2, r0, #16
 80085a0:	4618      	mov	r0, r3
 80085a2:	4553      	cmp	r3, sl
 80085a4:	db33      	blt.n	800860e <__lshift+0xb6>
 80085a6:	6920      	ldr	r0, [r4, #16]
 80085a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085ac:	f104 0314 	add.w	r3, r4, #20
 80085b0:	f019 091f 	ands.w	r9, r9, #31
 80085b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085bc:	d02b      	beq.n	8008616 <__lshift+0xbe>
 80085be:	f1c9 0e20 	rsb	lr, r9, #32
 80085c2:	468a      	mov	sl, r1
 80085c4:	2200      	movs	r2, #0
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	fa00 f009 	lsl.w	r0, r0, r9
 80085cc:	4302      	orrs	r2, r0
 80085ce:	f84a 2b04 	str.w	r2, [sl], #4
 80085d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d6:	459c      	cmp	ip, r3
 80085d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085dc:	d8f3      	bhi.n	80085c6 <__lshift+0x6e>
 80085de:	ebac 0304 	sub.w	r3, ip, r4
 80085e2:	3b15      	subs	r3, #21
 80085e4:	f023 0303 	bic.w	r3, r3, #3
 80085e8:	3304      	adds	r3, #4
 80085ea:	f104 0015 	add.w	r0, r4, #21
 80085ee:	4584      	cmp	ip, r0
 80085f0:	bf38      	it	cc
 80085f2:	2304      	movcc	r3, #4
 80085f4:	50ca      	str	r2, [r1, r3]
 80085f6:	b10a      	cbz	r2, 80085fc <__lshift+0xa4>
 80085f8:	f108 0602 	add.w	r6, r8, #2
 80085fc:	3e01      	subs	r6, #1
 80085fe:	4638      	mov	r0, r7
 8008600:	612e      	str	r6, [r5, #16]
 8008602:	4621      	mov	r1, r4
 8008604:	f7ff fdd6 	bl	80081b4 <_Bfree>
 8008608:	4628      	mov	r0, r5
 800860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008612:	3301      	adds	r3, #1
 8008614:	e7c5      	b.n	80085a2 <__lshift+0x4a>
 8008616:	3904      	subs	r1, #4
 8008618:	f853 2b04 	ldr.w	r2, [r3], #4
 800861c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008620:	459c      	cmp	ip, r3
 8008622:	d8f9      	bhi.n	8008618 <__lshift+0xc0>
 8008624:	e7ea      	b.n	80085fc <__lshift+0xa4>
 8008626:	bf00      	nop
 8008628:	0800be0b 	.word	0x0800be0b
 800862c:	0800be1c 	.word	0x0800be1c

08008630 <__mcmp>:
 8008630:	b530      	push	{r4, r5, lr}
 8008632:	6902      	ldr	r2, [r0, #16]
 8008634:	690c      	ldr	r4, [r1, #16]
 8008636:	1b12      	subs	r2, r2, r4
 8008638:	d10e      	bne.n	8008658 <__mcmp+0x28>
 800863a:	f100 0314 	add.w	r3, r0, #20
 800863e:	3114      	adds	r1, #20
 8008640:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008644:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008648:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800864c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008650:	42a5      	cmp	r5, r4
 8008652:	d003      	beq.n	800865c <__mcmp+0x2c>
 8008654:	d305      	bcc.n	8008662 <__mcmp+0x32>
 8008656:	2201      	movs	r2, #1
 8008658:	4610      	mov	r0, r2
 800865a:	bd30      	pop	{r4, r5, pc}
 800865c:	4283      	cmp	r3, r0
 800865e:	d3f3      	bcc.n	8008648 <__mcmp+0x18>
 8008660:	e7fa      	b.n	8008658 <__mcmp+0x28>
 8008662:	f04f 32ff 	mov.w	r2, #4294967295
 8008666:	e7f7      	b.n	8008658 <__mcmp+0x28>

08008668 <__mdiff>:
 8008668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866c:	460c      	mov	r4, r1
 800866e:	4606      	mov	r6, r0
 8008670:	4611      	mov	r1, r2
 8008672:	4620      	mov	r0, r4
 8008674:	4617      	mov	r7, r2
 8008676:	f7ff ffdb 	bl	8008630 <__mcmp>
 800867a:	1e05      	subs	r5, r0, #0
 800867c:	d110      	bne.n	80086a0 <__mdiff+0x38>
 800867e:	4629      	mov	r1, r5
 8008680:	4630      	mov	r0, r6
 8008682:	f7ff fd57 	bl	8008134 <_Balloc>
 8008686:	b930      	cbnz	r0, 8008696 <__mdiff+0x2e>
 8008688:	4b39      	ldr	r3, [pc, #228]	; (8008770 <__mdiff+0x108>)
 800868a:	4602      	mov	r2, r0
 800868c:	f240 2132 	movw	r1, #562	; 0x232
 8008690:	4838      	ldr	r0, [pc, #224]	; (8008774 <__mdiff+0x10c>)
 8008692:	f000 faf3 	bl	8008c7c <__assert_func>
 8008696:	2301      	movs	r3, #1
 8008698:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800869c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086a0:	bfa4      	itt	ge
 80086a2:	463b      	movge	r3, r7
 80086a4:	4627      	movge	r7, r4
 80086a6:	4630      	mov	r0, r6
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	bfa6      	itte	ge
 80086ac:	461c      	movge	r4, r3
 80086ae:	2500      	movge	r5, #0
 80086b0:	2501      	movlt	r5, #1
 80086b2:	f7ff fd3f 	bl	8008134 <_Balloc>
 80086b6:	b920      	cbnz	r0, 80086c2 <__mdiff+0x5a>
 80086b8:	4b2d      	ldr	r3, [pc, #180]	; (8008770 <__mdiff+0x108>)
 80086ba:	4602      	mov	r2, r0
 80086bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086c0:	e7e6      	b.n	8008690 <__mdiff+0x28>
 80086c2:	693e      	ldr	r6, [r7, #16]
 80086c4:	60c5      	str	r5, [r0, #12]
 80086c6:	6925      	ldr	r5, [r4, #16]
 80086c8:	f107 0114 	add.w	r1, r7, #20
 80086cc:	f104 0914 	add.w	r9, r4, #20
 80086d0:	f100 0e14 	add.w	lr, r0, #20
 80086d4:	f107 0210 	add.w	r2, r7, #16
 80086d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80086dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80086e0:	46f2      	mov	sl, lr
 80086e2:	2700      	movs	r7, #0
 80086e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80086e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80086ec:	fa1f f883 	uxth.w	r8, r3
 80086f0:	fa17 f78b 	uxtah	r7, r7, fp
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	eba7 0808 	sub.w	r8, r7, r8
 80086fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80086fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008702:	fa1f f888 	uxth.w	r8, r8
 8008706:	141f      	asrs	r7, r3, #16
 8008708:	454d      	cmp	r5, r9
 800870a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800870e:	f84a 3b04 	str.w	r3, [sl], #4
 8008712:	d8e7      	bhi.n	80086e4 <__mdiff+0x7c>
 8008714:	1b2b      	subs	r3, r5, r4
 8008716:	3b15      	subs	r3, #21
 8008718:	f023 0303 	bic.w	r3, r3, #3
 800871c:	3304      	adds	r3, #4
 800871e:	3415      	adds	r4, #21
 8008720:	42a5      	cmp	r5, r4
 8008722:	bf38      	it	cc
 8008724:	2304      	movcc	r3, #4
 8008726:	4419      	add	r1, r3
 8008728:	4473      	add	r3, lr
 800872a:	469e      	mov	lr, r3
 800872c:	460d      	mov	r5, r1
 800872e:	4565      	cmp	r5, ip
 8008730:	d30e      	bcc.n	8008750 <__mdiff+0xe8>
 8008732:	f10c 0203 	add.w	r2, ip, #3
 8008736:	1a52      	subs	r2, r2, r1
 8008738:	f022 0203 	bic.w	r2, r2, #3
 800873c:	3903      	subs	r1, #3
 800873e:	458c      	cmp	ip, r1
 8008740:	bf38      	it	cc
 8008742:	2200      	movcc	r2, #0
 8008744:	441a      	add	r2, r3
 8008746:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800874a:	b17b      	cbz	r3, 800876c <__mdiff+0x104>
 800874c:	6106      	str	r6, [r0, #16]
 800874e:	e7a5      	b.n	800869c <__mdiff+0x34>
 8008750:	f855 8b04 	ldr.w	r8, [r5], #4
 8008754:	fa17 f488 	uxtah	r4, r7, r8
 8008758:	1422      	asrs	r2, r4, #16
 800875a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800875e:	b2a4      	uxth	r4, r4
 8008760:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008764:	f84e 4b04 	str.w	r4, [lr], #4
 8008768:	1417      	asrs	r7, r2, #16
 800876a:	e7e0      	b.n	800872e <__mdiff+0xc6>
 800876c:	3e01      	subs	r6, #1
 800876e:	e7ea      	b.n	8008746 <__mdiff+0xde>
 8008770:	0800be0b 	.word	0x0800be0b
 8008774:	0800be1c 	.word	0x0800be1c

08008778 <__d2b>:
 8008778:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800877c:	4689      	mov	r9, r1
 800877e:	2101      	movs	r1, #1
 8008780:	ec57 6b10 	vmov	r6, r7, d0
 8008784:	4690      	mov	r8, r2
 8008786:	f7ff fcd5 	bl	8008134 <_Balloc>
 800878a:	4604      	mov	r4, r0
 800878c:	b930      	cbnz	r0, 800879c <__d2b+0x24>
 800878e:	4602      	mov	r2, r0
 8008790:	4b25      	ldr	r3, [pc, #148]	; (8008828 <__d2b+0xb0>)
 8008792:	4826      	ldr	r0, [pc, #152]	; (800882c <__d2b+0xb4>)
 8008794:	f240 310a 	movw	r1, #778	; 0x30a
 8008798:	f000 fa70 	bl	8008c7c <__assert_func>
 800879c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80087a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80087a4:	bb35      	cbnz	r5, 80087f4 <__d2b+0x7c>
 80087a6:	2e00      	cmp	r6, #0
 80087a8:	9301      	str	r3, [sp, #4]
 80087aa:	d028      	beq.n	80087fe <__d2b+0x86>
 80087ac:	4668      	mov	r0, sp
 80087ae:	9600      	str	r6, [sp, #0]
 80087b0:	f7ff fd8c 	bl	80082cc <__lo0bits>
 80087b4:	9900      	ldr	r1, [sp, #0]
 80087b6:	b300      	cbz	r0, 80087fa <__d2b+0x82>
 80087b8:	9a01      	ldr	r2, [sp, #4]
 80087ba:	f1c0 0320 	rsb	r3, r0, #32
 80087be:	fa02 f303 	lsl.w	r3, r2, r3
 80087c2:	430b      	orrs	r3, r1
 80087c4:	40c2      	lsrs	r2, r0
 80087c6:	6163      	str	r3, [r4, #20]
 80087c8:	9201      	str	r2, [sp, #4]
 80087ca:	9b01      	ldr	r3, [sp, #4]
 80087cc:	61a3      	str	r3, [r4, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	bf14      	ite	ne
 80087d2:	2202      	movne	r2, #2
 80087d4:	2201      	moveq	r2, #1
 80087d6:	6122      	str	r2, [r4, #16]
 80087d8:	b1d5      	cbz	r5, 8008810 <__d2b+0x98>
 80087da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80087de:	4405      	add	r5, r0
 80087e0:	f8c9 5000 	str.w	r5, [r9]
 80087e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80087e8:	f8c8 0000 	str.w	r0, [r8]
 80087ec:	4620      	mov	r0, r4
 80087ee:	b003      	add	sp, #12
 80087f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087f8:	e7d5      	b.n	80087a6 <__d2b+0x2e>
 80087fa:	6161      	str	r1, [r4, #20]
 80087fc:	e7e5      	b.n	80087ca <__d2b+0x52>
 80087fe:	a801      	add	r0, sp, #4
 8008800:	f7ff fd64 	bl	80082cc <__lo0bits>
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	6163      	str	r3, [r4, #20]
 8008808:	2201      	movs	r2, #1
 800880a:	6122      	str	r2, [r4, #16]
 800880c:	3020      	adds	r0, #32
 800880e:	e7e3      	b.n	80087d8 <__d2b+0x60>
 8008810:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008814:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008818:	f8c9 0000 	str.w	r0, [r9]
 800881c:	6918      	ldr	r0, [r3, #16]
 800881e:	f7ff fd35 	bl	800828c <__hi0bits>
 8008822:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008826:	e7df      	b.n	80087e8 <__d2b+0x70>
 8008828:	0800be0b 	.word	0x0800be0b
 800882c:	0800be1c 	.word	0x0800be1c

08008830 <_calloc_r>:
 8008830:	b513      	push	{r0, r1, r4, lr}
 8008832:	434a      	muls	r2, r1
 8008834:	4611      	mov	r1, r2
 8008836:	9201      	str	r2, [sp, #4]
 8008838:	f000 f85a 	bl	80088f0 <_malloc_r>
 800883c:	4604      	mov	r4, r0
 800883e:	b118      	cbz	r0, 8008848 <_calloc_r+0x18>
 8008840:	9a01      	ldr	r2, [sp, #4]
 8008842:	2100      	movs	r1, #0
 8008844:	f7fe f950 	bl	8006ae8 <memset>
 8008848:	4620      	mov	r0, r4
 800884a:	b002      	add	sp, #8
 800884c:	bd10      	pop	{r4, pc}
	...

08008850 <_free_r>:
 8008850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008852:	2900      	cmp	r1, #0
 8008854:	d048      	beq.n	80088e8 <_free_r+0x98>
 8008856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800885a:	9001      	str	r0, [sp, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f1a1 0404 	sub.w	r4, r1, #4
 8008862:	bfb8      	it	lt
 8008864:	18e4      	addlt	r4, r4, r3
 8008866:	f000 fa65 	bl	8008d34 <__malloc_lock>
 800886a:	4a20      	ldr	r2, [pc, #128]	; (80088ec <_free_r+0x9c>)
 800886c:	9801      	ldr	r0, [sp, #4]
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	4615      	mov	r5, r2
 8008872:	b933      	cbnz	r3, 8008882 <_free_r+0x32>
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6014      	str	r4, [r2, #0]
 8008878:	b003      	add	sp, #12
 800887a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800887e:	f000 ba5f 	b.w	8008d40 <__malloc_unlock>
 8008882:	42a3      	cmp	r3, r4
 8008884:	d90b      	bls.n	800889e <_free_r+0x4e>
 8008886:	6821      	ldr	r1, [r4, #0]
 8008888:	1862      	adds	r2, r4, r1
 800888a:	4293      	cmp	r3, r2
 800888c:	bf04      	itt	eq
 800888e:	681a      	ldreq	r2, [r3, #0]
 8008890:	685b      	ldreq	r3, [r3, #4]
 8008892:	6063      	str	r3, [r4, #4]
 8008894:	bf04      	itt	eq
 8008896:	1852      	addeq	r2, r2, r1
 8008898:	6022      	streq	r2, [r4, #0]
 800889a:	602c      	str	r4, [r5, #0]
 800889c:	e7ec      	b.n	8008878 <_free_r+0x28>
 800889e:	461a      	mov	r2, r3
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	b10b      	cbz	r3, 80088a8 <_free_r+0x58>
 80088a4:	42a3      	cmp	r3, r4
 80088a6:	d9fa      	bls.n	800889e <_free_r+0x4e>
 80088a8:	6811      	ldr	r1, [r2, #0]
 80088aa:	1855      	adds	r5, r2, r1
 80088ac:	42a5      	cmp	r5, r4
 80088ae:	d10b      	bne.n	80088c8 <_free_r+0x78>
 80088b0:	6824      	ldr	r4, [r4, #0]
 80088b2:	4421      	add	r1, r4
 80088b4:	1854      	adds	r4, r2, r1
 80088b6:	42a3      	cmp	r3, r4
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	d1dd      	bne.n	8008878 <_free_r+0x28>
 80088bc:	681c      	ldr	r4, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	6053      	str	r3, [r2, #4]
 80088c2:	4421      	add	r1, r4
 80088c4:	6011      	str	r1, [r2, #0]
 80088c6:	e7d7      	b.n	8008878 <_free_r+0x28>
 80088c8:	d902      	bls.n	80088d0 <_free_r+0x80>
 80088ca:	230c      	movs	r3, #12
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	e7d3      	b.n	8008878 <_free_r+0x28>
 80088d0:	6825      	ldr	r5, [r4, #0]
 80088d2:	1961      	adds	r1, r4, r5
 80088d4:	428b      	cmp	r3, r1
 80088d6:	bf04      	itt	eq
 80088d8:	6819      	ldreq	r1, [r3, #0]
 80088da:	685b      	ldreq	r3, [r3, #4]
 80088dc:	6063      	str	r3, [r4, #4]
 80088de:	bf04      	itt	eq
 80088e0:	1949      	addeq	r1, r1, r5
 80088e2:	6021      	streq	r1, [r4, #0]
 80088e4:	6054      	str	r4, [r2, #4]
 80088e6:	e7c7      	b.n	8008878 <_free_r+0x28>
 80088e8:	b003      	add	sp, #12
 80088ea:	bd30      	pop	{r4, r5, pc}
 80088ec:	20000398 	.word	0x20000398

080088f0 <_malloc_r>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	1ccd      	adds	r5, r1, #3
 80088f4:	f025 0503 	bic.w	r5, r5, #3
 80088f8:	3508      	adds	r5, #8
 80088fa:	2d0c      	cmp	r5, #12
 80088fc:	bf38      	it	cc
 80088fe:	250c      	movcc	r5, #12
 8008900:	2d00      	cmp	r5, #0
 8008902:	4606      	mov	r6, r0
 8008904:	db01      	blt.n	800890a <_malloc_r+0x1a>
 8008906:	42a9      	cmp	r1, r5
 8008908:	d903      	bls.n	8008912 <_malloc_r+0x22>
 800890a:	230c      	movs	r3, #12
 800890c:	6033      	str	r3, [r6, #0]
 800890e:	2000      	movs	r0, #0
 8008910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008912:	f000 fa0f 	bl	8008d34 <__malloc_lock>
 8008916:	4921      	ldr	r1, [pc, #132]	; (800899c <_malloc_r+0xac>)
 8008918:	680a      	ldr	r2, [r1, #0]
 800891a:	4614      	mov	r4, r2
 800891c:	b99c      	cbnz	r4, 8008946 <_malloc_r+0x56>
 800891e:	4f20      	ldr	r7, [pc, #128]	; (80089a0 <_malloc_r+0xb0>)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	b923      	cbnz	r3, 800892e <_malloc_r+0x3e>
 8008924:	4621      	mov	r1, r4
 8008926:	4630      	mov	r0, r6
 8008928:	f000 f998 	bl	8008c5c <_sbrk_r>
 800892c:	6038      	str	r0, [r7, #0]
 800892e:	4629      	mov	r1, r5
 8008930:	4630      	mov	r0, r6
 8008932:	f000 f993 	bl	8008c5c <_sbrk_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	d123      	bne.n	8008982 <_malloc_r+0x92>
 800893a:	230c      	movs	r3, #12
 800893c:	6033      	str	r3, [r6, #0]
 800893e:	4630      	mov	r0, r6
 8008940:	f000 f9fe 	bl	8008d40 <__malloc_unlock>
 8008944:	e7e3      	b.n	800890e <_malloc_r+0x1e>
 8008946:	6823      	ldr	r3, [r4, #0]
 8008948:	1b5b      	subs	r3, r3, r5
 800894a:	d417      	bmi.n	800897c <_malloc_r+0x8c>
 800894c:	2b0b      	cmp	r3, #11
 800894e:	d903      	bls.n	8008958 <_malloc_r+0x68>
 8008950:	6023      	str	r3, [r4, #0]
 8008952:	441c      	add	r4, r3
 8008954:	6025      	str	r5, [r4, #0]
 8008956:	e004      	b.n	8008962 <_malloc_r+0x72>
 8008958:	6863      	ldr	r3, [r4, #4]
 800895a:	42a2      	cmp	r2, r4
 800895c:	bf0c      	ite	eq
 800895e:	600b      	streq	r3, [r1, #0]
 8008960:	6053      	strne	r3, [r2, #4]
 8008962:	4630      	mov	r0, r6
 8008964:	f000 f9ec 	bl	8008d40 <__malloc_unlock>
 8008968:	f104 000b 	add.w	r0, r4, #11
 800896c:	1d23      	adds	r3, r4, #4
 800896e:	f020 0007 	bic.w	r0, r0, #7
 8008972:	1ac2      	subs	r2, r0, r3
 8008974:	d0cc      	beq.n	8008910 <_malloc_r+0x20>
 8008976:	1a1b      	subs	r3, r3, r0
 8008978:	50a3      	str	r3, [r4, r2]
 800897a:	e7c9      	b.n	8008910 <_malloc_r+0x20>
 800897c:	4622      	mov	r2, r4
 800897e:	6864      	ldr	r4, [r4, #4]
 8008980:	e7cc      	b.n	800891c <_malloc_r+0x2c>
 8008982:	1cc4      	adds	r4, r0, #3
 8008984:	f024 0403 	bic.w	r4, r4, #3
 8008988:	42a0      	cmp	r0, r4
 800898a:	d0e3      	beq.n	8008954 <_malloc_r+0x64>
 800898c:	1a21      	subs	r1, r4, r0
 800898e:	4630      	mov	r0, r6
 8008990:	f000 f964 	bl	8008c5c <_sbrk_r>
 8008994:	3001      	adds	r0, #1
 8008996:	d1dd      	bne.n	8008954 <_malloc_r+0x64>
 8008998:	e7cf      	b.n	800893a <_malloc_r+0x4a>
 800899a:	bf00      	nop
 800899c:	20000398 	.word	0x20000398
 80089a0:	2000039c 	.word	0x2000039c

080089a4 <__ssputs_r>:
 80089a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089a8:	688e      	ldr	r6, [r1, #8]
 80089aa:	429e      	cmp	r6, r3
 80089ac:	4682      	mov	sl, r0
 80089ae:	460c      	mov	r4, r1
 80089b0:	4690      	mov	r8, r2
 80089b2:	461f      	mov	r7, r3
 80089b4:	d838      	bhi.n	8008a28 <__ssputs_r+0x84>
 80089b6:	898a      	ldrh	r2, [r1, #12]
 80089b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089bc:	d032      	beq.n	8008a24 <__ssputs_r+0x80>
 80089be:	6825      	ldr	r5, [r4, #0]
 80089c0:	6909      	ldr	r1, [r1, #16]
 80089c2:	eba5 0901 	sub.w	r9, r5, r1
 80089c6:	6965      	ldr	r5, [r4, #20]
 80089c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089d0:	3301      	adds	r3, #1
 80089d2:	444b      	add	r3, r9
 80089d4:	106d      	asrs	r5, r5, #1
 80089d6:	429d      	cmp	r5, r3
 80089d8:	bf38      	it	cc
 80089da:	461d      	movcc	r5, r3
 80089dc:	0553      	lsls	r3, r2, #21
 80089de:	d531      	bpl.n	8008a44 <__ssputs_r+0xa0>
 80089e0:	4629      	mov	r1, r5
 80089e2:	f7ff ff85 	bl	80088f0 <_malloc_r>
 80089e6:	4606      	mov	r6, r0
 80089e8:	b950      	cbnz	r0, 8008a00 <__ssputs_r+0x5c>
 80089ea:	230c      	movs	r3, #12
 80089ec:	f8ca 3000 	str.w	r3, [sl]
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	f04f 30ff 	mov.w	r0, #4294967295
 80089fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a00:	6921      	ldr	r1, [r4, #16]
 8008a02:	464a      	mov	r2, r9
 8008a04:	f7ff fb88 	bl	8008118 <memcpy>
 8008a08:	89a3      	ldrh	r3, [r4, #12]
 8008a0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a12:	81a3      	strh	r3, [r4, #12]
 8008a14:	6126      	str	r6, [r4, #16]
 8008a16:	6165      	str	r5, [r4, #20]
 8008a18:	444e      	add	r6, r9
 8008a1a:	eba5 0509 	sub.w	r5, r5, r9
 8008a1e:	6026      	str	r6, [r4, #0]
 8008a20:	60a5      	str	r5, [r4, #8]
 8008a22:	463e      	mov	r6, r7
 8008a24:	42be      	cmp	r6, r7
 8008a26:	d900      	bls.n	8008a2a <__ssputs_r+0x86>
 8008a28:	463e      	mov	r6, r7
 8008a2a:	4632      	mov	r2, r6
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	4641      	mov	r1, r8
 8008a30:	f000 f966 	bl	8008d00 <memmove>
 8008a34:	68a3      	ldr	r3, [r4, #8]
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	1b9b      	subs	r3, r3, r6
 8008a3a:	4432      	add	r2, r6
 8008a3c:	60a3      	str	r3, [r4, #8]
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	2000      	movs	r0, #0
 8008a42:	e7db      	b.n	80089fc <__ssputs_r+0x58>
 8008a44:	462a      	mov	r2, r5
 8008a46:	f000 f981 	bl	8008d4c <_realloc_r>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1e1      	bne.n	8008a14 <__ssputs_r+0x70>
 8008a50:	6921      	ldr	r1, [r4, #16]
 8008a52:	4650      	mov	r0, sl
 8008a54:	f7ff fefc 	bl	8008850 <_free_r>
 8008a58:	e7c7      	b.n	80089ea <__ssputs_r+0x46>
	...

08008a5c <_svfiprintf_r>:
 8008a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a60:	4698      	mov	r8, r3
 8008a62:	898b      	ldrh	r3, [r1, #12]
 8008a64:	061b      	lsls	r3, r3, #24
 8008a66:	b09d      	sub	sp, #116	; 0x74
 8008a68:	4607      	mov	r7, r0
 8008a6a:	460d      	mov	r5, r1
 8008a6c:	4614      	mov	r4, r2
 8008a6e:	d50e      	bpl.n	8008a8e <_svfiprintf_r+0x32>
 8008a70:	690b      	ldr	r3, [r1, #16]
 8008a72:	b963      	cbnz	r3, 8008a8e <_svfiprintf_r+0x32>
 8008a74:	2140      	movs	r1, #64	; 0x40
 8008a76:	f7ff ff3b 	bl	80088f0 <_malloc_r>
 8008a7a:	6028      	str	r0, [r5, #0]
 8008a7c:	6128      	str	r0, [r5, #16]
 8008a7e:	b920      	cbnz	r0, 8008a8a <_svfiprintf_r+0x2e>
 8008a80:	230c      	movs	r3, #12
 8008a82:	603b      	str	r3, [r7, #0]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	e0d1      	b.n	8008c2e <_svfiprintf_r+0x1d2>
 8008a8a:	2340      	movs	r3, #64	; 0x40
 8008a8c:	616b      	str	r3, [r5, #20]
 8008a8e:	2300      	movs	r3, #0
 8008a90:	9309      	str	r3, [sp, #36]	; 0x24
 8008a92:	2320      	movs	r3, #32
 8008a94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a9c:	2330      	movs	r3, #48	; 0x30
 8008a9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008c48 <_svfiprintf_r+0x1ec>
 8008aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008aa6:	f04f 0901 	mov.w	r9, #1
 8008aaa:	4623      	mov	r3, r4
 8008aac:	469a      	mov	sl, r3
 8008aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ab2:	b10a      	cbz	r2, 8008ab8 <_svfiprintf_r+0x5c>
 8008ab4:	2a25      	cmp	r2, #37	; 0x25
 8008ab6:	d1f9      	bne.n	8008aac <_svfiprintf_r+0x50>
 8008ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8008abc:	d00b      	beq.n	8008ad6 <_svfiprintf_r+0x7a>
 8008abe:	465b      	mov	r3, fp
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	4629      	mov	r1, r5
 8008ac4:	4638      	mov	r0, r7
 8008ac6:	f7ff ff6d 	bl	80089a4 <__ssputs_r>
 8008aca:	3001      	adds	r0, #1
 8008acc:	f000 80aa 	beq.w	8008c24 <_svfiprintf_r+0x1c8>
 8008ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ad2:	445a      	add	r2, fp
 8008ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80a2 	beq.w	8008c24 <_svfiprintf_r+0x1c8>
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aea:	f10a 0a01 	add.w	sl, sl, #1
 8008aee:	9304      	str	r3, [sp, #16]
 8008af0:	9307      	str	r3, [sp, #28]
 8008af2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008af6:	931a      	str	r3, [sp, #104]	; 0x68
 8008af8:	4654      	mov	r4, sl
 8008afa:	2205      	movs	r2, #5
 8008afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b00:	4851      	ldr	r0, [pc, #324]	; (8008c48 <_svfiprintf_r+0x1ec>)
 8008b02:	f7f7 fb75 	bl	80001f0 <memchr>
 8008b06:	9a04      	ldr	r2, [sp, #16]
 8008b08:	b9d8      	cbnz	r0, 8008b42 <_svfiprintf_r+0xe6>
 8008b0a:	06d0      	lsls	r0, r2, #27
 8008b0c:	bf44      	itt	mi
 8008b0e:	2320      	movmi	r3, #32
 8008b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b14:	0711      	lsls	r1, r2, #28
 8008b16:	bf44      	itt	mi
 8008b18:	232b      	movmi	r3, #43	; 0x2b
 8008b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b22:	2b2a      	cmp	r3, #42	; 0x2a
 8008b24:	d015      	beq.n	8008b52 <_svfiprintf_r+0xf6>
 8008b26:	9a07      	ldr	r2, [sp, #28]
 8008b28:	4654      	mov	r4, sl
 8008b2a:	2000      	movs	r0, #0
 8008b2c:	f04f 0c0a 	mov.w	ip, #10
 8008b30:	4621      	mov	r1, r4
 8008b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b36:	3b30      	subs	r3, #48	; 0x30
 8008b38:	2b09      	cmp	r3, #9
 8008b3a:	d94e      	bls.n	8008bda <_svfiprintf_r+0x17e>
 8008b3c:	b1b0      	cbz	r0, 8008b6c <_svfiprintf_r+0x110>
 8008b3e:	9207      	str	r2, [sp, #28]
 8008b40:	e014      	b.n	8008b6c <_svfiprintf_r+0x110>
 8008b42:	eba0 0308 	sub.w	r3, r0, r8
 8008b46:	fa09 f303 	lsl.w	r3, r9, r3
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	46a2      	mov	sl, r4
 8008b50:	e7d2      	b.n	8008af8 <_svfiprintf_r+0x9c>
 8008b52:	9b03      	ldr	r3, [sp, #12]
 8008b54:	1d19      	adds	r1, r3, #4
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	9103      	str	r1, [sp, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	bfbb      	ittet	lt
 8008b5e:	425b      	neglt	r3, r3
 8008b60:	f042 0202 	orrlt.w	r2, r2, #2
 8008b64:	9307      	strge	r3, [sp, #28]
 8008b66:	9307      	strlt	r3, [sp, #28]
 8008b68:	bfb8      	it	lt
 8008b6a:	9204      	strlt	r2, [sp, #16]
 8008b6c:	7823      	ldrb	r3, [r4, #0]
 8008b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8008b70:	d10c      	bne.n	8008b8c <_svfiprintf_r+0x130>
 8008b72:	7863      	ldrb	r3, [r4, #1]
 8008b74:	2b2a      	cmp	r3, #42	; 0x2a
 8008b76:	d135      	bne.n	8008be4 <_svfiprintf_r+0x188>
 8008b78:	9b03      	ldr	r3, [sp, #12]
 8008b7a:	1d1a      	adds	r2, r3, #4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	9203      	str	r2, [sp, #12]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	bfb8      	it	lt
 8008b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b88:	3402      	adds	r4, #2
 8008b8a:	9305      	str	r3, [sp, #20]
 8008b8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c58 <_svfiprintf_r+0x1fc>
 8008b90:	7821      	ldrb	r1, [r4, #0]
 8008b92:	2203      	movs	r2, #3
 8008b94:	4650      	mov	r0, sl
 8008b96:	f7f7 fb2b 	bl	80001f0 <memchr>
 8008b9a:	b140      	cbz	r0, 8008bae <_svfiprintf_r+0x152>
 8008b9c:	2340      	movs	r3, #64	; 0x40
 8008b9e:	eba0 000a 	sub.w	r0, r0, sl
 8008ba2:	fa03 f000 	lsl.w	r0, r3, r0
 8008ba6:	9b04      	ldr	r3, [sp, #16]
 8008ba8:	4303      	orrs	r3, r0
 8008baa:	3401      	adds	r4, #1
 8008bac:	9304      	str	r3, [sp, #16]
 8008bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bb2:	4826      	ldr	r0, [pc, #152]	; (8008c4c <_svfiprintf_r+0x1f0>)
 8008bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bb8:	2206      	movs	r2, #6
 8008bba:	f7f7 fb19 	bl	80001f0 <memchr>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d038      	beq.n	8008c34 <_svfiprintf_r+0x1d8>
 8008bc2:	4b23      	ldr	r3, [pc, #140]	; (8008c50 <_svfiprintf_r+0x1f4>)
 8008bc4:	bb1b      	cbnz	r3, 8008c0e <_svfiprintf_r+0x1b2>
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	3307      	adds	r3, #7
 8008bca:	f023 0307 	bic.w	r3, r3, #7
 8008bce:	3308      	adds	r3, #8
 8008bd0:	9303      	str	r3, [sp, #12]
 8008bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bd4:	4433      	add	r3, r6
 8008bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8008bd8:	e767      	b.n	8008aaa <_svfiprintf_r+0x4e>
 8008bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bde:	460c      	mov	r4, r1
 8008be0:	2001      	movs	r0, #1
 8008be2:	e7a5      	b.n	8008b30 <_svfiprintf_r+0xd4>
 8008be4:	2300      	movs	r3, #0
 8008be6:	3401      	adds	r4, #1
 8008be8:	9305      	str	r3, [sp, #20]
 8008bea:	4619      	mov	r1, r3
 8008bec:	f04f 0c0a 	mov.w	ip, #10
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bf6:	3a30      	subs	r2, #48	; 0x30
 8008bf8:	2a09      	cmp	r2, #9
 8008bfa:	d903      	bls.n	8008c04 <_svfiprintf_r+0x1a8>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0c5      	beq.n	8008b8c <_svfiprintf_r+0x130>
 8008c00:	9105      	str	r1, [sp, #20]
 8008c02:	e7c3      	b.n	8008b8c <_svfiprintf_r+0x130>
 8008c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c08:	4604      	mov	r4, r0
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e7f0      	b.n	8008bf0 <_svfiprintf_r+0x194>
 8008c0e:	ab03      	add	r3, sp, #12
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	462a      	mov	r2, r5
 8008c14:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c16:	a904      	add	r1, sp, #16
 8008c18:	4638      	mov	r0, r7
 8008c1a:	f7fe f80d 	bl	8006c38 <_printf_float>
 8008c1e:	1c42      	adds	r2, r0, #1
 8008c20:	4606      	mov	r6, r0
 8008c22:	d1d6      	bne.n	8008bd2 <_svfiprintf_r+0x176>
 8008c24:	89ab      	ldrh	r3, [r5, #12]
 8008c26:	065b      	lsls	r3, r3, #25
 8008c28:	f53f af2c 	bmi.w	8008a84 <_svfiprintf_r+0x28>
 8008c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c2e:	b01d      	add	sp, #116	; 0x74
 8008c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c34:	ab03      	add	r3, sp, #12
 8008c36:	9300      	str	r3, [sp, #0]
 8008c38:	462a      	mov	r2, r5
 8008c3a:	4b06      	ldr	r3, [pc, #24]	; (8008c54 <_svfiprintf_r+0x1f8>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	4638      	mov	r0, r7
 8008c40:	f7fe fa9e 	bl	8007180 <_printf_i>
 8008c44:	e7eb      	b.n	8008c1e <_svfiprintf_r+0x1c2>
 8008c46:	bf00      	nop
 8008c48:	0800bf7c 	.word	0x0800bf7c
 8008c4c:	0800bf86 	.word	0x0800bf86
 8008c50:	08006c39 	.word	0x08006c39
 8008c54:	080089a5 	.word	0x080089a5
 8008c58:	0800bf82 	.word	0x0800bf82

08008c5c <_sbrk_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4d06      	ldr	r5, [pc, #24]	; (8008c78 <_sbrk_r+0x1c>)
 8008c60:	2300      	movs	r3, #0
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	602b      	str	r3, [r5, #0]
 8008c68:	f7fa fade 	bl	8003228 <_sbrk>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d102      	bne.n	8008c76 <_sbrk_r+0x1a>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	b103      	cbz	r3, 8008c76 <_sbrk_r+0x1a>
 8008c74:	6023      	str	r3, [r4, #0]
 8008c76:	bd38      	pop	{r3, r4, r5, pc}
 8008c78:	200005dc 	.word	0x200005dc

08008c7c <__assert_func>:
 8008c7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c7e:	4614      	mov	r4, r2
 8008c80:	461a      	mov	r2, r3
 8008c82:	4b09      	ldr	r3, [pc, #36]	; (8008ca8 <__assert_func+0x2c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4605      	mov	r5, r0
 8008c88:	68d8      	ldr	r0, [r3, #12]
 8008c8a:	b14c      	cbz	r4, 8008ca0 <__assert_func+0x24>
 8008c8c:	4b07      	ldr	r3, [pc, #28]	; (8008cac <__assert_func+0x30>)
 8008c8e:	9100      	str	r1, [sp, #0]
 8008c90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c94:	4906      	ldr	r1, [pc, #24]	; (8008cb0 <__assert_func+0x34>)
 8008c96:	462b      	mov	r3, r5
 8008c98:	f000 f80e 	bl	8008cb8 <fiprintf>
 8008c9c:	f000 faa4 	bl	80091e8 <abort>
 8008ca0:	4b04      	ldr	r3, [pc, #16]	; (8008cb4 <__assert_func+0x38>)
 8008ca2:	461c      	mov	r4, r3
 8008ca4:	e7f3      	b.n	8008c8e <__assert_func+0x12>
 8008ca6:	bf00      	nop
 8008ca8:	2000010c 	.word	0x2000010c
 8008cac:	0800bf8d 	.word	0x0800bf8d
 8008cb0:	0800bf9a 	.word	0x0800bf9a
 8008cb4:	0800bfc8 	.word	0x0800bfc8

08008cb8 <fiprintf>:
 8008cb8:	b40e      	push	{r1, r2, r3}
 8008cba:	b503      	push	{r0, r1, lr}
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	ab03      	add	r3, sp, #12
 8008cc0:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <fiprintf+0x20>)
 8008cc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cc6:	6800      	ldr	r0, [r0, #0]
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	f000 f88f 	bl	8008dec <_vfiprintf_r>
 8008cce:	b002      	add	sp, #8
 8008cd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cd4:	b003      	add	sp, #12
 8008cd6:	4770      	bx	lr
 8008cd8:	2000010c 	.word	0x2000010c

08008cdc <__ascii_mbtowc>:
 8008cdc:	b082      	sub	sp, #8
 8008cde:	b901      	cbnz	r1, 8008ce2 <__ascii_mbtowc+0x6>
 8008ce0:	a901      	add	r1, sp, #4
 8008ce2:	b142      	cbz	r2, 8008cf6 <__ascii_mbtowc+0x1a>
 8008ce4:	b14b      	cbz	r3, 8008cfa <__ascii_mbtowc+0x1e>
 8008ce6:	7813      	ldrb	r3, [r2, #0]
 8008ce8:	600b      	str	r3, [r1, #0]
 8008cea:	7812      	ldrb	r2, [r2, #0]
 8008cec:	1e10      	subs	r0, r2, #0
 8008cee:	bf18      	it	ne
 8008cf0:	2001      	movne	r0, #1
 8008cf2:	b002      	add	sp, #8
 8008cf4:	4770      	bx	lr
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	e7fb      	b.n	8008cf2 <__ascii_mbtowc+0x16>
 8008cfa:	f06f 0001 	mvn.w	r0, #1
 8008cfe:	e7f8      	b.n	8008cf2 <__ascii_mbtowc+0x16>

08008d00 <memmove>:
 8008d00:	4288      	cmp	r0, r1
 8008d02:	b510      	push	{r4, lr}
 8008d04:	eb01 0402 	add.w	r4, r1, r2
 8008d08:	d902      	bls.n	8008d10 <memmove+0x10>
 8008d0a:	4284      	cmp	r4, r0
 8008d0c:	4623      	mov	r3, r4
 8008d0e:	d807      	bhi.n	8008d20 <memmove+0x20>
 8008d10:	1e43      	subs	r3, r0, #1
 8008d12:	42a1      	cmp	r1, r4
 8008d14:	d008      	beq.n	8008d28 <memmove+0x28>
 8008d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d1e:	e7f8      	b.n	8008d12 <memmove+0x12>
 8008d20:	4402      	add	r2, r0
 8008d22:	4601      	mov	r1, r0
 8008d24:	428a      	cmp	r2, r1
 8008d26:	d100      	bne.n	8008d2a <memmove+0x2a>
 8008d28:	bd10      	pop	{r4, pc}
 8008d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d32:	e7f7      	b.n	8008d24 <memmove+0x24>

08008d34 <__malloc_lock>:
 8008d34:	4801      	ldr	r0, [pc, #4]	; (8008d3c <__malloc_lock+0x8>)
 8008d36:	f000 bc17 	b.w	8009568 <__retarget_lock_acquire_recursive>
 8008d3a:	bf00      	nop
 8008d3c:	200005e4 	.word	0x200005e4

08008d40 <__malloc_unlock>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__malloc_unlock+0x8>)
 8008d42:	f000 bc12 	b.w	800956a <__retarget_lock_release_recursive>
 8008d46:	bf00      	nop
 8008d48:	200005e4 	.word	0x200005e4

08008d4c <_realloc_r>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	4607      	mov	r7, r0
 8008d50:	4614      	mov	r4, r2
 8008d52:	460e      	mov	r6, r1
 8008d54:	b921      	cbnz	r1, 8008d60 <_realloc_r+0x14>
 8008d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	f7ff bdc8 	b.w	80088f0 <_malloc_r>
 8008d60:	b922      	cbnz	r2, 8008d6c <_realloc_r+0x20>
 8008d62:	f7ff fd75 	bl	8008850 <_free_r>
 8008d66:	4625      	mov	r5, r4
 8008d68:	4628      	mov	r0, r5
 8008d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d6c:	f000 fc62 	bl	8009634 <_malloc_usable_size_r>
 8008d70:	42a0      	cmp	r0, r4
 8008d72:	d20f      	bcs.n	8008d94 <_realloc_r+0x48>
 8008d74:	4621      	mov	r1, r4
 8008d76:	4638      	mov	r0, r7
 8008d78:	f7ff fdba 	bl	80088f0 <_malloc_r>
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d0f2      	beq.n	8008d68 <_realloc_r+0x1c>
 8008d82:	4631      	mov	r1, r6
 8008d84:	4622      	mov	r2, r4
 8008d86:	f7ff f9c7 	bl	8008118 <memcpy>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4638      	mov	r0, r7
 8008d8e:	f7ff fd5f 	bl	8008850 <_free_r>
 8008d92:	e7e9      	b.n	8008d68 <_realloc_r+0x1c>
 8008d94:	4635      	mov	r5, r6
 8008d96:	e7e7      	b.n	8008d68 <_realloc_r+0x1c>

08008d98 <__sfputc_r>:
 8008d98:	6893      	ldr	r3, [r2, #8]
 8008d9a:	3b01      	subs	r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	b410      	push	{r4}
 8008da0:	6093      	str	r3, [r2, #8]
 8008da2:	da08      	bge.n	8008db6 <__sfputc_r+0x1e>
 8008da4:	6994      	ldr	r4, [r2, #24]
 8008da6:	42a3      	cmp	r3, r4
 8008da8:	db01      	blt.n	8008dae <__sfputc_r+0x16>
 8008daa:	290a      	cmp	r1, #10
 8008dac:	d103      	bne.n	8008db6 <__sfputc_r+0x1e>
 8008dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db2:	f000 b94b 	b.w	800904c <__swbuf_r>
 8008db6:	6813      	ldr	r3, [r2, #0]
 8008db8:	1c58      	adds	r0, r3, #1
 8008dba:	6010      	str	r0, [r2, #0]
 8008dbc:	7019      	strb	r1, [r3, #0]
 8008dbe:	4608      	mov	r0, r1
 8008dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <__sfputs_r>:
 8008dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc8:	4606      	mov	r6, r0
 8008dca:	460f      	mov	r7, r1
 8008dcc:	4614      	mov	r4, r2
 8008dce:	18d5      	adds	r5, r2, r3
 8008dd0:	42ac      	cmp	r4, r5
 8008dd2:	d101      	bne.n	8008dd8 <__sfputs_r+0x12>
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e007      	b.n	8008de8 <__sfputs_r+0x22>
 8008dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ddc:	463a      	mov	r2, r7
 8008dde:	4630      	mov	r0, r6
 8008de0:	f7ff ffda 	bl	8008d98 <__sfputc_r>
 8008de4:	1c43      	adds	r3, r0, #1
 8008de6:	d1f3      	bne.n	8008dd0 <__sfputs_r+0xa>
 8008de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dec <_vfiprintf_r>:
 8008dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	460d      	mov	r5, r1
 8008df2:	b09d      	sub	sp, #116	; 0x74
 8008df4:	4614      	mov	r4, r2
 8008df6:	4698      	mov	r8, r3
 8008df8:	4606      	mov	r6, r0
 8008dfa:	b118      	cbz	r0, 8008e04 <_vfiprintf_r+0x18>
 8008dfc:	6983      	ldr	r3, [r0, #24]
 8008dfe:	b90b      	cbnz	r3, 8008e04 <_vfiprintf_r+0x18>
 8008e00:	f000 fb14 	bl	800942c <__sinit>
 8008e04:	4b89      	ldr	r3, [pc, #548]	; (800902c <_vfiprintf_r+0x240>)
 8008e06:	429d      	cmp	r5, r3
 8008e08:	d11b      	bne.n	8008e42 <_vfiprintf_r+0x56>
 8008e0a:	6875      	ldr	r5, [r6, #4]
 8008e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e0e:	07d9      	lsls	r1, r3, #31
 8008e10:	d405      	bmi.n	8008e1e <_vfiprintf_r+0x32>
 8008e12:	89ab      	ldrh	r3, [r5, #12]
 8008e14:	059a      	lsls	r2, r3, #22
 8008e16:	d402      	bmi.n	8008e1e <_vfiprintf_r+0x32>
 8008e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e1a:	f000 fba5 	bl	8009568 <__retarget_lock_acquire_recursive>
 8008e1e:	89ab      	ldrh	r3, [r5, #12]
 8008e20:	071b      	lsls	r3, r3, #28
 8008e22:	d501      	bpl.n	8008e28 <_vfiprintf_r+0x3c>
 8008e24:	692b      	ldr	r3, [r5, #16]
 8008e26:	b9eb      	cbnz	r3, 8008e64 <_vfiprintf_r+0x78>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f000 f96e 	bl	800910c <__swsetup_r>
 8008e30:	b1c0      	cbz	r0, 8008e64 <_vfiprintf_r+0x78>
 8008e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e34:	07dc      	lsls	r4, r3, #31
 8008e36:	d50e      	bpl.n	8008e56 <_vfiprintf_r+0x6a>
 8008e38:	f04f 30ff 	mov.w	r0, #4294967295
 8008e3c:	b01d      	add	sp, #116	; 0x74
 8008e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e42:	4b7b      	ldr	r3, [pc, #492]	; (8009030 <_vfiprintf_r+0x244>)
 8008e44:	429d      	cmp	r5, r3
 8008e46:	d101      	bne.n	8008e4c <_vfiprintf_r+0x60>
 8008e48:	68b5      	ldr	r5, [r6, #8]
 8008e4a:	e7df      	b.n	8008e0c <_vfiprintf_r+0x20>
 8008e4c:	4b79      	ldr	r3, [pc, #484]	; (8009034 <_vfiprintf_r+0x248>)
 8008e4e:	429d      	cmp	r5, r3
 8008e50:	bf08      	it	eq
 8008e52:	68f5      	ldreq	r5, [r6, #12]
 8008e54:	e7da      	b.n	8008e0c <_vfiprintf_r+0x20>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	0598      	lsls	r0, r3, #22
 8008e5a:	d4ed      	bmi.n	8008e38 <_vfiprintf_r+0x4c>
 8008e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e5e:	f000 fb84 	bl	800956a <__retarget_lock_release_recursive>
 8008e62:	e7e9      	b.n	8008e38 <_vfiprintf_r+0x4c>
 8008e64:	2300      	movs	r3, #0
 8008e66:	9309      	str	r3, [sp, #36]	; 0x24
 8008e68:	2320      	movs	r3, #32
 8008e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e72:	2330      	movs	r3, #48	; 0x30
 8008e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009038 <_vfiprintf_r+0x24c>
 8008e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e7c:	f04f 0901 	mov.w	r9, #1
 8008e80:	4623      	mov	r3, r4
 8008e82:	469a      	mov	sl, r3
 8008e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e88:	b10a      	cbz	r2, 8008e8e <_vfiprintf_r+0xa2>
 8008e8a:	2a25      	cmp	r2, #37	; 0x25
 8008e8c:	d1f9      	bne.n	8008e82 <_vfiprintf_r+0x96>
 8008e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e92:	d00b      	beq.n	8008eac <_vfiprintf_r+0xc0>
 8008e94:	465b      	mov	r3, fp
 8008e96:	4622      	mov	r2, r4
 8008e98:	4629      	mov	r1, r5
 8008e9a:	4630      	mov	r0, r6
 8008e9c:	f7ff ff93 	bl	8008dc6 <__sfputs_r>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	f000 80aa 	beq.w	8008ffa <_vfiprintf_r+0x20e>
 8008ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ea8:	445a      	add	r2, fp
 8008eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8008eac:	f89a 3000 	ldrb.w	r3, [sl]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 80a2 	beq.w	8008ffa <_vfiprintf_r+0x20e>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ec0:	f10a 0a01 	add.w	sl, sl, #1
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	9307      	str	r3, [sp, #28]
 8008ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ece:	4654      	mov	r4, sl
 8008ed0:	2205      	movs	r2, #5
 8008ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ed6:	4858      	ldr	r0, [pc, #352]	; (8009038 <_vfiprintf_r+0x24c>)
 8008ed8:	f7f7 f98a 	bl	80001f0 <memchr>
 8008edc:	9a04      	ldr	r2, [sp, #16]
 8008ede:	b9d8      	cbnz	r0, 8008f18 <_vfiprintf_r+0x12c>
 8008ee0:	06d1      	lsls	r1, r2, #27
 8008ee2:	bf44      	itt	mi
 8008ee4:	2320      	movmi	r3, #32
 8008ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eea:	0713      	lsls	r3, r2, #28
 8008eec:	bf44      	itt	mi
 8008eee:	232b      	movmi	r3, #43	; 0x2b
 8008ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8008efa:	d015      	beq.n	8008f28 <_vfiprintf_r+0x13c>
 8008efc:	9a07      	ldr	r2, [sp, #28]
 8008efe:	4654      	mov	r4, sl
 8008f00:	2000      	movs	r0, #0
 8008f02:	f04f 0c0a 	mov.w	ip, #10
 8008f06:	4621      	mov	r1, r4
 8008f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f0c:	3b30      	subs	r3, #48	; 0x30
 8008f0e:	2b09      	cmp	r3, #9
 8008f10:	d94e      	bls.n	8008fb0 <_vfiprintf_r+0x1c4>
 8008f12:	b1b0      	cbz	r0, 8008f42 <_vfiprintf_r+0x156>
 8008f14:	9207      	str	r2, [sp, #28]
 8008f16:	e014      	b.n	8008f42 <_vfiprintf_r+0x156>
 8008f18:	eba0 0308 	sub.w	r3, r0, r8
 8008f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f20:	4313      	orrs	r3, r2
 8008f22:	9304      	str	r3, [sp, #16]
 8008f24:	46a2      	mov	sl, r4
 8008f26:	e7d2      	b.n	8008ece <_vfiprintf_r+0xe2>
 8008f28:	9b03      	ldr	r3, [sp, #12]
 8008f2a:	1d19      	adds	r1, r3, #4
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	9103      	str	r1, [sp, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	bfbb      	ittet	lt
 8008f34:	425b      	neglt	r3, r3
 8008f36:	f042 0202 	orrlt.w	r2, r2, #2
 8008f3a:	9307      	strge	r3, [sp, #28]
 8008f3c:	9307      	strlt	r3, [sp, #28]
 8008f3e:	bfb8      	it	lt
 8008f40:	9204      	strlt	r2, [sp, #16]
 8008f42:	7823      	ldrb	r3, [r4, #0]
 8008f44:	2b2e      	cmp	r3, #46	; 0x2e
 8008f46:	d10c      	bne.n	8008f62 <_vfiprintf_r+0x176>
 8008f48:	7863      	ldrb	r3, [r4, #1]
 8008f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f4c:	d135      	bne.n	8008fba <_vfiprintf_r+0x1ce>
 8008f4e:	9b03      	ldr	r3, [sp, #12]
 8008f50:	1d1a      	adds	r2, r3, #4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	9203      	str	r2, [sp, #12]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	bfb8      	it	lt
 8008f5a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f5e:	3402      	adds	r4, #2
 8008f60:	9305      	str	r3, [sp, #20]
 8008f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009048 <_vfiprintf_r+0x25c>
 8008f66:	7821      	ldrb	r1, [r4, #0]
 8008f68:	2203      	movs	r2, #3
 8008f6a:	4650      	mov	r0, sl
 8008f6c:	f7f7 f940 	bl	80001f0 <memchr>
 8008f70:	b140      	cbz	r0, 8008f84 <_vfiprintf_r+0x198>
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	eba0 000a 	sub.w	r0, r0, sl
 8008f78:	fa03 f000 	lsl.w	r0, r3, r0
 8008f7c:	9b04      	ldr	r3, [sp, #16]
 8008f7e:	4303      	orrs	r3, r0
 8008f80:	3401      	adds	r4, #1
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f88:	482c      	ldr	r0, [pc, #176]	; (800903c <_vfiprintf_r+0x250>)
 8008f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f8e:	2206      	movs	r2, #6
 8008f90:	f7f7 f92e 	bl	80001f0 <memchr>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d03f      	beq.n	8009018 <_vfiprintf_r+0x22c>
 8008f98:	4b29      	ldr	r3, [pc, #164]	; (8009040 <_vfiprintf_r+0x254>)
 8008f9a:	bb1b      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x1f8>
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	3307      	adds	r3, #7
 8008fa0:	f023 0307 	bic.w	r3, r3, #7
 8008fa4:	3308      	adds	r3, #8
 8008fa6:	9303      	str	r3, [sp, #12]
 8008fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008faa:	443b      	add	r3, r7
 8008fac:	9309      	str	r3, [sp, #36]	; 0x24
 8008fae:	e767      	b.n	8008e80 <_vfiprintf_r+0x94>
 8008fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fb4:	460c      	mov	r4, r1
 8008fb6:	2001      	movs	r0, #1
 8008fb8:	e7a5      	b.n	8008f06 <_vfiprintf_r+0x11a>
 8008fba:	2300      	movs	r3, #0
 8008fbc:	3401      	adds	r4, #1
 8008fbe:	9305      	str	r3, [sp, #20]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f04f 0c0a 	mov.w	ip, #10
 8008fc6:	4620      	mov	r0, r4
 8008fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fcc:	3a30      	subs	r2, #48	; 0x30
 8008fce:	2a09      	cmp	r2, #9
 8008fd0:	d903      	bls.n	8008fda <_vfiprintf_r+0x1ee>
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0c5      	beq.n	8008f62 <_vfiprintf_r+0x176>
 8008fd6:	9105      	str	r1, [sp, #20]
 8008fd8:	e7c3      	b.n	8008f62 <_vfiprintf_r+0x176>
 8008fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e7f0      	b.n	8008fc6 <_vfiprintf_r+0x1da>
 8008fe4:	ab03      	add	r3, sp, #12
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	462a      	mov	r2, r5
 8008fea:	4b16      	ldr	r3, [pc, #88]	; (8009044 <_vfiprintf_r+0x258>)
 8008fec:	a904      	add	r1, sp, #16
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7fd fe22 	bl	8006c38 <_printf_float>
 8008ff4:	4607      	mov	r7, r0
 8008ff6:	1c78      	adds	r0, r7, #1
 8008ff8:	d1d6      	bne.n	8008fa8 <_vfiprintf_r+0x1bc>
 8008ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ffc:	07d9      	lsls	r1, r3, #31
 8008ffe:	d405      	bmi.n	800900c <_vfiprintf_r+0x220>
 8009000:	89ab      	ldrh	r3, [r5, #12]
 8009002:	059a      	lsls	r2, r3, #22
 8009004:	d402      	bmi.n	800900c <_vfiprintf_r+0x220>
 8009006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009008:	f000 faaf 	bl	800956a <__retarget_lock_release_recursive>
 800900c:	89ab      	ldrh	r3, [r5, #12]
 800900e:	065b      	lsls	r3, r3, #25
 8009010:	f53f af12 	bmi.w	8008e38 <_vfiprintf_r+0x4c>
 8009014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009016:	e711      	b.n	8008e3c <_vfiprintf_r+0x50>
 8009018:	ab03      	add	r3, sp, #12
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	462a      	mov	r2, r5
 800901e:	4b09      	ldr	r3, [pc, #36]	; (8009044 <_vfiprintf_r+0x258>)
 8009020:	a904      	add	r1, sp, #16
 8009022:	4630      	mov	r0, r6
 8009024:	f7fe f8ac 	bl	8007180 <_printf_i>
 8009028:	e7e4      	b.n	8008ff4 <_vfiprintf_r+0x208>
 800902a:	bf00      	nop
 800902c:	0800c0f4 	.word	0x0800c0f4
 8009030:	0800c114 	.word	0x0800c114
 8009034:	0800c0d4 	.word	0x0800c0d4
 8009038:	0800bf7c 	.word	0x0800bf7c
 800903c:	0800bf86 	.word	0x0800bf86
 8009040:	08006c39 	.word	0x08006c39
 8009044:	08008dc7 	.word	0x08008dc7
 8009048:	0800bf82 	.word	0x0800bf82

0800904c <__swbuf_r>:
 800904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904e:	460e      	mov	r6, r1
 8009050:	4614      	mov	r4, r2
 8009052:	4605      	mov	r5, r0
 8009054:	b118      	cbz	r0, 800905e <__swbuf_r+0x12>
 8009056:	6983      	ldr	r3, [r0, #24]
 8009058:	b90b      	cbnz	r3, 800905e <__swbuf_r+0x12>
 800905a:	f000 f9e7 	bl	800942c <__sinit>
 800905e:	4b21      	ldr	r3, [pc, #132]	; (80090e4 <__swbuf_r+0x98>)
 8009060:	429c      	cmp	r4, r3
 8009062:	d12b      	bne.n	80090bc <__swbuf_r+0x70>
 8009064:	686c      	ldr	r4, [r5, #4]
 8009066:	69a3      	ldr	r3, [r4, #24]
 8009068:	60a3      	str	r3, [r4, #8]
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	071a      	lsls	r2, r3, #28
 800906e:	d52f      	bpl.n	80090d0 <__swbuf_r+0x84>
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	b36b      	cbz	r3, 80090d0 <__swbuf_r+0x84>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	6820      	ldr	r0, [r4, #0]
 8009078:	1ac0      	subs	r0, r0, r3
 800907a:	6963      	ldr	r3, [r4, #20]
 800907c:	b2f6      	uxtb	r6, r6
 800907e:	4283      	cmp	r3, r0
 8009080:	4637      	mov	r7, r6
 8009082:	dc04      	bgt.n	800908e <__swbuf_r+0x42>
 8009084:	4621      	mov	r1, r4
 8009086:	4628      	mov	r0, r5
 8009088:	f000 f93c 	bl	8009304 <_fflush_r>
 800908c:	bb30      	cbnz	r0, 80090dc <__swbuf_r+0x90>
 800908e:	68a3      	ldr	r3, [r4, #8]
 8009090:	3b01      	subs	r3, #1
 8009092:	60a3      	str	r3, [r4, #8]
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	1c5a      	adds	r2, r3, #1
 8009098:	6022      	str	r2, [r4, #0]
 800909a:	701e      	strb	r6, [r3, #0]
 800909c:	6963      	ldr	r3, [r4, #20]
 800909e:	3001      	adds	r0, #1
 80090a0:	4283      	cmp	r3, r0
 80090a2:	d004      	beq.n	80090ae <__swbuf_r+0x62>
 80090a4:	89a3      	ldrh	r3, [r4, #12]
 80090a6:	07db      	lsls	r3, r3, #31
 80090a8:	d506      	bpl.n	80090b8 <__swbuf_r+0x6c>
 80090aa:	2e0a      	cmp	r6, #10
 80090ac:	d104      	bne.n	80090b8 <__swbuf_r+0x6c>
 80090ae:	4621      	mov	r1, r4
 80090b0:	4628      	mov	r0, r5
 80090b2:	f000 f927 	bl	8009304 <_fflush_r>
 80090b6:	b988      	cbnz	r0, 80090dc <__swbuf_r+0x90>
 80090b8:	4638      	mov	r0, r7
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090bc:	4b0a      	ldr	r3, [pc, #40]	; (80090e8 <__swbuf_r+0x9c>)
 80090be:	429c      	cmp	r4, r3
 80090c0:	d101      	bne.n	80090c6 <__swbuf_r+0x7a>
 80090c2:	68ac      	ldr	r4, [r5, #8]
 80090c4:	e7cf      	b.n	8009066 <__swbuf_r+0x1a>
 80090c6:	4b09      	ldr	r3, [pc, #36]	; (80090ec <__swbuf_r+0xa0>)
 80090c8:	429c      	cmp	r4, r3
 80090ca:	bf08      	it	eq
 80090cc:	68ec      	ldreq	r4, [r5, #12]
 80090ce:	e7ca      	b.n	8009066 <__swbuf_r+0x1a>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f000 f81a 	bl	800910c <__swsetup_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0cb      	beq.n	8009074 <__swbuf_r+0x28>
 80090dc:	f04f 37ff 	mov.w	r7, #4294967295
 80090e0:	e7ea      	b.n	80090b8 <__swbuf_r+0x6c>
 80090e2:	bf00      	nop
 80090e4:	0800c0f4 	.word	0x0800c0f4
 80090e8:	0800c114 	.word	0x0800c114
 80090ec:	0800c0d4 	.word	0x0800c0d4

080090f0 <__ascii_wctomb>:
 80090f0:	b149      	cbz	r1, 8009106 <__ascii_wctomb+0x16>
 80090f2:	2aff      	cmp	r2, #255	; 0xff
 80090f4:	bf85      	ittet	hi
 80090f6:	238a      	movhi	r3, #138	; 0x8a
 80090f8:	6003      	strhi	r3, [r0, #0]
 80090fa:	700a      	strbls	r2, [r1, #0]
 80090fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8009100:	bf98      	it	ls
 8009102:	2001      	movls	r0, #1
 8009104:	4770      	bx	lr
 8009106:	4608      	mov	r0, r1
 8009108:	4770      	bx	lr
	...

0800910c <__swsetup_r>:
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <__swsetup_r+0xcc>)
 800910e:	b570      	push	{r4, r5, r6, lr}
 8009110:	681d      	ldr	r5, [r3, #0]
 8009112:	4606      	mov	r6, r0
 8009114:	460c      	mov	r4, r1
 8009116:	b125      	cbz	r5, 8009122 <__swsetup_r+0x16>
 8009118:	69ab      	ldr	r3, [r5, #24]
 800911a:	b913      	cbnz	r3, 8009122 <__swsetup_r+0x16>
 800911c:	4628      	mov	r0, r5
 800911e:	f000 f985 	bl	800942c <__sinit>
 8009122:	4b2e      	ldr	r3, [pc, #184]	; (80091dc <__swsetup_r+0xd0>)
 8009124:	429c      	cmp	r4, r3
 8009126:	d10f      	bne.n	8009148 <__swsetup_r+0x3c>
 8009128:	686c      	ldr	r4, [r5, #4]
 800912a:	89a3      	ldrh	r3, [r4, #12]
 800912c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009130:	0719      	lsls	r1, r3, #28
 8009132:	d42c      	bmi.n	800918e <__swsetup_r+0x82>
 8009134:	06dd      	lsls	r5, r3, #27
 8009136:	d411      	bmi.n	800915c <__swsetup_r+0x50>
 8009138:	2309      	movs	r3, #9
 800913a:	6033      	str	r3, [r6, #0]
 800913c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009140:	81a3      	strh	r3, [r4, #12]
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	e03e      	b.n	80091c6 <__swsetup_r+0xba>
 8009148:	4b25      	ldr	r3, [pc, #148]	; (80091e0 <__swsetup_r+0xd4>)
 800914a:	429c      	cmp	r4, r3
 800914c:	d101      	bne.n	8009152 <__swsetup_r+0x46>
 800914e:	68ac      	ldr	r4, [r5, #8]
 8009150:	e7eb      	b.n	800912a <__swsetup_r+0x1e>
 8009152:	4b24      	ldr	r3, [pc, #144]	; (80091e4 <__swsetup_r+0xd8>)
 8009154:	429c      	cmp	r4, r3
 8009156:	bf08      	it	eq
 8009158:	68ec      	ldreq	r4, [r5, #12]
 800915a:	e7e6      	b.n	800912a <__swsetup_r+0x1e>
 800915c:	0758      	lsls	r0, r3, #29
 800915e:	d512      	bpl.n	8009186 <__swsetup_r+0x7a>
 8009160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009162:	b141      	cbz	r1, 8009176 <__swsetup_r+0x6a>
 8009164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009168:	4299      	cmp	r1, r3
 800916a:	d002      	beq.n	8009172 <__swsetup_r+0x66>
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff fb6f 	bl	8008850 <_free_r>
 8009172:	2300      	movs	r3, #0
 8009174:	6363      	str	r3, [r4, #52]	; 0x34
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800917c:	81a3      	strh	r3, [r4, #12]
 800917e:	2300      	movs	r3, #0
 8009180:	6063      	str	r3, [r4, #4]
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	6023      	str	r3, [r4, #0]
 8009186:	89a3      	ldrh	r3, [r4, #12]
 8009188:	f043 0308 	orr.w	r3, r3, #8
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	b94b      	cbnz	r3, 80091a6 <__swsetup_r+0x9a>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800919c:	d003      	beq.n	80091a6 <__swsetup_r+0x9a>
 800919e:	4621      	mov	r1, r4
 80091a0:	4630      	mov	r0, r6
 80091a2:	f000 fa07 	bl	80095b4 <__smakebuf_r>
 80091a6:	89a0      	ldrh	r0, [r4, #12]
 80091a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ac:	f010 0301 	ands.w	r3, r0, #1
 80091b0:	d00a      	beq.n	80091c8 <__swsetup_r+0xbc>
 80091b2:	2300      	movs	r3, #0
 80091b4:	60a3      	str	r3, [r4, #8]
 80091b6:	6963      	ldr	r3, [r4, #20]
 80091b8:	425b      	negs	r3, r3
 80091ba:	61a3      	str	r3, [r4, #24]
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	b943      	cbnz	r3, 80091d2 <__swsetup_r+0xc6>
 80091c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091c4:	d1ba      	bne.n	800913c <__swsetup_r+0x30>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	0781      	lsls	r1, r0, #30
 80091ca:	bf58      	it	pl
 80091cc:	6963      	ldrpl	r3, [r4, #20]
 80091ce:	60a3      	str	r3, [r4, #8]
 80091d0:	e7f4      	b.n	80091bc <__swsetup_r+0xb0>
 80091d2:	2000      	movs	r0, #0
 80091d4:	e7f7      	b.n	80091c6 <__swsetup_r+0xba>
 80091d6:	bf00      	nop
 80091d8:	2000010c 	.word	0x2000010c
 80091dc:	0800c0f4 	.word	0x0800c0f4
 80091e0:	0800c114 	.word	0x0800c114
 80091e4:	0800c0d4 	.word	0x0800c0d4

080091e8 <abort>:
 80091e8:	b508      	push	{r3, lr}
 80091ea:	2006      	movs	r0, #6
 80091ec:	f000 fa52 	bl	8009694 <raise>
 80091f0:	2001      	movs	r0, #1
 80091f2:	f7f9 ffa1 	bl	8003138 <_exit>
	...

080091f8 <__sflush_r>:
 80091f8:	898a      	ldrh	r2, [r1, #12]
 80091fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091fe:	4605      	mov	r5, r0
 8009200:	0710      	lsls	r0, r2, #28
 8009202:	460c      	mov	r4, r1
 8009204:	d458      	bmi.n	80092b8 <__sflush_r+0xc0>
 8009206:	684b      	ldr	r3, [r1, #4]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dc05      	bgt.n	8009218 <__sflush_r+0x20>
 800920c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	dc02      	bgt.n	8009218 <__sflush_r+0x20>
 8009212:	2000      	movs	r0, #0
 8009214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800921a:	2e00      	cmp	r6, #0
 800921c:	d0f9      	beq.n	8009212 <__sflush_r+0x1a>
 800921e:	2300      	movs	r3, #0
 8009220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009224:	682f      	ldr	r7, [r5, #0]
 8009226:	602b      	str	r3, [r5, #0]
 8009228:	d032      	beq.n	8009290 <__sflush_r+0x98>
 800922a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	075a      	lsls	r2, r3, #29
 8009230:	d505      	bpl.n	800923e <__sflush_r+0x46>
 8009232:	6863      	ldr	r3, [r4, #4]
 8009234:	1ac0      	subs	r0, r0, r3
 8009236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009238:	b10b      	cbz	r3, 800923e <__sflush_r+0x46>
 800923a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800923c:	1ac0      	subs	r0, r0, r3
 800923e:	2300      	movs	r3, #0
 8009240:	4602      	mov	r2, r0
 8009242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009244:	6a21      	ldr	r1, [r4, #32]
 8009246:	4628      	mov	r0, r5
 8009248:	47b0      	blx	r6
 800924a:	1c43      	adds	r3, r0, #1
 800924c:	89a3      	ldrh	r3, [r4, #12]
 800924e:	d106      	bne.n	800925e <__sflush_r+0x66>
 8009250:	6829      	ldr	r1, [r5, #0]
 8009252:	291d      	cmp	r1, #29
 8009254:	d82c      	bhi.n	80092b0 <__sflush_r+0xb8>
 8009256:	4a2a      	ldr	r2, [pc, #168]	; (8009300 <__sflush_r+0x108>)
 8009258:	40ca      	lsrs	r2, r1
 800925a:	07d6      	lsls	r6, r2, #31
 800925c:	d528      	bpl.n	80092b0 <__sflush_r+0xb8>
 800925e:	2200      	movs	r2, #0
 8009260:	6062      	str	r2, [r4, #4]
 8009262:	04d9      	lsls	r1, r3, #19
 8009264:	6922      	ldr	r2, [r4, #16]
 8009266:	6022      	str	r2, [r4, #0]
 8009268:	d504      	bpl.n	8009274 <__sflush_r+0x7c>
 800926a:	1c42      	adds	r2, r0, #1
 800926c:	d101      	bne.n	8009272 <__sflush_r+0x7a>
 800926e:	682b      	ldr	r3, [r5, #0]
 8009270:	b903      	cbnz	r3, 8009274 <__sflush_r+0x7c>
 8009272:	6560      	str	r0, [r4, #84]	; 0x54
 8009274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009276:	602f      	str	r7, [r5, #0]
 8009278:	2900      	cmp	r1, #0
 800927a:	d0ca      	beq.n	8009212 <__sflush_r+0x1a>
 800927c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009280:	4299      	cmp	r1, r3
 8009282:	d002      	beq.n	800928a <__sflush_r+0x92>
 8009284:	4628      	mov	r0, r5
 8009286:	f7ff fae3 	bl	8008850 <_free_r>
 800928a:	2000      	movs	r0, #0
 800928c:	6360      	str	r0, [r4, #52]	; 0x34
 800928e:	e7c1      	b.n	8009214 <__sflush_r+0x1c>
 8009290:	6a21      	ldr	r1, [r4, #32]
 8009292:	2301      	movs	r3, #1
 8009294:	4628      	mov	r0, r5
 8009296:	47b0      	blx	r6
 8009298:	1c41      	adds	r1, r0, #1
 800929a:	d1c7      	bne.n	800922c <__sflush_r+0x34>
 800929c:	682b      	ldr	r3, [r5, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0c4      	beq.n	800922c <__sflush_r+0x34>
 80092a2:	2b1d      	cmp	r3, #29
 80092a4:	d001      	beq.n	80092aa <__sflush_r+0xb2>
 80092a6:	2b16      	cmp	r3, #22
 80092a8:	d101      	bne.n	80092ae <__sflush_r+0xb6>
 80092aa:	602f      	str	r7, [r5, #0]
 80092ac:	e7b1      	b.n	8009212 <__sflush_r+0x1a>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092b4:	81a3      	strh	r3, [r4, #12]
 80092b6:	e7ad      	b.n	8009214 <__sflush_r+0x1c>
 80092b8:	690f      	ldr	r7, [r1, #16]
 80092ba:	2f00      	cmp	r7, #0
 80092bc:	d0a9      	beq.n	8009212 <__sflush_r+0x1a>
 80092be:	0793      	lsls	r3, r2, #30
 80092c0:	680e      	ldr	r6, [r1, #0]
 80092c2:	bf08      	it	eq
 80092c4:	694b      	ldreq	r3, [r1, #20]
 80092c6:	600f      	str	r7, [r1, #0]
 80092c8:	bf18      	it	ne
 80092ca:	2300      	movne	r3, #0
 80092cc:	eba6 0807 	sub.w	r8, r6, r7
 80092d0:	608b      	str	r3, [r1, #8]
 80092d2:	f1b8 0f00 	cmp.w	r8, #0
 80092d6:	dd9c      	ble.n	8009212 <__sflush_r+0x1a>
 80092d8:	6a21      	ldr	r1, [r4, #32]
 80092da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092dc:	4643      	mov	r3, r8
 80092de:	463a      	mov	r2, r7
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b0      	blx	r6
 80092e4:	2800      	cmp	r0, #0
 80092e6:	dc06      	bgt.n	80092f6 <__sflush_r+0xfe>
 80092e8:	89a3      	ldrh	r3, [r4, #12]
 80092ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092ee:	81a3      	strh	r3, [r4, #12]
 80092f0:	f04f 30ff 	mov.w	r0, #4294967295
 80092f4:	e78e      	b.n	8009214 <__sflush_r+0x1c>
 80092f6:	4407      	add	r7, r0
 80092f8:	eba8 0800 	sub.w	r8, r8, r0
 80092fc:	e7e9      	b.n	80092d2 <__sflush_r+0xda>
 80092fe:	bf00      	nop
 8009300:	20400001 	.word	0x20400001

08009304 <_fflush_r>:
 8009304:	b538      	push	{r3, r4, r5, lr}
 8009306:	690b      	ldr	r3, [r1, #16]
 8009308:	4605      	mov	r5, r0
 800930a:	460c      	mov	r4, r1
 800930c:	b913      	cbnz	r3, 8009314 <_fflush_r+0x10>
 800930e:	2500      	movs	r5, #0
 8009310:	4628      	mov	r0, r5
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	b118      	cbz	r0, 800931e <_fflush_r+0x1a>
 8009316:	6983      	ldr	r3, [r0, #24]
 8009318:	b90b      	cbnz	r3, 800931e <_fflush_r+0x1a>
 800931a:	f000 f887 	bl	800942c <__sinit>
 800931e:	4b14      	ldr	r3, [pc, #80]	; (8009370 <_fflush_r+0x6c>)
 8009320:	429c      	cmp	r4, r3
 8009322:	d11b      	bne.n	800935c <_fflush_r+0x58>
 8009324:	686c      	ldr	r4, [r5, #4]
 8009326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d0ef      	beq.n	800930e <_fflush_r+0xa>
 800932e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009330:	07d0      	lsls	r0, r2, #31
 8009332:	d404      	bmi.n	800933e <_fflush_r+0x3a>
 8009334:	0599      	lsls	r1, r3, #22
 8009336:	d402      	bmi.n	800933e <_fflush_r+0x3a>
 8009338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800933a:	f000 f915 	bl	8009568 <__retarget_lock_acquire_recursive>
 800933e:	4628      	mov	r0, r5
 8009340:	4621      	mov	r1, r4
 8009342:	f7ff ff59 	bl	80091f8 <__sflush_r>
 8009346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009348:	07da      	lsls	r2, r3, #31
 800934a:	4605      	mov	r5, r0
 800934c:	d4e0      	bmi.n	8009310 <_fflush_r+0xc>
 800934e:	89a3      	ldrh	r3, [r4, #12]
 8009350:	059b      	lsls	r3, r3, #22
 8009352:	d4dd      	bmi.n	8009310 <_fflush_r+0xc>
 8009354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009356:	f000 f908 	bl	800956a <__retarget_lock_release_recursive>
 800935a:	e7d9      	b.n	8009310 <_fflush_r+0xc>
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <_fflush_r+0x70>)
 800935e:	429c      	cmp	r4, r3
 8009360:	d101      	bne.n	8009366 <_fflush_r+0x62>
 8009362:	68ac      	ldr	r4, [r5, #8]
 8009364:	e7df      	b.n	8009326 <_fflush_r+0x22>
 8009366:	4b04      	ldr	r3, [pc, #16]	; (8009378 <_fflush_r+0x74>)
 8009368:	429c      	cmp	r4, r3
 800936a:	bf08      	it	eq
 800936c:	68ec      	ldreq	r4, [r5, #12]
 800936e:	e7da      	b.n	8009326 <_fflush_r+0x22>
 8009370:	0800c0f4 	.word	0x0800c0f4
 8009374:	0800c114 	.word	0x0800c114
 8009378:	0800c0d4 	.word	0x0800c0d4

0800937c <std>:
 800937c:	2300      	movs	r3, #0
 800937e:	b510      	push	{r4, lr}
 8009380:	4604      	mov	r4, r0
 8009382:	e9c0 3300 	strd	r3, r3, [r0]
 8009386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800938a:	6083      	str	r3, [r0, #8]
 800938c:	8181      	strh	r1, [r0, #12]
 800938e:	6643      	str	r3, [r0, #100]	; 0x64
 8009390:	81c2      	strh	r2, [r0, #14]
 8009392:	6183      	str	r3, [r0, #24]
 8009394:	4619      	mov	r1, r3
 8009396:	2208      	movs	r2, #8
 8009398:	305c      	adds	r0, #92	; 0x5c
 800939a:	f7fd fba5 	bl	8006ae8 <memset>
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <std+0x38>)
 80093a0:	6263      	str	r3, [r4, #36]	; 0x24
 80093a2:	4b05      	ldr	r3, [pc, #20]	; (80093b8 <std+0x3c>)
 80093a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80093a6:	4b05      	ldr	r3, [pc, #20]	; (80093bc <std+0x40>)
 80093a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <std+0x44>)
 80093ac:	6224      	str	r4, [r4, #32]
 80093ae:	6323      	str	r3, [r4, #48]	; 0x30
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	bf00      	nop
 80093b4:	080096cd 	.word	0x080096cd
 80093b8:	080096ef 	.word	0x080096ef
 80093bc:	08009727 	.word	0x08009727
 80093c0:	0800974b 	.word	0x0800974b

080093c4 <_cleanup_r>:
 80093c4:	4901      	ldr	r1, [pc, #4]	; (80093cc <_cleanup_r+0x8>)
 80093c6:	f000 b8af 	b.w	8009528 <_fwalk_reent>
 80093ca:	bf00      	nop
 80093cc:	08009305 	.word	0x08009305

080093d0 <__sfmoreglue>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	1e4a      	subs	r2, r1, #1
 80093d4:	2568      	movs	r5, #104	; 0x68
 80093d6:	4355      	muls	r5, r2
 80093d8:	460e      	mov	r6, r1
 80093da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093de:	f7ff fa87 	bl	80088f0 <_malloc_r>
 80093e2:	4604      	mov	r4, r0
 80093e4:	b140      	cbz	r0, 80093f8 <__sfmoreglue+0x28>
 80093e6:	2100      	movs	r1, #0
 80093e8:	e9c0 1600 	strd	r1, r6, [r0]
 80093ec:	300c      	adds	r0, #12
 80093ee:	60a0      	str	r0, [r4, #8]
 80093f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093f4:	f7fd fb78 	bl	8006ae8 <memset>
 80093f8:	4620      	mov	r0, r4
 80093fa:	bd70      	pop	{r4, r5, r6, pc}

080093fc <__sfp_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sfp_lock_acquire+0x8>)
 80093fe:	f000 b8b3 	b.w	8009568 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	200005e8 	.word	0x200005e8

08009408 <__sfp_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sfp_lock_release+0x8>)
 800940a:	f000 b8ae 	b.w	800956a <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	200005e8 	.word	0x200005e8

08009414 <__sinit_lock_acquire>:
 8009414:	4801      	ldr	r0, [pc, #4]	; (800941c <__sinit_lock_acquire+0x8>)
 8009416:	f000 b8a7 	b.w	8009568 <__retarget_lock_acquire_recursive>
 800941a:	bf00      	nop
 800941c:	200005e3 	.word	0x200005e3

08009420 <__sinit_lock_release>:
 8009420:	4801      	ldr	r0, [pc, #4]	; (8009428 <__sinit_lock_release+0x8>)
 8009422:	f000 b8a2 	b.w	800956a <__retarget_lock_release_recursive>
 8009426:	bf00      	nop
 8009428:	200005e3 	.word	0x200005e3

0800942c <__sinit>:
 800942c:	b510      	push	{r4, lr}
 800942e:	4604      	mov	r4, r0
 8009430:	f7ff fff0 	bl	8009414 <__sinit_lock_acquire>
 8009434:	69a3      	ldr	r3, [r4, #24]
 8009436:	b11b      	cbz	r3, 8009440 <__sinit+0x14>
 8009438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800943c:	f7ff bff0 	b.w	8009420 <__sinit_lock_release>
 8009440:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009444:	6523      	str	r3, [r4, #80]	; 0x50
 8009446:	4b13      	ldr	r3, [pc, #76]	; (8009494 <__sinit+0x68>)
 8009448:	4a13      	ldr	r2, [pc, #76]	; (8009498 <__sinit+0x6c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	62a2      	str	r2, [r4, #40]	; 0x28
 800944e:	42a3      	cmp	r3, r4
 8009450:	bf04      	itt	eq
 8009452:	2301      	moveq	r3, #1
 8009454:	61a3      	streq	r3, [r4, #24]
 8009456:	4620      	mov	r0, r4
 8009458:	f000 f820 	bl	800949c <__sfp>
 800945c:	6060      	str	r0, [r4, #4]
 800945e:	4620      	mov	r0, r4
 8009460:	f000 f81c 	bl	800949c <__sfp>
 8009464:	60a0      	str	r0, [r4, #8]
 8009466:	4620      	mov	r0, r4
 8009468:	f000 f818 	bl	800949c <__sfp>
 800946c:	2200      	movs	r2, #0
 800946e:	60e0      	str	r0, [r4, #12]
 8009470:	2104      	movs	r1, #4
 8009472:	6860      	ldr	r0, [r4, #4]
 8009474:	f7ff ff82 	bl	800937c <std>
 8009478:	68a0      	ldr	r0, [r4, #8]
 800947a:	2201      	movs	r2, #1
 800947c:	2109      	movs	r1, #9
 800947e:	f7ff ff7d 	bl	800937c <std>
 8009482:	68e0      	ldr	r0, [r4, #12]
 8009484:	2202      	movs	r2, #2
 8009486:	2112      	movs	r1, #18
 8009488:	f7ff ff78 	bl	800937c <std>
 800948c:	2301      	movs	r3, #1
 800948e:	61a3      	str	r3, [r4, #24]
 8009490:	e7d2      	b.n	8009438 <__sinit+0xc>
 8009492:	bf00      	nop
 8009494:	0800bd50 	.word	0x0800bd50
 8009498:	080093c5 	.word	0x080093c5

0800949c <__sfp>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	4607      	mov	r7, r0
 80094a0:	f7ff ffac 	bl	80093fc <__sfp_lock_acquire>
 80094a4:	4b1e      	ldr	r3, [pc, #120]	; (8009520 <__sfp+0x84>)
 80094a6:	681e      	ldr	r6, [r3, #0]
 80094a8:	69b3      	ldr	r3, [r6, #24]
 80094aa:	b913      	cbnz	r3, 80094b2 <__sfp+0x16>
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff ffbd 	bl	800942c <__sinit>
 80094b2:	3648      	adds	r6, #72	; 0x48
 80094b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80094b8:	3b01      	subs	r3, #1
 80094ba:	d503      	bpl.n	80094c4 <__sfp+0x28>
 80094bc:	6833      	ldr	r3, [r6, #0]
 80094be:	b30b      	cbz	r3, 8009504 <__sfp+0x68>
 80094c0:	6836      	ldr	r6, [r6, #0]
 80094c2:	e7f7      	b.n	80094b4 <__sfp+0x18>
 80094c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80094c8:	b9d5      	cbnz	r5, 8009500 <__sfp+0x64>
 80094ca:	4b16      	ldr	r3, [pc, #88]	; (8009524 <__sfp+0x88>)
 80094cc:	60e3      	str	r3, [r4, #12]
 80094ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80094d2:	6665      	str	r5, [r4, #100]	; 0x64
 80094d4:	f000 f847 	bl	8009566 <__retarget_lock_init_recursive>
 80094d8:	f7ff ff96 	bl	8009408 <__sfp_lock_release>
 80094dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80094e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80094e4:	6025      	str	r5, [r4, #0]
 80094e6:	61a5      	str	r5, [r4, #24]
 80094e8:	2208      	movs	r2, #8
 80094ea:	4629      	mov	r1, r5
 80094ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094f0:	f7fd fafa 	bl	8006ae8 <memset>
 80094f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094fc:	4620      	mov	r0, r4
 80094fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009500:	3468      	adds	r4, #104	; 0x68
 8009502:	e7d9      	b.n	80094b8 <__sfp+0x1c>
 8009504:	2104      	movs	r1, #4
 8009506:	4638      	mov	r0, r7
 8009508:	f7ff ff62 	bl	80093d0 <__sfmoreglue>
 800950c:	4604      	mov	r4, r0
 800950e:	6030      	str	r0, [r6, #0]
 8009510:	2800      	cmp	r0, #0
 8009512:	d1d5      	bne.n	80094c0 <__sfp+0x24>
 8009514:	f7ff ff78 	bl	8009408 <__sfp_lock_release>
 8009518:	230c      	movs	r3, #12
 800951a:	603b      	str	r3, [r7, #0]
 800951c:	e7ee      	b.n	80094fc <__sfp+0x60>
 800951e:	bf00      	nop
 8009520:	0800bd50 	.word	0x0800bd50
 8009524:	ffff0001 	.word	0xffff0001

08009528 <_fwalk_reent>:
 8009528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800952c:	4606      	mov	r6, r0
 800952e:	4688      	mov	r8, r1
 8009530:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009534:	2700      	movs	r7, #0
 8009536:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800953a:	f1b9 0901 	subs.w	r9, r9, #1
 800953e:	d505      	bpl.n	800954c <_fwalk_reent+0x24>
 8009540:	6824      	ldr	r4, [r4, #0]
 8009542:	2c00      	cmp	r4, #0
 8009544:	d1f7      	bne.n	8009536 <_fwalk_reent+0xe>
 8009546:	4638      	mov	r0, r7
 8009548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954c:	89ab      	ldrh	r3, [r5, #12]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d907      	bls.n	8009562 <_fwalk_reent+0x3a>
 8009552:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009556:	3301      	adds	r3, #1
 8009558:	d003      	beq.n	8009562 <_fwalk_reent+0x3a>
 800955a:	4629      	mov	r1, r5
 800955c:	4630      	mov	r0, r6
 800955e:	47c0      	blx	r8
 8009560:	4307      	orrs	r7, r0
 8009562:	3568      	adds	r5, #104	; 0x68
 8009564:	e7e9      	b.n	800953a <_fwalk_reent+0x12>

08009566 <__retarget_lock_init_recursive>:
 8009566:	4770      	bx	lr

08009568 <__retarget_lock_acquire_recursive>:
 8009568:	4770      	bx	lr

0800956a <__retarget_lock_release_recursive>:
 800956a:	4770      	bx	lr

0800956c <__swhatbuf_r>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	460e      	mov	r6, r1
 8009570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009574:	2900      	cmp	r1, #0
 8009576:	b096      	sub	sp, #88	; 0x58
 8009578:	4614      	mov	r4, r2
 800957a:	461d      	mov	r5, r3
 800957c:	da07      	bge.n	800958e <__swhatbuf_r+0x22>
 800957e:	2300      	movs	r3, #0
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	89b3      	ldrh	r3, [r6, #12]
 8009584:	061a      	lsls	r2, r3, #24
 8009586:	d410      	bmi.n	80095aa <__swhatbuf_r+0x3e>
 8009588:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800958c:	e00e      	b.n	80095ac <__swhatbuf_r+0x40>
 800958e:	466a      	mov	r2, sp
 8009590:	f000 f902 	bl	8009798 <_fstat_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	dbf2      	blt.n	800957e <__swhatbuf_r+0x12>
 8009598:	9a01      	ldr	r2, [sp, #4]
 800959a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800959e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80095a2:	425a      	negs	r2, r3
 80095a4:	415a      	adcs	r2, r3
 80095a6:	602a      	str	r2, [r5, #0]
 80095a8:	e7ee      	b.n	8009588 <__swhatbuf_r+0x1c>
 80095aa:	2340      	movs	r3, #64	; 0x40
 80095ac:	2000      	movs	r0, #0
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	b016      	add	sp, #88	; 0x58
 80095b2:	bd70      	pop	{r4, r5, r6, pc}

080095b4 <__smakebuf_r>:
 80095b4:	898b      	ldrh	r3, [r1, #12]
 80095b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095b8:	079d      	lsls	r5, r3, #30
 80095ba:	4606      	mov	r6, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	d507      	bpl.n	80095d0 <__smakebuf_r+0x1c>
 80095c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80095c4:	6023      	str	r3, [r4, #0]
 80095c6:	6123      	str	r3, [r4, #16]
 80095c8:	2301      	movs	r3, #1
 80095ca:	6163      	str	r3, [r4, #20]
 80095cc:	b002      	add	sp, #8
 80095ce:	bd70      	pop	{r4, r5, r6, pc}
 80095d0:	ab01      	add	r3, sp, #4
 80095d2:	466a      	mov	r2, sp
 80095d4:	f7ff ffca 	bl	800956c <__swhatbuf_r>
 80095d8:	9900      	ldr	r1, [sp, #0]
 80095da:	4605      	mov	r5, r0
 80095dc:	4630      	mov	r0, r6
 80095de:	f7ff f987 	bl	80088f0 <_malloc_r>
 80095e2:	b948      	cbnz	r0, 80095f8 <__smakebuf_r+0x44>
 80095e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095e8:	059a      	lsls	r2, r3, #22
 80095ea:	d4ef      	bmi.n	80095cc <__smakebuf_r+0x18>
 80095ec:	f023 0303 	bic.w	r3, r3, #3
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	81a3      	strh	r3, [r4, #12]
 80095f6:	e7e3      	b.n	80095c0 <__smakebuf_r+0xc>
 80095f8:	4b0d      	ldr	r3, [pc, #52]	; (8009630 <__smakebuf_r+0x7c>)
 80095fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80095fc:	89a3      	ldrh	r3, [r4, #12]
 80095fe:	6020      	str	r0, [r4, #0]
 8009600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009604:	81a3      	strh	r3, [r4, #12]
 8009606:	9b00      	ldr	r3, [sp, #0]
 8009608:	6163      	str	r3, [r4, #20]
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	6120      	str	r0, [r4, #16]
 800960e:	b15b      	cbz	r3, 8009628 <__smakebuf_r+0x74>
 8009610:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009614:	4630      	mov	r0, r6
 8009616:	f000 f8d1 	bl	80097bc <_isatty_r>
 800961a:	b128      	cbz	r0, 8009628 <__smakebuf_r+0x74>
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	f043 0301 	orr.w	r3, r3, #1
 8009626:	81a3      	strh	r3, [r4, #12]
 8009628:	89a0      	ldrh	r0, [r4, #12]
 800962a:	4305      	orrs	r5, r0
 800962c:	81a5      	strh	r5, [r4, #12]
 800962e:	e7cd      	b.n	80095cc <__smakebuf_r+0x18>
 8009630:	080093c5 	.word	0x080093c5

08009634 <_malloc_usable_size_r>:
 8009634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009638:	1f18      	subs	r0, r3, #4
 800963a:	2b00      	cmp	r3, #0
 800963c:	bfbc      	itt	lt
 800963e:	580b      	ldrlt	r3, [r1, r0]
 8009640:	18c0      	addlt	r0, r0, r3
 8009642:	4770      	bx	lr

08009644 <_raise_r>:
 8009644:	291f      	cmp	r1, #31
 8009646:	b538      	push	{r3, r4, r5, lr}
 8009648:	4604      	mov	r4, r0
 800964a:	460d      	mov	r5, r1
 800964c:	d904      	bls.n	8009658 <_raise_r+0x14>
 800964e:	2316      	movs	r3, #22
 8009650:	6003      	str	r3, [r0, #0]
 8009652:	f04f 30ff 	mov.w	r0, #4294967295
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800965a:	b112      	cbz	r2, 8009662 <_raise_r+0x1e>
 800965c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009660:	b94b      	cbnz	r3, 8009676 <_raise_r+0x32>
 8009662:	4620      	mov	r0, r4
 8009664:	f000 f830 	bl	80096c8 <_getpid_r>
 8009668:	462a      	mov	r2, r5
 800966a:	4601      	mov	r1, r0
 800966c:	4620      	mov	r0, r4
 800966e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009672:	f000 b817 	b.w	80096a4 <_kill_r>
 8009676:	2b01      	cmp	r3, #1
 8009678:	d00a      	beq.n	8009690 <_raise_r+0x4c>
 800967a:	1c59      	adds	r1, r3, #1
 800967c:	d103      	bne.n	8009686 <_raise_r+0x42>
 800967e:	2316      	movs	r3, #22
 8009680:	6003      	str	r3, [r0, #0]
 8009682:	2001      	movs	r0, #1
 8009684:	e7e7      	b.n	8009656 <_raise_r+0x12>
 8009686:	2400      	movs	r4, #0
 8009688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800968c:	4628      	mov	r0, r5
 800968e:	4798      	blx	r3
 8009690:	2000      	movs	r0, #0
 8009692:	e7e0      	b.n	8009656 <_raise_r+0x12>

08009694 <raise>:
 8009694:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <raise+0xc>)
 8009696:	4601      	mov	r1, r0
 8009698:	6818      	ldr	r0, [r3, #0]
 800969a:	f7ff bfd3 	b.w	8009644 <_raise_r>
 800969e:	bf00      	nop
 80096a0:	2000010c 	.word	0x2000010c

080096a4 <_kill_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4d07      	ldr	r5, [pc, #28]	; (80096c4 <_kill_r+0x20>)
 80096a8:	2300      	movs	r3, #0
 80096aa:	4604      	mov	r4, r0
 80096ac:	4608      	mov	r0, r1
 80096ae:	4611      	mov	r1, r2
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	f7f9 fd31 	bl	8003118 <_kill>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d102      	bne.n	80096c0 <_kill_r+0x1c>
 80096ba:	682b      	ldr	r3, [r5, #0]
 80096bc:	b103      	cbz	r3, 80096c0 <_kill_r+0x1c>
 80096be:	6023      	str	r3, [r4, #0]
 80096c0:	bd38      	pop	{r3, r4, r5, pc}
 80096c2:	bf00      	nop
 80096c4:	200005dc 	.word	0x200005dc

080096c8 <_getpid_r>:
 80096c8:	f7f9 bd1e 	b.w	8003108 <_getpid>

080096cc <__sread>:
 80096cc:	b510      	push	{r4, lr}
 80096ce:	460c      	mov	r4, r1
 80096d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096d4:	f000 f894 	bl	8009800 <_read_r>
 80096d8:	2800      	cmp	r0, #0
 80096da:	bfab      	itete	ge
 80096dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096de:	89a3      	ldrhlt	r3, [r4, #12]
 80096e0:	181b      	addge	r3, r3, r0
 80096e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096e6:	bfac      	ite	ge
 80096e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80096ea:	81a3      	strhlt	r3, [r4, #12]
 80096ec:	bd10      	pop	{r4, pc}

080096ee <__swrite>:
 80096ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096f2:	461f      	mov	r7, r3
 80096f4:	898b      	ldrh	r3, [r1, #12]
 80096f6:	05db      	lsls	r3, r3, #23
 80096f8:	4605      	mov	r5, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	4616      	mov	r6, r2
 80096fe:	d505      	bpl.n	800970c <__swrite+0x1e>
 8009700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009704:	2302      	movs	r3, #2
 8009706:	2200      	movs	r2, #0
 8009708:	f000 f868 	bl	80097dc <_lseek_r>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009712:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009716:	81a3      	strh	r3, [r4, #12]
 8009718:	4632      	mov	r2, r6
 800971a:	463b      	mov	r3, r7
 800971c:	4628      	mov	r0, r5
 800971e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009722:	f000 b817 	b.w	8009754 <_write_r>

08009726 <__sseek>:
 8009726:	b510      	push	{r4, lr}
 8009728:	460c      	mov	r4, r1
 800972a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800972e:	f000 f855 	bl	80097dc <_lseek_r>
 8009732:	1c43      	adds	r3, r0, #1
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	bf15      	itete	ne
 8009738:	6560      	strne	r0, [r4, #84]	; 0x54
 800973a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800973e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009742:	81a3      	strheq	r3, [r4, #12]
 8009744:	bf18      	it	ne
 8009746:	81a3      	strhne	r3, [r4, #12]
 8009748:	bd10      	pop	{r4, pc}

0800974a <__sclose>:
 800974a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974e:	f000 b813 	b.w	8009778 <_close_r>
	...

08009754 <_write_r>:
 8009754:	b538      	push	{r3, r4, r5, lr}
 8009756:	4d07      	ldr	r5, [pc, #28]	; (8009774 <_write_r+0x20>)
 8009758:	4604      	mov	r4, r0
 800975a:	4608      	mov	r0, r1
 800975c:	4611      	mov	r1, r2
 800975e:	2200      	movs	r2, #0
 8009760:	602a      	str	r2, [r5, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	f7f9 fd0f 	bl	8003186 <_write>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_write_r+0x1e>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_write_r+0x1e>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	200005dc 	.word	0x200005dc

08009778 <_close_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d06      	ldr	r5, [pc, #24]	; (8009794 <_close_r+0x1c>)
 800977c:	2300      	movs	r3, #0
 800977e:	4604      	mov	r4, r0
 8009780:	4608      	mov	r0, r1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	f7f9 fd1b 	bl	80031be <_close>
 8009788:	1c43      	adds	r3, r0, #1
 800978a:	d102      	bne.n	8009792 <_close_r+0x1a>
 800978c:	682b      	ldr	r3, [r5, #0]
 800978e:	b103      	cbz	r3, 8009792 <_close_r+0x1a>
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	bd38      	pop	{r3, r4, r5, pc}
 8009794:	200005dc 	.word	0x200005dc

08009798 <_fstat_r>:
 8009798:	b538      	push	{r3, r4, r5, lr}
 800979a:	4d07      	ldr	r5, [pc, #28]	; (80097b8 <_fstat_r+0x20>)
 800979c:	2300      	movs	r3, #0
 800979e:	4604      	mov	r4, r0
 80097a0:	4608      	mov	r0, r1
 80097a2:	4611      	mov	r1, r2
 80097a4:	602b      	str	r3, [r5, #0]
 80097a6:	f7f9 fd16 	bl	80031d6 <_fstat>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	d102      	bne.n	80097b4 <_fstat_r+0x1c>
 80097ae:	682b      	ldr	r3, [r5, #0]
 80097b0:	b103      	cbz	r3, 80097b4 <_fstat_r+0x1c>
 80097b2:	6023      	str	r3, [r4, #0]
 80097b4:	bd38      	pop	{r3, r4, r5, pc}
 80097b6:	bf00      	nop
 80097b8:	200005dc 	.word	0x200005dc

080097bc <_isatty_r>:
 80097bc:	b538      	push	{r3, r4, r5, lr}
 80097be:	4d06      	ldr	r5, [pc, #24]	; (80097d8 <_isatty_r+0x1c>)
 80097c0:	2300      	movs	r3, #0
 80097c2:	4604      	mov	r4, r0
 80097c4:	4608      	mov	r0, r1
 80097c6:	602b      	str	r3, [r5, #0]
 80097c8:	f7f9 fd15 	bl	80031f6 <_isatty>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d102      	bne.n	80097d6 <_isatty_r+0x1a>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	b103      	cbz	r3, 80097d6 <_isatty_r+0x1a>
 80097d4:	6023      	str	r3, [r4, #0]
 80097d6:	bd38      	pop	{r3, r4, r5, pc}
 80097d8:	200005dc 	.word	0x200005dc

080097dc <_lseek_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	4d07      	ldr	r5, [pc, #28]	; (80097fc <_lseek_r+0x20>)
 80097e0:	4604      	mov	r4, r0
 80097e2:	4608      	mov	r0, r1
 80097e4:	4611      	mov	r1, r2
 80097e6:	2200      	movs	r2, #0
 80097e8:	602a      	str	r2, [r5, #0]
 80097ea:	461a      	mov	r2, r3
 80097ec:	f7f9 fd0e 	bl	800320c <_lseek>
 80097f0:	1c43      	adds	r3, r0, #1
 80097f2:	d102      	bne.n	80097fa <_lseek_r+0x1e>
 80097f4:	682b      	ldr	r3, [r5, #0]
 80097f6:	b103      	cbz	r3, 80097fa <_lseek_r+0x1e>
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
 80097fc:	200005dc 	.word	0x200005dc

08009800 <_read_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d07      	ldr	r5, [pc, #28]	; (8009820 <_read_r+0x20>)
 8009804:	4604      	mov	r4, r0
 8009806:	4608      	mov	r0, r1
 8009808:	4611      	mov	r1, r2
 800980a:	2200      	movs	r2, #0
 800980c:	602a      	str	r2, [r5, #0]
 800980e:	461a      	mov	r2, r3
 8009810:	f7f9 fc9c 	bl	800314c <_read>
 8009814:	1c43      	adds	r3, r0, #1
 8009816:	d102      	bne.n	800981e <_read_r+0x1e>
 8009818:	682b      	ldr	r3, [r5, #0]
 800981a:	b103      	cbz	r3, 800981e <_read_r+0x1e>
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	bd38      	pop	{r3, r4, r5, pc}
 8009820:	200005dc 	.word	0x200005dc
 8009824:	00000000 	.word	0x00000000

08009828 <log>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	ed2d 8b02 	vpush	{d8}
 800982e:	ec55 4b10 	vmov	r4, r5, d0
 8009832:	f000 f8f1 	bl	8009a18 <__ieee754_log>
 8009836:	4b1e      	ldr	r3, [pc, #120]	; (80098b0 <log+0x88>)
 8009838:	eeb0 8a40 	vmov.f32	s16, s0
 800983c:	eef0 8a60 	vmov.f32	s17, s1
 8009840:	f993 3000 	ldrsb.w	r3, [r3]
 8009844:	3301      	adds	r3, #1
 8009846:	d01a      	beq.n	800987e <log+0x56>
 8009848:	4622      	mov	r2, r4
 800984a:	462b      	mov	r3, r5
 800984c:	4620      	mov	r0, r4
 800984e:	4629      	mov	r1, r5
 8009850:	f7f7 f974 	bl	8000b3c <__aeabi_dcmpun>
 8009854:	b998      	cbnz	r0, 800987e <log+0x56>
 8009856:	2200      	movs	r2, #0
 8009858:	2300      	movs	r3, #0
 800985a:	4620      	mov	r0, r4
 800985c:	4629      	mov	r1, r5
 800985e:	f7f7 f963 	bl	8000b28 <__aeabi_dcmpgt>
 8009862:	b960      	cbnz	r0, 800987e <log+0x56>
 8009864:	2200      	movs	r2, #0
 8009866:	2300      	movs	r3, #0
 8009868:	4620      	mov	r0, r4
 800986a:	4629      	mov	r1, r5
 800986c:	f7f7 f934 	bl	8000ad8 <__aeabi_dcmpeq>
 8009870:	b160      	cbz	r0, 800988c <log+0x64>
 8009872:	f7fd f90f 	bl	8006a94 <__errno>
 8009876:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 80098a8 <log+0x80>
 800987a:	2322      	movs	r3, #34	; 0x22
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	eeb0 0a48 	vmov.f32	s0, s16
 8009882:	eef0 0a68 	vmov.f32	s1, s17
 8009886:	ecbd 8b02 	vpop	{d8}
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	f7fd f902 	bl	8006a94 <__errno>
 8009890:	ecbd 8b02 	vpop	{d8}
 8009894:	2321      	movs	r3, #33	; 0x21
 8009896:	6003      	str	r3, [r0, #0]
 8009898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800989c:	4805      	ldr	r0, [pc, #20]	; (80098b4 <log+0x8c>)
 800989e:	f001 b863 	b.w	800a968 <nan>
 80098a2:	bf00      	nop
 80098a4:	f3af 8000 	nop.w
 80098a8:	00000000 	.word	0x00000000
 80098ac:	fff00000 	.word	0xfff00000
 80098b0:	200002dc 	.word	0x200002dc
 80098b4:	0800bfc8 	.word	0x0800bfc8

080098b8 <pow>:
 80098b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098bc:	ec59 8b10 	vmov	r8, r9, d0
 80098c0:	ec57 6b11 	vmov	r6, r7, d1
 80098c4:	f000 fa64 	bl	8009d90 <__ieee754_pow>
 80098c8:	4b4e      	ldr	r3, [pc, #312]	; (8009a04 <pow+0x14c>)
 80098ca:	f993 3000 	ldrsb.w	r3, [r3]
 80098ce:	3301      	adds	r3, #1
 80098d0:	ec55 4b10 	vmov	r4, r5, d0
 80098d4:	d015      	beq.n	8009902 <pow+0x4a>
 80098d6:	4632      	mov	r2, r6
 80098d8:	463b      	mov	r3, r7
 80098da:	4630      	mov	r0, r6
 80098dc:	4639      	mov	r1, r7
 80098de:	f7f7 f92d 	bl	8000b3c <__aeabi_dcmpun>
 80098e2:	b970      	cbnz	r0, 8009902 <pow+0x4a>
 80098e4:	4642      	mov	r2, r8
 80098e6:	464b      	mov	r3, r9
 80098e8:	4640      	mov	r0, r8
 80098ea:	4649      	mov	r1, r9
 80098ec:	f7f7 f926 	bl	8000b3c <__aeabi_dcmpun>
 80098f0:	2200      	movs	r2, #0
 80098f2:	2300      	movs	r3, #0
 80098f4:	b148      	cbz	r0, 800990a <pow+0x52>
 80098f6:	4630      	mov	r0, r6
 80098f8:	4639      	mov	r1, r7
 80098fa:	f7f7 f8ed 	bl	8000ad8 <__aeabi_dcmpeq>
 80098fe:	2800      	cmp	r0, #0
 8009900:	d17d      	bne.n	80099fe <pow+0x146>
 8009902:	ec45 4b10 	vmov	d0, r4, r5
 8009906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f7 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8009912:	b1e0      	cbz	r0, 800994e <pow+0x96>
 8009914:	2200      	movs	r2, #0
 8009916:	2300      	movs	r3, #0
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f7 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009920:	2800      	cmp	r0, #0
 8009922:	d16c      	bne.n	80099fe <pow+0x146>
 8009924:	ec47 6b10 	vmov	d0, r6, r7
 8009928:	f001 f811 	bl	800a94e <finite>
 800992c:	2800      	cmp	r0, #0
 800992e:	d0e8      	beq.n	8009902 <pow+0x4a>
 8009930:	2200      	movs	r2, #0
 8009932:	2300      	movs	r3, #0
 8009934:	4630      	mov	r0, r6
 8009936:	4639      	mov	r1, r7
 8009938:	f7f7 f8d8 	bl	8000aec <__aeabi_dcmplt>
 800993c:	2800      	cmp	r0, #0
 800993e:	d0e0      	beq.n	8009902 <pow+0x4a>
 8009940:	f7fd f8a8 	bl	8006a94 <__errno>
 8009944:	2321      	movs	r3, #33	; 0x21
 8009946:	6003      	str	r3, [r0, #0]
 8009948:	2400      	movs	r4, #0
 800994a:	4d2f      	ldr	r5, [pc, #188]	; (8009a08 <pow+0x150>)
 800994c:	e7d9      	b.n	8009902 <pow+0x4a>
 800994e:	ec45 4b10 	vmov	d0, r4, r5
 8009952:	f000 fffc 	bl	800a94e <finite>
 8009956:	bbb8      	cbnz	r0, 80099c8 <pow+0x110>
 8009958:	ec49 8b10 	vmov	d0, r8, r9
 800995c:	f000 fff7 	bl	800a94e <finite>
 8009960:	b390      	cbz	r0, 80099c8 <pow+0x110>
 8009962:	ec47 6b10 	vmov	d0, r6, r7
 8009966:	f000 fff2 	bl	800a94e <finite>
 800996a:	b368      	cbz	r0, 80099c8 <pow+0x110>
 800996c:	4622      	mov	r2, r4
 800996e:	462b      	mov	r3, r5
 8009970:	4620      	mov	r0, r4
 8009972:	4629      	mov	r1, r5
 8009974:	f7f7 f8e2 	bl	8000b3c <__aeabi_dcmpun>
 8009978:	b160      	cbz	r0, 8009994 <pow+0xdc>
 800997a:	f7fd f88b 	bl	8006a94 <__errno>
 800997e:	2321      	movs	r3, #33	; 0x21
 8009980:	6003      	str	r3, [r0, #0]
 8009982:	2200      	movs	r2, #0
 8009984:	2300      	movs	r3, #0
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	f7f6 ff67 	bl	800085c <__aeabi_ddiv>
 800998e:	4604      	mov	r4, r0
 8009990:	460d      	mov	r5, r1
 8009992:	e7b6      	b.n	8009902 <pow+0x4a>
 8009994:	f7fd f87e 	bl	8006a94 <__errno>
 8009998:	2322      	movs	r3, #34	; 0x22
 800999a:	6003      	str	r3, [r0, #0]
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f7 f8a2 	bl	8000aec <__aeabi_dcmplt>
 80099a8:	2400      	movs	r4, #0
 80099aa:	b158      	cbz	r0, 80099c4 <pow+0x10c>
 80099ac:	ec47 6b10 	vmov	d0, r6, r7
 80099b0:	f000 ffe2 	bl	800a978 <rint>
 80099b4:	4632      	mov	r2, r6
 80099b6:	ec51 0b10 	vmov	r0, r1, d0
 80099ba:	463b      	mov	r3, r7
 80099bc:	f7f7 f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d0c2      	beq.n	800994a <pow+0x92>
 80099c4:	4d11      	ldr	r5, [pc, #68]	; (8009a0c <pow+0x154>)
 80099c6:	e79c      	b.n	8009902 <pow+0x4a>
 80099c8:	2200      	movs	r2, #0
 80099ca:	2300      	movs	r3, #0
 80099cc:	4620      	mov	r0, r4
 80099ce:	4629      	mov	r1, r5
 80099d0:	f7f7 f882 	bl	8000ad8 <__aeabi_dcmpeq>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d094      	beq.n	8009902 <pow+0x4a>
 80099d8:	ec49 8b10 	vmov	d0, r8, r9
 80099dc:	f000 ffb7 	bl	800a94e <finite>
 80099e0:	2800      	cmp	r0, #0
 80099e2:	d08e      	beq.n	8009902 <pow+0x4a>
 80099e4:	ec47 6b10 	vmov	d0, r6, r7
 80099e8:	f000 ffb1 	bl	800a94e <finite>
 80099ec:	2800      	cmp	r0, #0
 80099ee:	d088      	beq.n	8009902 <pow+0x4a>
 80099f0:	f7fd f850 	bl	8006a94 <__errno>
 80099f4:	2322      	movs	r3, #34	; 0x22
 80099f6:	6003      	str	r3, [r0, #0]
 80099f8:	2400      	movs	r4, #0
 80099fa:	2500      	movs	r5, #0
 80099fc:	e781      	b.n	8009902 <pow+0x4a>
 80099fe:	4d04      	ldr	r5, [pc, #16]	; (8009a10 <pow+0x158>)
 8009a00:	2400      	movs	r4, #0
 8009a02:	e77e      	b.n	8009902 <pow+0x4a>
 8009a04:	200002dc 	.word	0x200002dc
 8009a08:	fff00000 	.word	0xfff00000
 8009a0c:	7ff00000 	.word	0x7ff00000
 8009a10:	3ff00000 	.word	0x3ff00000
 8009a14:	00000000 	.word	0x00000000

08009a18 <__ieee754_log>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ec51 0b10 	vmov	r0, r1, d0
 8009a20:	ed2d 8b04 	vpush	{d8-d9}
 8009a24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009a28:	b083      	sub	sp, #12
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	da29      	bge.n	8009a82 <__ieee754_log+0x6a>
 8009a2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a32:	4303      	orrs	r3, r0
 8009a34:	ee10 2a10 	vmov	r2, s0
 8009a38:	d10c      	bne.n	8009a54 <__ieee754_log+0x3c>
 8009a3a:	49cf      	ldr	r1, [pc, #828]	; (8009d78 <__ieee754_log+0x360>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2300      	movs	r3, #0
 8009a40:	2000      	movs	r0, #0
 8009a42:	f7f6 ff0b 	bl	800085c <__aeabi_ddiv>
 8009a46:	ec41 0b10 	vmov	d0, r0, r1
 8009a4a:	b003      	add	sp, #12
 8009a4c:	ecbd 8b04 	vpop	{d8-d9}
 8009a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a54:	2900      	cmp	r1, #0
 8009a56:	da05      	bge.n	8009a64 <__ieee754_log+0x4c>
 8009a58:	460b      	mov	r3, r1
 8009a5a:	f7f6 fc1d 	bl	8000298 <__aeabi_dsub>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2300      	movs	r3, #0
 8009a62:	e7ee      	b.n	8009a42 <__ieee754_log+0x2a>
 8009a64:	4bc5      	ldr	r3, [pc, #788]	; (8009d7c <__ieee754_log+0x364>)
 8009a66:	2200      	movs	r2, #0
 8009a68:	f7f6 fdce 	bl	8000608 <__aeabi_dmul>
 8009a6c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009a70:	460d      	mov	r5, r1
 8009a72:	4ac3      	ldr	r2, [pc, #780]	; (8009d80 <__ieee754_log+0x368>)
 8009a74:	4295      	cmp	r5, r2
 8009a76:	dd06      	ble.n	8009a86 <__ieee754_log+0x6e>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	f7f6 fc0e 	bl	800029c <__adddf3>
 8009a80:	e7e1      	b.n	8009a46 <__ieee754_log+0x2e>
 8009a82:	2300      	movs	r3, #0
 8009a84:	e7f5      	b.n	8009a72 <__ieee754_log+0x5a>
 8009a86:	152c      	asrs	r4, r5, #20
 8009a88:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009a8c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009a90:	441c      	add	r4, r3
 8009a92:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009a96:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a9e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009aa2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009aa6:	ea42 0105 	orr.w	r1, r2, r5
 8009aaa:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009aae:	2200      	movs	r2, #0
 8009ab0:	4bb4      	ldr	r3, [pc, #720]	; (8009d84 <__ieee754_log+0x36c>)
 8009ab2:	f7f6 fbf1 	bl	8000298 <__aeabi_dsub>
 8009ab6:	1cab      	adds	r3, r5, #2
 8009ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	4682      	mov	sl, r0
 8009ac0:	468b      	mov	fp, r1
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	dc53      	bgt.n	8009b70 <__ieee754_log+0x158>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	f7f7 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ace:	b1d0      	cbz	r0, 8009b06 <__ieee754_log+0xee>
 8009ad0:	2c00      	cmp	r4, #0
 8009ad2:	f000 8122 	beq.w	8009d1a <__ieee754_log+0x302>
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f7f6 fd2c 	bl	8000534 <__aeabi_i2d>
 8009adc:	a390      	add	r3, pc, #576	; (adr r3, 8009d20 <__ieee754_log+0x308>)
 8009ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae2:	4606      	mov	r6, r0
 8009ae4:	460f      	mov	r7, r1
 8009ae6:	f7f6 fd8f 	bl	8000608 <__aeabi_dmul>
 8009aea:	a38f      	add	r3, pc, #572	; (adr r3, 8009d28 <__ieee754_log+0x310>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	4604      	mov	r4, r0
 8009af2:	460d      	mov	r5, r1
 8009af4:	4630      	mov	r0, r6
 8009af6:	4639      	mov	r1, r7
 8009af8:	f7f6 fd86 	bl	8000608 <__aeabi_dmul>
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	4620      	mov	r0, r4
 8009b02:	4629      	mov	r1, r5
 8009b04:	e7ba      	b.n	8009a7c <__ieee754_log+0x64>
 8009b06:	a38a      	add	r3, pc, #552	; (adr r3, 8009d30 <__ieee754_log+0x318>)
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	4650      	mov	r0, sl
 8009b0e:	4659      	mov	r1, fp
 8009b10:	f7f6 fd7a 	bl	8000608 <__aeabi_dmul>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	2000      	movs	r0, #0
 8009b1a:	499b      	ldr	r1, [pc, #620]	; (8009d88 <__ieee754_log+0x370>)
 8009b1c:	f7f6 fbbc 	bl	8000298 <__aeabi_dsub>
 8009b20:	4652      	mov	r2, sl
 8009b22:	4606      	mov	r6, r0
 8009b24:	460f      	mov	r7, r1
 8009b26:	465b      	mov	r3, fp
 8009b28:	4650      	mov	r0, sl
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	f7f6 fd6c 	bl	8000608 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7f6 fd66 	bl	8000608 <__aeabi_dmul>
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	b914      	cbnz	r4, 8009b48 <__ieee754_log+0x130>
 8009b42:	4632      	mov	r2, r6
 8009b44:	463b      	mov	r3, r7
 8009b46:	e0a2      	b.n	8009c8e <__ieee754_log+0x276>
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7f6 fcf3 	bl	8000534 <__aeabi_i2d>
 8009b4e:	a374      	add	r3, pc, #464	; (adr r3, 8009d20 <__ieee754_log+0x308>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	f7f6 fd56 	bl	8000608 <__aeabi_dmul>
 8009b5c:	a372      	add	r3, pc, #456	; (adr r3, 8009d28 <__ieee754_log+0x310>)
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	4604      	mov	r4, r0
 8009b64:	460d      	mov	r5, r1
 8009b66:	4640      	mov	r0, r8
 8009b68:	4649      	mov	r1, r9
 8009b6a:	f7f6 fd4d 	bl	8000608 <__aeabi_dmul>
 8009b6e:	e0a7      	b.n	8009cc0 <__ieee754_log+0x2a8>
 8009b70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009b74:	f7f6 fb92 	bl	800029c <__adddf3>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4650      	mov	r0, sl
 8009b7e:	4659      	mov	r1, fp
 8009b80:	f7f6 fe6c 	bl	800085c <__aeabi_ddiv>
 8009b84:	ec41 0b18 	vmov	d8, r0, r1
 8009b88:	4620      	mov	r0, r4
 8009b8a:	f7f6 fcd3 	bl	8000534 <__aeabi_i2d>
 8009b8e:	ec53 2b18 	vmov	r2, r3, d8
 8009b92:	ec41 0b19 	vmov	d9, r0, r1
 8009b96:	ec51 0b18 	vmov	r0, r1, d8
 8009b9a:	f7f6 fd35 	bl	8000608 <__aeabi_dmul>
 8009b9e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8009ba2:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8009ba6:	9301      	str	r3, [sp, #4]
 8009ba8:	4602      	mov	r2, r0
 8009baa:	460b      	mov	r3, r1
 8009bac:	4680      	mov	r8, r0
 8009bae:	4689      	mov	r9, r1
 8009bb0:	f7f6 fd2a 	bl	8000608 <__aeabi_dmul>
 8009bb4:	a360      	add	r3, pc, #384	; (adr r3, 8009d38 <__ieee754_log+0x320>)
 8009bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bba:	4606      	mov	r6, r0
 8009bbc:	460f      	mov	r7, r1
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	a35f      	add	r3, pc, #380	; (adr r3, 8009d40 <__ieee754_log+0x328>)
 8009bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc8:	f7f6 fb68 	bl	800029c <__adddf3>
 8009bcc:	4632      	mov	r2, r6
 8009bce:	463b      	mov	r3, r7
 8009bd0:	f7f6 fd1a 	bl	8000608 <__aeabi_dmul>
 8009bd4:	a35c      	add	r3, pc, #368	; (adr r3, 8009d48 <__ieee754_log+0x330>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb5f 	bl	800029c <__adddf3>
 8009bde:	4632      	mov	r2, r6
 8009be0:	463b      	mov	r3, r7
 8009be2:	f7f6 fd11 	bl	8000608 <__aeabi_dmul>
 8009be6:	a35a      	add	r3, pc, #360	; (adr r3, 8009d50 <__ieee754_log+0x338>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fb56 	bl	800029c <__adddf3>
 8009bf0:	4642      	mov	r2, r8
 8009bf2:	464b      	mov	r3, r9
 8009bf4:	f7f6 fd08 	bl	8000608 <__aeabi_dmul>
 8009bf8:	a357      	add	r3, pc, #348	; (adr r3, 8009d58 <__ieee754_log+0x340>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	4680      	mov	r8, r0
 8009c00:	4689      	mov	r9, r1
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 fcff 	bl	8000608 <__aeabi_dmul>
 8009c0a:	a355      	add	r3, pc, #340	; (adr r3, 8009d60 <__ieee754_log+0x348>)
 8009c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c10:	f7f6 fb44 	bl	800029c <__adddf3>
 8009c14:	4632      	mov	r2, r6
 8009c16:	463b      	mov	r3, r7
 8009c18:	f7f6 fcf6 	bl	8000608 <__aeabi_dmul>
 8009c1c:	a352      	add	r3, pc, #328	; (adr r3, 8009d68 <__ieee754_log+0x350>)
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f7f6 fb3b 	bl	800029c <__adddf3>
 8009c26:	4632      	mov	r2, r6
 8009c28:	463b      	mov	r3, r7
 8009c2a:	f7f6 fced 	bl	8000608 <__aeabi_dmul>
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4602      	mov	r2, r0
 8009c32:	4649      	mov	r1, r9
 8009c34:	4640      	mov	r0, r8
 8009c36:	f7f6 fb31 	bl	800029c <__adddf3>
 8009c3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	3551      	adds	r5, #81	; 0x51
 8009c42:	431d      	orrs	r5, r3
 8009c44:	2d00      	cmp	r5, #0
 8009c46:	4680      	mov	r8, r0
 8009c48:	4689      	mov	r9, r1
 8009c4a:	dd48      	ble.n	8009cde <__ieee754_log+0x2c6>
 8009c4c:	4b4e      	ldr	r3, [pc, #312]	; (8009d88 <__ieee754_log+0x370>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	4650      	mov	r0, sl
 8009c52:	4659      	mov	r1, fp
 8009c54:	f7f6 fcd8 	bl	8000608 <__aeabi_dmul>
 8009c58:	4652      	mov	r2, sl
 8009c5a:	465b      	mov	r3, fp
 8009c5c:	f7f6 fcd4 	bl	8000608 <__aeabi_dmul>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4606      	mov	r6, r0
 8009c66:	460f      	mov	r7, r1
 8009c68:	4640      	mov	r0, r8
 8009c6a:	4649      	mov	r1, r9
 8009c6c:	f7f6 fb16 	bl	800029c <__adddf3>
 8009c70:	ec53 2b18 	vmov	r2, r3, d8
 8009c74:	f7f6 fcc8 	bl	8000608 <__aeabi_dmul>
 8009c78:	4680      	mov	r8, r0
 8009c7a:	4689      	mov	r9, r1
 8009c7c:	b964      	cbnz	r4, 8009c98 <__ieee754_log+0x280>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4630      	mov	r0, r6
 8009c84:	4639      	mov	r1, r7
 8009c86:	f7f6 fb07 	bl	8000298 <__aeabi_dsub>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4650      	mov	r0, sl
 8009c90:	4659      	mov	r1, fp
 8009c92:	f7f6 fb01 	bl	8000298 <__aeabi_dsub>
 8009c96:	e6d6      	b.n	8009a46 <__ieee754_log+0x2e>
 8009c98:	a321      	add	r3, pc, #132	; (adr r3, 8009d20 <__ieee754_log+0x308>)
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	ec51 0b19 	vmov	r0, r1, d9
 8009ca2:	f7f6 fcb1 	bl	8000608 <__aeabi_dmul>
 8009ca6:	a320      	add	r3, pc, #128	; (adr r3, 8009d28 <__ieee754_log+0x310>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	4604      	mov	r4, r0
 8009cae:	460d      	mov	r5, r1
 8009cb0:	ec51 0b19 	vmov	r0, r1, d9
 8009cb4:	f7f6 fca8 	bl	8000608 <__aeabi_dmul>
 8009cb8:	4642      	mov	r2, r8
 8009cba:	464b      	mov	r3, r9
 8009cbc:	f7f6 faee 	bl	800029c <__adddf3>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fae6 	bl	8000298 <__aeabi_dsub>
 8009ccc:	4652      	mov	r2, sl
 8009cce:	465b      	mov	r3, fp
 8009cd0:	f7f6 fae2 	bl	8000298 <__aeabi_dsub>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	4620      	mov	r0, r4
 8009cda:	4629      	mov	r1, r5
 8009cdc:	e7d9      	b.n	8009c92 <__ieee754_log+0x27a>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	4650      	mov	r0, sl
 8009ce4:	4659      	mov	r1, fp
 8009ce6:	f7f6 fad7 	bl	8000298 <__aeabi_dsub>
 8009cea:	ec53 2b18 	vmov	r2, r3, d8
 8009cee:	f7f6 fc8b 	bl	8000608 <__aeabi_dmul>
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	f43f af23 	beq.w	8009b42 <__ieee754_log+0x12a>
 8009cfc:	a308      	add	r3, pc, #32	; (adr r3, 8009d20 <__ieee754_log+0x308>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	ec51 0b19 	vmov	r0, r1, d9
 8009d06:	f7f6 fc7f 	bl	8000608 <__aeabi_dmul>
 8009d0a:	a307      	add	r3, pc, #28	; (adr r3, 8009d28 <__ieee754_log+0x310>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4604      	mov	r4, r0
 8009d12:	460d      	mov	r5, r1
 8009d14:	ec51 0b19 	vmov	r0, r1, d9
 8009d18:	e727      	b.n	8009b6a <__ieee754_log+0x152>
 8009d1a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8009d70 <__ieee754_log+0x358>
 8009d1e:	e694      	b.n	8009a4a <__ieee754_log+0x32>
 8009d20:	fee00000 	.word	0xfee00000
 8009d24:	3fe62e42 	.word	0x3fe62e42
 8009d28:	35793c76 	.word	0x35793c76
 8009d2c:	3dea39ef 	.word	0x3dea39ef
 8009d30:	55555555 	.word	0x55555555
 8009d34:	3fd55555 	.word	0x3fd55555
 8009d38:	df3e5244 	.word	0xdf3e5244
 8009d3c:	3fc2f112 	.word	0x3fc2f112
 8009d40:	96cb03de 	.word	0x96cb03de
 8009d44:	3fc74664 	.word	0x3fc74664
 8009d48:	94229359 	.word	0x94229359
 8009d4c:	3fd24924 	.word	0x3fd24924
 8009d50:	55555593 	.word	0x55555593
 8009d54:	3fe55555 	.word	0x3fe55555
 8009d58:	d078c69f 	.word	0xd078c69f
 8009d5c:	3fc39a09 	.word	0x3fc39a09
 8009d60:	1d8e78af 	.word	0x1d8e78af
 8009d64:	3fcc71c5 	.word	0x3fcc71c5
 8009d68:	9997fa04 	.word	0x9997fa04
 8009d6c:	3fd99999 	.word	0x3fd99999
	...
 8009d78:	c3500000 	.word	0xc3500000
 8009d7c:	43500000 	.word	0x43500000
 8009d80:	7fefffff 	.word	0x7fefffff
 8009d84:	3ff00000 	.word	0x3ff00000
 8009d88:	3fe00000 	.word	0x3fe00000
 8009d8c:	00000000 	.word	0x00000000

08009d90 <__ieee754_pow>:
 8009d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d94:	ed2d 8b06 	vpush	{d8-d10}
 8009d98:	b08d      	sub	sp, #52	; 0x34
 8009d9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8009d9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009da2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009da6:	ea56 0100 	orrs.w	r1, r6, r0
 8009daa:	ec53 2b10 	vmov	r2, r3, d0
 8009dae:	f000 84d1 	beq.w	800a754 <__ieee754_pow+0x9c4>
 8009db2:	497f      	ldr	r1, [pc, #508]	; (8009fb0 <__ieee754_pow+0x220>)
 8009db4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8009db8:	428c      	cmp	r4, r1
 8009dba:	ee10 8a10 	vmov	r8, s0
 8009dbe:	4699      	mov	r9, r3
 8009dc0:	dc09      	bgt.n	8009dd6 <__ieee754_pow+0x46>
 8009dc2:	d103      	bne.n	8009dcc <__ieee754_pow+0x3c>
 8009dc4:	b97a      	cbnz	r2, 8009de6 <__ieee754_pow+0x56>
 8009dc6:	42a6      	cmp	r6, r4
 8009dc8:	dd02      	ble.n	8009dd0 <__ieee754_pow+0x40>
 8009dca:	e00c      	b.n	8009de6 <__ieee754_pow+0x56>
 8009dcc:	428e      	cmp	r6, r1
 8009dce:	dc02      	bgt.n	8009dd6 <__ieee754_pow+0x46>
 8009dd0:	428e      	cmp	r6, r1
 8009dd2:	d110      	bne.n	8009df6 <__ieee754_pow+0x66>
 8009dd4:	b178      	cbz	r0, 8009df6 <__ieee754_pow+0x66>
 8009dd6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009dda:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009dde:	ea54 0308 	orrs.w	r3, r4, r8
 8009de2:	f000 84b7 	beq.w	800a754 <__ieee754_pow+0x9c4>
 8009de6:	4873      	ldr	r0, [pc, #460]	; (8009fb4 <__ieee754_pow+0x224>)
 8009de8:	b00d      	add	sp, #52	; 0x34
 8009dea:	ecbd 8b06 	vpop	{d8-d10}
 8009dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df2:	f000 bdb9 	b.w	800a968 <nan>
 8009df6:	f1b9 0f00 	cmp.w	r9, #0
 8009dfa:	da36      	bge.n	8009e6a <__ieee754_pow+0xda>
 8009dfc:	496e      	ldr	r1, [pc, #440]	; (8009fb8 <__ieee754_pow+0x228>)
 8009dfe:	428e      	cmp	r6, r1
 8009e00:	dc51      	bgt.n	8009ea6 <__ieee754_pow+0x116>
 8009e02:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009e06:	428e      	cmp	r6, r1
 8009e08:	f340 84af 	ble.w	800a76a <__ieee754_pow+0x9da>
 8009e0c:	1531      	asrs	r1, r6, #20
 8009e0e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009e12:	2914      	cmp	r1, #20
 8009e14:	dd0f      	ble.n	8009e36 <__ieee754_pow+0xa6>
 8009e16:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009e1a:	fa20 fc01 	lsr.w	ip, r0, r1
 8009e1e:	fa0c f101 	lsl.w	r1, ip, r1
 8009e22:	4281      	cmp	r1, r0
 8009e24:	f040 84a1 	bne.w	800a76a <__ieee754_pow+0x9da>
 8009e28:	f00c 0c01 	and.w	ip, ip, #1
 8009e2c:	f1cc 0102 	rsb	r1, ip, #2
 8009e30:	9100      	str	r1, [sp, #0]
 8009e32:	b180      	cbz	r0, 8009e56 <__ieee754_pow+0xc6>
 8009e34:	e059      	b.n	8009eea <__ieee754_pow+0x15a>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d155      	bne.n	8009ee6 <__ieee754_pow+0x156>
 8009e3a:	f1c1 0114 	rsb	r1, r1, #20
 8009e3e:	fa46 fc01 	asr.w	ip, r6, r1
 8009e42:	fa0c f101 	lsl.w	r1, ip, r1
 8009e46:	42b1      	cmp	r1, r6
 8009e48:	f040 848c 	bne.w	800a764 <__ieee754_pow+0x9d4>
 8009e4c:	f00c 0c01 	and.w	ip, ip, #1
 8009e50:	f1cc 0102 	rsb	r1, ip, #2
 8009e54:	9100      	str	r1, [sp, #0]
 8009e56:	4959      	ldr	r1, [pc, #356]	; (8009fbc <__ieee754_pow+0x22c>)
 8009e58:	428e      	cmp	r6, r1
 8009e5a:	d12d      	bne.n	8009eb8 <__ieee754_pow+0x128>
 8009e5c:	2f00      	cmp	r7, #0
 8009e5e:	da79      	bge.n	8009f54 <__ieee754_pow+0x1c4>
 8009e60:	4956      	ldr	r1, [pc, #344]	; (8009fbc <__ieee754_pow+0x22c>)
 8009e62:	2000      	movs	r0, #0
 8009e64:	f7f6 fcfa 	bl	800085c <__aeabi_ddiv>
 8009e68:	e016      	b.n	8009e98 <__ieee754_pow+0x108>
 8009e6a:	2100      	movs	r1, #0
 8009e6c:	9100      	str	r1, [sp, #0]
 8009e6e:	2800      	cmp	r0, #0
 8009e70:	d13b      	bne.n	8009eea <__ieee754_pow+0x15a>
 8009e72:	494f      	ldr	r1, [pc, #316]	; (8009fb0 <__ieee754_pow+0x220>)
 8009e74:	428e      	cmp	r6, r1
 8009e76:	d1ee      	bne.n	8009e56 <__ieee754_pow+0xc6>
 8009e78:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009e7c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009e80:	ea53 0308 	orrs.w	r3, r3, r8
 8009e84:	f000 8466 	beq.w	800a754 <__ieee754_pow+0x9c4>
 8009e88:	4b4d      	ldr	r3, [pc, #308]	; (8009fc0 <__ieee754_pow+0x230>)
 8009e8a:	429c      	cmp	r4, r3
 8009e8c:	dd0d      	ble.n	8009eaa <__ieee754_pow+0x11a>
 8009e8e:	2f00      	cmp	r7, #0
 8009e90:	f280 8464 	bge.w	800a75c <__ieee754_pow+0x9cc>
 8009e94:	2000      	movs	r0, #0
 8009e96:	2100      	movs	r1, #0
 8009e98:	ec41 0b10 	vmov	d0, r0, r1
 8009e9c:	b00d      	add	sp, #52	; 0x34
 8009e9e:	ecbd 8b06 	vpop	{d8-d10}
 8009ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea6:	2102      	movs	r1, #2
 8009ea8:	e7e0      	b.n	8009e6c <__ieee754_pow+0xdc>
 8009eaa:	2f00      	cmp	r7, #0
 8009eac:	daf2      	bge.n	8009e94 <__ieee754_pow+0x104>
 8009eae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8009eb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009eb6:	e7ef      	b.n	8009e98 <__ieee754_pow+0x108>
 8009eb8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8009ebc:	d104      	bne.n	8009ec8 <__ieee754_pow+0x138>
 8009ebe:	4610      	mov	r0, r2
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	f7f6 fba1 	bl	8000608 <__aeabi_dmul>
 8009ec6:	e7e7      	b.n	8009e98 <__ieee754_pow+0x108>
 8009ec8:	493e      	ldr	r1, [pc, #248]	; (8009fc4 <__ieee754_pow+0x234>)
 8009eca:	428f      	cmp	r7, r1
 8009ecc:	d10d      	bne.n	8009eea <__ieee754_pow+0x15a>
 8009ece:	f1b9 0f00 	cmp.w	r9, #0
 8009ed2:	db0a      	blt.n	8009eea <__ieee754_pow+0x15a>
 8009ed4:	ec43 2b10 	vmov	d0, r2, r3
 8009ed8:	b00d      	add	sp, #52	; 0x34
 8009eda:	ecbd 8b06 	vpop	{d8-d10}
 8009ede:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee2:	f000 bc77 	b.w	800a7d4 <__ieee754_sqrt>
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	9100      	str	r1, [sp, #0]
 8009eea:	ec43 2b10 	vmov	d0, r2, r3
 8009eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ef2:	f000 fd23 	bl	800a93c <fabs>
 8009ef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009efa:	ec51 0b10 	vmov	r0, r1, d0
 8009efe:	f1b8 0f00 	cmp.w	r8, #0
 8009f02:	d12a      	bne.n	8009f5a <__ieee754_pow+0x1ca>
 8009f04:	b12c      	cbz	r4, 8009f12 <__ieee754_pow+0x182>
 8009f06:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8009fbc <__ieee754_pow+0x22c>
 8009f0a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009f0e:	45e6      	cmp	lr, ip
 8009f10:	d123      	bne.n	8009f5a <__ieee754_pow+0x1ca>
 8009f12:	2f00      	cmp	r7, #0
 8009f14:	da05      	bge.n	8009f22 <__ieee754_pow+0x192>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	4927      	ldr	r1, [pc, #156]	; (8009fbc <__ieee754_pow+0x22c>)
 8009f1e:	f7f6 fc9d 	bl	800085c <__aeabi_ddiv>
 8009f22:	f1b9 0f00 	cmp.w	r9, #0
 8009f26:	dab7      	bge.n	8009e98 <__ieee754_pow+0x108>
 8009f28:	9b00      	ldr	r3, [sp, #0]
 8009f2a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009f2e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009f32:	4323      	orrs	r3, r4
 8009f34:	d108      	bne.n	8009f48 <__ieee754_pow+0x1b8>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4610      	mov	r0, r2
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	f7f6 f9ab 	bl	8000298 <__aeabi_dsub>
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	e78d      	b.n	8009e64 <__ieee754_pow+0xd4>
 8009f48:	9b00      	ldr	r3, [sp, #0]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d1a4      	bne.n	8009e98 <__ieee754_pow+0x108>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f54:	4610      	mov	r0, r2
 8009f56:	4619      	mov	r1, r3
 8009f58:	e79e      	b.n	8009e98 <__ieee754_pow+0x108>
 8009f5a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009f5e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009f62:	950a      	str	r5, [sp, #40]	; 0x28
 8009f64:	9d00      	ldr	r5, [sp, #0]
 8009f66:	46ac      	mov	ip, r5
 8009f68:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009f6a:	ea5c 0505 	orrs.w	r5, ip, r5
 8009f6e:	d0e4      	beq.n	8009f3a <__ieee754_pow+0x1aa>
 8009f70:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <__ieee754_pow+0x238>)
 8009f72:	429e      	cmp	r6, r3
 8009f74:	f340 80fc 	ble.w	800a170 <__ieee754_pow+0x3e0>
 8009f78:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009f7c:	429e      	cmp	r6, r3
 8009f7e:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <__ieee754_pow+0x230>)
 8009f80:	dd07      	ble.n	8009f92 <__ieee754_pow+0x202>
 8009f82:	429c      	cmp	r4, r3
 8009f84:	dc0a      	bgt.n	8009f9c <__ieee754_pow+0x20c>
 8009f86:	2f00      	cmp	r7, #0
 8009f88:	da84      	bge.n	8009e94 <__ieee754_pow+0x104>
 8009f8a:	a307      	add	r3, pc, #28	; (adr r3, 8009fa8 <__ieee754_pow+0x218>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	e795      	b.n	8009ebe <__ieee754_pow+0x12e>
 8009f92:	429c      	cmp	r4, r3
 8009f94:	dbf7      	blt.n	8009f86 <__ieee754_pow+0x1f6>
 8009f96:	4b09      	ldr	r3, [pc, #36]	; (8009fbc <__ieee754_pow+0x22c>)
 8009f98:	429c      	cmp	r4, r3
 8009f9a:	dd17      	ble.n	8009fcc <__ieee754_pow+0x23c>
 8009f9c:	2f00      	cmp	r7, #0
 8009f9e:	dcf4      	bgt.n	8009f8a <__ieee754_pow+0x1fa>
 8009fa0:	e778      	b.n	8009e94 <__ieee754_pow+0x104>
 8009fa2:	bf00      	nop
 8009fa4:	f3af 8000 	nop.w
 8009fa8:	8800759c 	.word	0x8800759c
 8009fac:	7e37e43c 	.word	0x7e37e43c
 8009fb0:	7ff00000 	.word	0x7ff00000
 8009fb4:	0800bfc8 	.word	0x0800bfc8
 8009fb8:	433fffff 	.word	0x433fffff
 8009fbc:	3ff00000 	.word	0x3ff00000
 8009fc0:	3fefffff 	.word	0x3fefffff
 8009fc4:	3fe00000 	.word	0x3fe00000
 8009fc8:	41e00000 	.word	0x41e00000
 8009fcc:	4b64      	ldr	r3, [pc, #400]	; (800a160 <__ieee754_pow+0x3d0>)
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f7f6 f962 	bl	8000298 <__aeabi_dsub>
 8009fd4:	a356      	add	r3, pc, #344	; (adr r3, 800a130 <__ieee754_pow+0x3a0>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	f7f6 fb13 	bl	8000608 <__aeabi_dmul>
 8009fe2:	a355      	add	r3, pc, #340	; (adr r3, 800a138 <__ieee754_pow+0x3a8>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	4606      	mov	r6, r0
 8009fea:	460f      	mov	r7, r1
 8009fec:	4620      	mov	r0, r4
 8009fee:	4629      	mov	r1, r5
 8009ff0:	f7f6 fb0a 	bl	8000608 <__aeabi_dmul>
 8009ff4:	4b5b      	ldr	r3, [pc, #364]	; (800a164 <__ieee754_pow+0x3d4>)
 8009ff6:	4682      	mov	sl, r0
 8009ff8:	468b      	mov	fp, r1
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	4629      	mov	r1, r5
 800a000:	f7f6 fb02 	bl	8000608 <__aeabi_dmul>
 800a004:	4602      	mov	r2, r0
 800a006:	460b      	mov	r3, r1
 800a008:	a14d      	add	r1, pc, #308	; (adr r1, 800a140 <__ieee754_pow+0x3b0>)
 800a00a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a00e:	f7f6 f943 	bl	8000298 <__aeabi_dsub>
 800a012:	4622      	mov	r2, r4
 800a014:	462b      	mov	r3, r5
 800a016:	f7f6 faf7 	bl	8000608 <__aeabi_dmul>
 800a01a:	4602      	mov	r2, r0
 800a01c:	460b      	mov	r3, r1
 800a01e:	2000      	movs	r0, #0
 800a020:	4951      	ldr	r1, [pc, #324]	; (800a168 <__ieee754_pow+0x3d8>)
 800a022:	f7f6 f939 	bl	8000298 <__aeabi_dsub>
 800a026:	4622      	mov	r2, r4
 800a028:	4680      	mov	r8, r0
 800a02a:	4689      	mov	r9, r1
 800a02c:	462b      	mov	r3, r5
 800a02e:	4620      	mov	r0, r4
 800a030:	4629      	mov	r1, r5
 800a032:	f7f6 fae9 	bl	8000608 <__aeabi_dmul>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	4640      	mov	r0, r8
 800a03c:	4649      	mov	r1, r9
 800a03e:	f7f6 fae3 	bl	8000608 <__aeabi_dmul>
 800a042:	a341      	add	r3, pc, #260	; (adr r3, 800a148 <__ieee754_pow+0x3b8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	4650      	mov	r0, sl
 800a052:	4659      	mov	r1, fp
 800a054:	f7f6 f920 	bl	8000298 <__aeabi_dsub>
 800a058:	4602      	mov	r2, r0
 800a05a:	460b      	mov	r3, r1
 800a05c:	4680      	mov	r8, r0
 800a05e:	4689      	mov	r9, r1
 800a060:	4630      	mov	r0, r6
 800a062:	4639      	mov	r1, r7
 800a064:	f7f6 f91a 	bl	800029c <__adddf3>
 800a068:	2400      	movs	r4, #0
 800a06a:	4632      	mov	r2, r6
 800a06c:	463b      	mov	r3, r7
 800a06e:	4620      	mov	r0, r4
 800a070:	460d      	mov	r5, r1
 800a072:	f7f6 f911 	bl	8000298 <__aeabi_dsub>
 800a076:	4602      	mov	r2, r0
 800a078:	460b      	mov	r3, r1
 800a07a:	4640      	mov	r0, r8
 800a07c:	4649      	mov	r1, r9
 800a07e:	f7f6 f90b 	bl	8000298 <__aeabi_dsub>
 800a082:	9b00      	ldr	r3, [sp, #0]
 800a084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a086:	3b01      	subs	r3, #1
 800a088:	4313      	orrs	r3, r2
 800a08a:	4682      	mov	sl, r0
 800a08c:	468b      	mov	fp, r1
 800a08e:	f040 81f1 	bne.w	800a474 <__ieee754_pow+0x6e4>
 800a092:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800a150 <__ieee754_pow+0x3c0>
 800a096:	eeb0 8a47 	vmov.f32	s16, s14
 800a09a:	eef0 8a67 	vmov.f32	s17, s15
 800a09e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0a2:	2600      	movs	r6, #0
 800a0a4:	4632      	mov	r2, r6
 800a0a6:	463b      	mov	r3, r7
 800a0a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0ac:	f7f6 f8f4 	bl	8000298 <__aeabi_dsub>
 800a0b0:	4622      	mov	r2, r4
 800a0b2:	462b      	mov	r3, r5
 800a0b4:	f7f6 faa8 	bl	8000608 <__aeabi_dmul>
 800a0b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0bc:	4680      	mov	r8, r0
 800a0be:	4689      	mov	r9, r1
 800a0c0:	4650      	mov	r0, sl
 800a0c2:	4659      	mov	r1, fp
 800a0c4:	f7f6 faa0 	bl	8000608 <__aeabi_dmul>
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	4640      	mov	r0, r8
 800a0ce:	4649      	mov	r1, r9
 800a0d0:	f7f6 f8e4 	bl	800029c <__adddf3>
 800a0d4:	4632      	mov	r2, r6
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4689      	mov	r9, r1
 800a0dc:	4620      	mov	r0, r4
 800a0de:	4629      	mov	r1, r5
 800a0e0:	f7f6 fa92 	bl	8000608 <__aeabi_dmul>
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	f7f6 f8d4 	bl	800029c <__adddf3>
 800a0f4:	4b1d      	ldr	r3, [pc, #116]	; (800a16c <__ieee754_pow+0x3dc>)
 800a0f6:	4299      	cmp	r1, r3
 800a0f8:	ec45 4b19 	vmov	d9, r4, r5
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	468b      	mov	fp, r1
 800a102:	f340 82fe 	ble.w	800a702 <__ieee754_pow+0x972>
 800a106:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a10a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a10e:	4303      	orrs	r3, r0
 800a110:	f000 81f0 	beq.w	800a4f4 <__ieee754_pow+0x764>
 800a114:	a310      	add	r3, pc, #64	; (adr r3, 800a158 <__ieee754_pow+0x3c8>)
 800a116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11a:	ec51 0b18 	vmov	r0, r1, d8
 800a11e:	f7f6 fa73 	bl	8000608 <__aeabi_dmul>
 800a122:	a30d      	add	r3, pc, #52	; (adr r3, 800a158 <__ieee754_pow+0x3c8>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	e6cb      	b.n	8009ec2 <__ieee754_pow+0x132>
 800a12a:	bf00      	nop
 800a12c:	f3af 8000 	nop.w
 800a130:	60000000 	.word	0x60000000
 800a134:	3ff71547 	.word	0x3ff71547
 800a138:	f85ddf44 	.word	0xf85ddf44
 800a13c:	3e54ae0b 	.word	0x3e54ae0b
 800a140:	55555555 	.word	0x55555555
 800a144:	3fd55555 	.word	0x3fd55555
 800a148:	652b82fe 	.word	0x652b82fe
 800a14c:	3ff71547 	.word	0x3ff71547
 800a150:	00000000 	.word	0x00000000
 800a154:	bff00000 	.word	0xbff00000
 800a158:	8800759c 	.word	0x8800759c
 800a15c:	7e37e43c 	.word	0x7e37e43c
 800a160:	3ff00000 	.word	0x3ff00000
 800a164:	3fd00000 	.word	0x3fd00000
 800a168:	3fe00000 	.word	0x3fe00000
 800a16c:	408fffff 	.word	0x408fffff
 800a170:	4bd7      	ldr	r3, [pc, #860]	; (800a4d0 <__ieee754_pow+0x740>)
 800a172:	ea03 0309 	and.w	r3, r3, r9
 800a176:	2200      	movs	r2, #0
 800a178:	b92b      	cbnz	r3, 800a186 <__ieee754_pow+0x3f6>
 800a17a:	4bd6      	ldr	r3, [pc, #856]	; (800a4d4 <__ieee754_pow+0x744>)
 800a17c:	f7f6 fa44 	bl	8000608 <__aeabi_dmul>
 800a180:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a184:	460c      	mov	r4, r1
 800a186:	1523      	asrs	r3, r4, #20
 800a188:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a18c:	4413      	add	r3, r2
 800a18e:	9309      	str	r3, [sp, #36]	; 0x24
 800a190:	4bd1      	ldr	r3, [pc, #836]	; (800a4d8 <__ieee754_pow+0x748>)
 800a192:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a196:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a19a:	429c      	cmp	r4, r3
 800a19c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a1a0:	dd08      	ble.n	800a1b4 <__ieee754_pow+0x424>
 800a1a2:	4bce      	ldr	r3, [pc, #824]	; (800a4dc <__ieee754_pow+0x74c>)
 800a1a4:	429c      	cmp	r4, r3
 800a1a6:	f340 8163 	ble.w	800a470 <__ieee754_pow+0x6e0>
 800a1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a1b4:	2400      	movs	r4, #0
 800a1b6:	00e3      	lsls	r3, r4, #3
 800a1b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1ba:	4bc9      	ldr	r3, [pc, #804]	; (800a4e0 <__ieee754_pow+0x750>)
 800a1bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a1c0:	ed93 7b00 	vldr	d7, [r3]
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	ec53 2b17 	vmov	r2, r3, d7
 800a1ca:	eeb0 8a47 	vmov.f32	s16, s14
 800a1ce:	eef0 8a67 	vmov.f32	s17, s15
 800a1d2:	4682      	mov	sl, r0
 800a1d4:	f7f6 f860 	bl	8000298 <__aeabi_dsub>
 800a1d8:	4652      	mov	r2, sl
 800a1da:	4606      	mov	r6, r0
 800a1dc:	460f      	mov	r7, r1
 800a1de:	462b      	mov	r3, r5
 800a1e0:	ec51 0b18 	vmov	r0, r1, d8
 800a1e4:	f7f6 f85a 	bl	800029c <__adddf3>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	49bd      	ldr	r1, [pc, #756]	; (800a4e4 <__ieee754_pow+0x754>)
 800a1f0:	f7f6 fb34 	bl	800085c <__aeabi_ddiv>
 800a1f4:	ec41 0b19 	vmov	d9, r0, r1
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	4639      	mov	r1, r7
 800a200:	f7f6 fa02 	bl	8000608 <__aeabi_dmul>
 800a204:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a208:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a20c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a210:	2300      	movs	r3, #0
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a218:	46ab      	mov	fp, r5
 800a21a:	106d      	asrs	r5, r5, #1
 800a21c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a220:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a224:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a228:	2200      	movs	r2, #0
 800a22a:	4640      	mov	r0, r8
 800a22c:	4649      	mov	r1, r9
 800a22e:	4614      	mov	r4, r2
 800a230:	461d      	mov	r5, r3
 800a232:	f7f6 f9e9 	bl	8000608 <__aeabi_dmul>
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4630      	mov	r0, r6
 800a23c:	4639      	mov	r1, r7
 800a23e:	f7f6 f82b 	bl	8000298 <__aeabi_dsub>
 800a242:	ec53 2b18 	vmov	r2, r3, d8
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	4620      	mov	r0, r4
 800a24c:	4629      	mov	r1, r5
 800a24e:	f7f6 f823 	bl	8000298 <__aeabi_dsub>
 800a252:	4602      	mov	r2, r0
 800a254:	460b      	mov	r3, r1
 800a256:	4650      	mov	r0, sl
 800a258:	4659      	mov	r1, fp
 800a25a:	f7f6 f81d 	bl	8000298 <__aeabi_dsub>
 800a25e:	4642      	mov	r2, r8
 800a260:	464b      	mov	r3, r9
 800a262:	f7f6 f9d1 	bl	8000608 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 f813 	bl	8000298 <__aeabi_dsub>
 800a272:	ec53 2b19 	vmov	r2, r3, d9
 800a276:	f7f6 f9c7 	bl	8000608 <__aeabi_dmul>
 800a27a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a27e:	ec41 0b18 	vmov	d8, r0, r1
 800a282:	4610      	mov	r0, r2
 800a284:	4619      	mov	r1, r3
 800a286:	f7f6 f9bf 	bl	8000608 <__aeabi_dmul>
 800a28a:	a37d      	add	r3, pc, #500	; (adr r3, 800a480 <__ieee754_pow+0x6f0>)
 800a28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a290:	4604      	mov	r4, r0
 800a292:	460d      	mov	r5, r1
 800a294:	f7f6 f9b8 	bl	8000608 <__aeabi_dmul>
 800a298:	a37b      	add	r3, pc, #492	; (adr r3, 800a488 <__ieee754_pow+0x6f8>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	f7f5 fffd 	bl	800029c <__adddf3>
 800a2a2:	4622      	mov	r2, r4
 800a2a4:	462b      	mov	r3, r5
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	a379      	add	r3, pc, #484	; (adr r3, 800a490 <__ieee754_pow+0x700>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	f7f5 fff4 	bl	800029c <__adddf3>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	462b      	mov	r3, r5
 800a2b8:	f7f6 f9a6 	bl	8000608 <__aeabi_dmul>
 800a2bc:	a376      	add	r3, pc, #472	; (adr r3, 800a498 <__ieee754_pow+0x708>)
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f5 ffeb 	bl	800029c <__adddf3>
 800a2c6:	4622      	mov	r2, r4
 800a2c8:	462b      	mov	r3, r5
 800a2ca:	f7f6 f99d 	bl	8000608 <__aeabi_dmul>
 800a2ce:	a374      	add	r3, pc, #464	; (adr r3, 800a4a0 <__ieee754_pow+0x710>)
 800a2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d4:	f7f5 ffe2 	bl	800029c <__adddf3>
 800a2d8:	4622      	mov	r2, r4
 800a2da:	462b      	mov	r3, r5
 800a2dc:	f7f6 f994 	bl	8000608 <__aeabi_dmul>
 800a2e0:	a371      	add	r3, pc, #452	; (adr r3, 800a4a8 <__ieee754_pow+0x718>)
 800a2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e6:	f7f5 ffd9 	bl	800029c <__adddf3>
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4606      	mov	r6, r0
 800a2ee:	460f      	mov	r7, r1
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	f7f6 f987 	bl	8000608 <__aeabi_dmul>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4630      	mov	r0, r6
 800a300:	4639      	mov	r1, r7
 800a302:	f7f6 f981 	bl	8000608 <__aeabi_dmul>
 800a306:	4642      	mov	r2, r8
 800a308:	4604      	mov	r4, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	464b      	mov	r3, r9
 800a30e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a312:	f7f5 ffc3 	bl	800029c <__adddf3>
 800a316:	ec53 2b18 	vmov	r2, r3, d8
 800a31a:	f7f6 f975 	bl	8000608 <__aeabi_dmul>
 800a31e:	4622      	mov	r2, r4
 800a320:	462b      	mov	r3, r5
 800a322:	f7f5 ffbb 	bl	800029c <__adddf3>
 800a326:	4642      	mov	r2, r8
 800a328:	4682      	mov	sl, r0
 800a32a:	468b      	mov	fp, r1
 800a32c:	464b      	mov	r3, r9
 800a32e:	4640      	mov	r0, r8
 800a330:	4649      	mov	r1, r9
 800a332:	f7f6 f969 	bl	8000608 <__aeabi_dmul>
 800a336:	4b6c      	ldr	r3, [pc, #432]	; (800a4e8 <__ieee754_pow+0x758>)
 800a338:	2200      	movs	r2, #0
 800a33a:	4606      	mov	r6, r0
 800a33c:	460f      	mov	r7, r1
 800a33e:	f7f5 ffad 	bl	800029c <__adddf3>
 800a342:	4652      	mov	r2, sl
 800a344:	465b      	mov	r3, fp
 800a346:	f7f5 ffa9 	bl	800029c <__adddf3>
 800a34a:	9c04      	ldr	r4, [sp, #16]
 800a34c:	460d      	mov	r5, r1
 800a34e:	4622      	mov	r2, r4
 800a350:	460b      	mov	r3, r1
 800a352:	4640      	mov	r0, r8
 800a354:	4649      	mov	r1, r9
 800a356:	f7f6 f957 	bl	8000608 <__aeabi_dmul>
 800a35a:	4b63      	ldr	r3, [pc, #396]	; (800a4e8 <__ieee754_pow+0x758>)
 800a35c:	4680      	mov	r8, r0
 800a35e:	4689      	mov	r9, r1
 800a360:	2200      	movs	r2, #0
 800a362:	4620      	mov	r0, r4
 800a364:	4629      	mov	r1, r5
 800a366:	f7f5 ff97 	bl	8000298 <__aeabi_dsub>
 800a36a:	4632      	mov	r2, r6
 800a36c:	463b      	mov	r3, r7
 800a36e:	f7f5 ff93 	bl	8000298 <__aeabi_dsub>
 800a372:	4602      	mov	r2, r0
 800a374:	460b      	mov	r3, r1
 800a376:	4650      	mov	r0, sl
 800a378:	4659      	mov	r1, fp
 800a37a:	f7f5 ff8d 	bl	8000298 <__aeabi_dsub>
 800a37e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a382:	f7f6 f941 	bl	8000608 <__aeabi_dmul>
 800a386:	4622      	mov	r2, r4
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
 800a38c:	462b      	mov	r3, r5
 800a38e:	ec51 0b18 	vmov	r0, r1, d8
 800a392:	f7f6 f939 	bl	8000608 <__aeabi_dmul>
 800a396:	4602      	mov	r2, r0
 800a398:	460b      	mov	r3, r1
 800a39a:	4630      	mov	r0, r6
 800a39c:	4639      	mov	r1, r7
 800a39e:	f7f5 ff7d 	bl	800029c <__adddf3>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460f      	mov	r7, r1
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4649      	mov	r1, r9
 800a3ae:	f7f5 ff75 	bl	800029c <__adddf3>
 800a3b2:	9c04      	ldr	r4, [sp, #16]
 800a3b4:	a33e      	add	r3, pc, #248	; (adr r3, 800a4b0 <__ieee754_pow+0x720>)
 800a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	460d      	mov	r5, r1
 800a3be:	f7f6 f923 	bl	8000608 <__aeabi_dmul>
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	ec41 0b18 	vmov	d8, r0, r1
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7f5 ff63 	bl	8000298 <__aeabi_dsub>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	460b      	mov	r3, r1
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f5 ff5d 	bl	8000298 <__aeabi_dsub>
 800a3de:	a336      	add	r3, pc, #216	; (adr r3, 800a4b8 <__ieee754_pow+0x728>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f6 f910 	bl	8000608 <__aeabi_dmul>
 800a3e8:	a335      	add	r3, pc, #212	; (adr r3, 800a4c0 <__ieee754_pow+0x730>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460f      	mov	r7, r1
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	f7f6 f907 	bl	8000608 <__aeabi_dmul>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	4630      	mov	r0, r6
 800a400:	4639      	mov	r1, r7
 800a402:	f7f5 ff4b 	bl	800029c <__adddf3>
 800a406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a408:	4b38      	ldr	r3, [pc, #224]	; (800a4ec <__ieee754_pow+0x75c>)
 800a40a:	4413      	add	r3, r2
 800a40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a410:	f7f5 ff44 	bl	800029c <__adddf3>
 800a414:	4682      	mov	sl, r0
 800a416:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a418:	468b      	mov	fp, r1
 800a41a:	f7f6 f88b 	bl	8000534 <__aeabi_i2d>
 800a41e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a420:	4b33      	ldr	r3, [pc, #204]	; (800a4f0 <__ieee754_pow+0x760>)
 800a422:	4413      	add	r3, r2
 800a424:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a428:	4606      	mov	r6, r0
 800a42a:	460f      	mov	r7, r1
 800a42c:	4652      	mov	r2, sl
 800a42e:	465b      	mov	r3, fp
 800a430:	ec51 0b18 	vmov	r0, r1, d8
 800a434:	f7f5 ff32 	bl	800029c <__adddf3>
 800a438:	4642      	mov	r2, r8
 800a43a:	464b      	mov	r3, r9
 800a43c:	f7f5 ff2e 	bl	800029c <__adddf3>
 800a440:	4632      	mov	r2, r6
 800a442:	463b      	mov	r3, r7
 800a444:	f7f5 ff2a 	bl	800029c <__adddf3>
 800a448:	9c04      	ldr	r4, [sp, #16]
 800a44a:	4632      	mov	r2, r6
 800a44c:	463b      	mov	r3, r7
 800a44e:	4620      	mov	r0, r4
 800a450:	460d      	mov	r5, r1
 800a452:	f7f5 ff21 	bl	8000298 <__aeabi_dsub>
 800a456:	4642      	mov	r2, r8
 800a458:	464b      	mov	r3, r9
 800a45a:	f7f5 ff1d 	bl	8000298 <__aeabi_dsub>
 800a45e:	ec53 2b18 	vmov	r2, r3, d8
 800a462:	f7f5 ff19 	bl	8000298 <__aeabi_dsub>
 800a466:	4602      	mov	r2, r0
 800a468:	460b      	mov	r3, r1
 800a46a:	4650      	mov	r0, sl
 800a46c:	4659      	mov	r1, fp
 800a46e:	e606      	b.n	800a07e <__ieee754_pow+0x2ee>
 800a470:	2401      	movs	r4, #1
 800a472:	e6a0      	b.n	800a1b6 <__ieee754_pow+0x426>
 800a474:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a4c8 <__ieee754_pow+0x738>
 800a478:	e60d      	b.n	800a096 <__ieee754_pow+0x306>
 800a47a:	bf00      	nop
 800a47c:	f3af 8000 	nop.w
 800a480:	4a454eef 	.word	0x4a454eef
 800a484:	3fca7e28 	.word	0x3fca7e28
 800a488:	93c9db65 	.word	0x93c9db65
 800a48c:	3fcd864a 	.word	0x3fcd864a
 800a490:	a91d4101 	.word	0xa91d4101
 800a494:	3fd17460 	.word	0x3fd17460
 800a498:	518f264d 	.word	0x518f264d
 800a49c:	3fd55555 	.word	0x3fd55555
 800a4a0:	db6fabff 	.word	0xdb6fabff
 800a4a4:	3fdb6db6 	.word	0x3fdb6db6
 800a4a8:	33333303 	.word	0x33333303
 800a4ac:	3fe33333 	.word	0x3fe33333
 800a4b0:	e0000000 	.word	0xe0000000
 800a4b4:	3feec709 	.word	0x3feec709
 800a4b8:	dc3a03fd 	.word	0xdc3a03fd
 800a4bc:	3feec709 	.word	0x3feec709
 800a4c0:	145b01f5 	.word	0x145b01f5
 800a4c4:	be3e2fe0 	.word	0xbe3e2fe0
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	3ff00000 	.word	0x3ff00000
 800a4d0:	7ff00000 	.word	0x7ff00000
 800a4d4:	43400000 	.word	0x43400000
 800a4d8:	0003988e 	.word	0x0003988e
 800a4dc:	000bb679 	.word	0x000bb679
 800a4e0:	0800c138 	.word	0x0800c138
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	40080000 	.word	0x40080000
 800a4ec:	0800c158 	.word	0x0800c158
 800a4f0:	0800c148 	.word	0x0800c148
 800a4f4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a7cc <__ieee754_pow+0xa3c>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	f7f5 fecd 	bl	800029c <__adddf3>
 800a502:	4622      	mov	r2, r4
 800a504:	ec41 0b1a 	vmov	d10, r0, r1
 800a508:	462b      	mov	r3, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	4639      	mov	r1, r7
 800a50e:	f7f5 fec3 	bl	8000298 <__aeabi_dsub>
 800a512:	4602      	mov	r2, r0
 800a514:	460b      	mov	r3, r1
 800a516:	ec51 0b1a 	vmov	r0, r1, d10
 800a51a:	f7f6 fb05 	bl	8000b28 <__aeabi_dcmpgt>
 800a51e:	2800      	cmp	r0, #0
 800a520:	f47f adf8 	bne.w	800a114 <__ieee754_pow+0x384>
 800a524:	4aa4      	ldr	r2, [pc, #656]	; (800a7b8 <__ieee754_pow+0xa28>)
 800a526:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a52a:	4293      	cmp	r3, r2
 800a52c:	f340 810b 	ble.w	800a746 <__ieee754_pow+0x9b6>
 800a530:	151b      	asrs	r3, r3, #20
 800a532:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a536:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a53a:	fa4a f303 	asr.w	r3, sl, r3
 800a53e:	445b      	add	r3, fp
 800a540:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a544:	4e9d      	ldr	r6, [pc, #628]	; (800a7bc <__ieee754_pow+0xa2c>)
 800a546:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a54a:	4116      	asrs	r6, r2
 800a54c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a550:	2000      	movs	r0, #0
 800a552:	ea23 0106 	bic.w	r1, r3, r6
 800a556:	f1c2 0214 	rsb	r2, r2, #20
 800a55a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a55e:	fa4a fa02 	asr.w	sl, sl, r2
 800a562:	f1bb 0f00 	cmp.w	fp, #0
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4620      	mov	r0, r4
 800a56c:	4629      	mov	r1, r5
 800a56e:	bfb8      	it	lt
 800a570:	f1ca 0a00 	rsblt	sl, sl, #0
 800a574:	f7f5 fe90 	bl	8000298 <__aeabi_dsub>
 800a578:	ec41 0b19 	vmov	d9, r0, r1
 800a57c:	4642      	mov	r2, r8
 800a57e:	464b      	mov	r3, r9
 800a580:	ec51 0b19 	vmov	r0, r1, d9
 800a584:	f7f5 fe8a 	bl	800029c <__adddf3>
 800a588:	2400      	movs	r4, #0
 800a58a:	a379      	add	r3, pc, #484	; (adr r3, 800a770 <__ieee754_pow+0x9e0>)
 800a58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a590:	4620      	mov	r0, r4
 800a592:	460d      	mov	r5, r1
 800a594:	f7f6 f838 	bl	8000608 <__aeabi_dmul>
 800a598:	ec53 2b19 	vmov	r2, r3, d9
 800a59c:	4606      	mov	r6, r0
 800a59e:	460f      	mov	r7, r1
 800a5a0:	4620      	mov	r0, r4
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	f7f5 fe78 	bl	8000298 <__aeabi_dsub>
 800a5a8:	4602      	mov	r2, r0
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	4640      	mov	r0, r8
 800a5ae:	4649      	mov	r1, r9
 800a5b0:	f7f5 fe72 	bl	8000298 <__aeabi_dsub>
 800a5b4:	a370      	add	r3, pc, #448	; (adr r3, 800a778 <__ieee754_pow+0x9e8>)
 800a5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ba:	f7f6 f825 	bl	8000608 <__aeabi_dmul>
 800a5be:	a370      	add	r3, pc, #448	; (adr r3, 800a780 <__ieee754_pow+0x9f0>)
 800a5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c4:	4680      	mov	r8, r0
 800a5c6:	4689      	mov	r9, r1
 800a5c8:	4620      	mov	r0, r4
 800a5ca:	4629      	mov	r1, r5
 800a5cc:	f7f6 f81c 	bl	8000608 <__aeabi_dmul>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4640      	mov	r0, r8
 800a5d6:	4649      	mov	r1, r9
 800a5d8:	f7f5 fe60 	bl	800029c <__adddf3>
 800a5dc:	4604      	mov	r4, r0
 800a5de:	460d      	mov	r5, r1
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	4630      	mov	r0, r6
 800a5e6:	4639      	mov	r1, r7
 800a5e8:	f7f5 fe58 	bl	800029c <__adddf3>
 800a5ec:	4632      	mov	r2, r6
 800a5ee:	463b      	mov	r3, r7
 800a5f0:	4680      	mov	r8, r0
 800a5f2:	4689      	mov	r9, r1
 800a5f4:	f7f5 fe50 	bl	8000298 <__aeabi_dsub>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	f7f5 fe4a 	bl	8000298 <__aeabi_dsub>
 800a604:	4642      	mov	r2, r8
 800a606:	4606      	mov	r6, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	464b      	mov	r3, r9
 800a60c:	4640      	mov	r0, r8
 800a60e:	4649      	mov	r1, r9
 800a610:	f7f5 fffa 	bl	8000608 <__aeabi_dmul>
 800a614:	a35c      	add	r3, pc, #368	; (adr r3, 800a788 <__ieee754_pow+0x9f8>)
 800a616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61a:	4604      	mov	r4, r0
 800a61c:	460d      	mov	r5, r1
 800a61e:	f7f5 fff3 	bl	8000608 <__aeabi_dmul>
 800a622:	a35b      	add	r3, pc, #364	; (adr r3, 800a790 <__ieee754_pow+0xa00>)
 800a624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a628:	f7f5 fe36 	bl	8000298 <__aeabi_dsub>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	f7f5 ffea 	bl	8000608 <__aeabi_dmul>
 800a634:	a358      	add	r3, pc, #352	; (adr r3, 800a798 <__ieee754_pow+0xa08>)
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	f7f5 fe2f 	bl	800029c <__adddf3>
 800a63e:	4622      	mov	r2, r4
 800a640:	462b      	mov	r3, r5
 800a642:	f7f5 ffe1 	bl	8000608 <__aeabi_dmul>
 800a646:	a356      	add	r3, pc, #344	; (adr r3, 800a7a0 <__ieee754_pow+0xa10>)
 800a648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a64c:	f7f5 fe24 	bl	8000298 <__aeabi_dsub>
 800a650:	4622      	mov	r2, r4
 800a652:	462b      	mov	r3, r5
 800a654:	f7f5 ffd8 	bl	8000608 <__aeabi_dmul>
 800a658:	a353      	add	r3, pc, #332	; (adr r3, 800a7a8 <__ieee754_pow+0xa18>)
 800a65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a65e:	f7f5 fe1d 	bl	800029c <__adddf3>
 800a662:	4622      	mov	r2, r4
 800a664:	462b      	mov	r3, r5
 800a666:	f7f5 ffcf 	bl	8000608 <__aeabi_dmul>
 800a66a:	4602      	mov	r2, r0
 800a66c:	460b      	mov	r3, r1
 800a66e:	4640      	mov	r0, r8
 800a670:	4649      	mov	r1, r9
 800a672:	f7f5 fe11 	bl	8000298 <__aeabi_dsub>
 800a676:	4604      	mov	r4, r0
 800a678:	460d      	mov	r5, r1
 800a67a:	4602      	mov	r2, r0
 800a67c:	460b      	mov	r3, r1
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	f7f5 ffc1 	bl	8000608 <__aeabi_dmul>
 800a686:	2200      	movs	r2, #0
 800a688:	ec41 0b19 	vmov	d9, r0, r1
 800a68c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f5 fe00 	bl	8000298 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	ec51 0b19 	vmov	r0, r1, d9
 800a6a0:	f7f6 f8dc 	bl	800085c <__aeabi_ddiv>
 800a6a4:	4632      	mov	r2, r6
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4640      	mov	r0, r8
 800a6ae:	4649      	mov	r1, r9
 800a6b0:	f7f5 ffaa 	bl	8000608 <__aeabi_dmul>
 800a6b4:	4632      	mov	r2, r6
 800a6b6:	463b      	mov	r3, r7
 800a6b8:	f7f5 fdf0 	bl	800029c <__adddf3>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	4629      	mov	r1, r5
 800a6c4:	f7f5 fde8 	bl	8000298 <__aeabi_dsub>
 800a6c8:	4642      	mov	r2, r8
 800a6ca:	464b      	mov	r3, r9
 800a6cc:	f7f5 fde4 	bl	8000298 <__aeabi_dsub>
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	493a      	ldr	r1, [pc, #232]	; (800a7c0 <__ieee754_pow+0xa30>)
 800a6d6:	2000      	movs	r0, #0
 800a6d8:	f7f5 fdde 	bl	8000298 <__aeabi_dsub>
 800a6dc:	e9cd 0100 	strd	r0, r1, [sp]
 800a6e0:	9b01      	ldr	r3, [sp, #4]
 800a6e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a6e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ea:	da2f      	bge.n	800a74c <__ieee754_pow+0x9bc>
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	ed9d 0b00 	vldr	d0, [sp]
 800a6f2:	f000 f9cd 	bl	800aa90 <scalbn>
 800a6f6:	ec51 0b10 	vmov	r0, r1, d0
 800a6fa:	ec53 2b18 	vmov	r2, r3, d8
 800a6fe:	f7ff bbe0 	b.w	8009ec2 <__ieee754_pow+0x132>
 800a702:	4b30      	ldr	r3, [pc, #192]	; (800a7c4 <__ieee754_pow+0xa34>)
 800a704:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a708:	429e      	cmp	r6, r3
 800a70a:	f77f af0b 	ble.w	800a524 <__ieee754_pow+0x794>
 800a70e:	4b2e      	ldr	r3, [pc, #184]	; (800a7c8 <__ieee754_pow+0xa38>)
 800a710:	440b      	add	r3, r1
 800a712:	4303      	orrs	r3, r0
 800a714:	d00b      	beq.n	800a72e <__ieee754_pow+0x99e>
 800a716:	a326      	add	r3, pc, #152	; (adr r3, 800a7b0 <__ieee754_pow+0xa20>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	ec51 0b18 	vmov	r0, r1, d8
 800a720:	f7f5 ff72 	bl	8000608 <__aeabi_dmul>
 800a724:	a322      	add	r3, pc, #136	; (adr r3, 800a7b0 <__ieee754_pow+0xa20>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7ff bbca 	b.w	8009ec2 <__ieee754_pow+0x132>
 800a72e:	4622      	mov	r2, r4
 800a730:	462b      	mov	r3, r5
 800a732:	f7f5 fdb1 	bl	8000298 <__aeabi_dsub>
 800a736:	4642      	mov	r2, r8
 800a738:	464b      	mov	r3, r9
 800a73a:	f7f6 f9eb 	bl	8000b14 <__aeabi_dcmpge>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f aef0 	beq.w	800a524 <__ieee754_pow+0x794>
 800a744:	e7e7      	b.n	800a716 <__ieee754_pow+0x986>
 800a746:	f04f 0a00 	mov.w	sl, #0
 800a74a:	e717      	b.n	800a57c <__ieee754_pow+0x7ec>
 800a74c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a750:	4619      	mov	r1, r3
 800a752:	e7d2      	b.n	800a6fa <__ieee754_pow+0x96a>
 800a754:	491a      	ldr	r1, [pc, #104]	; (800a7c0 <__ieee754_pow+0xa30>)
 800a756:	2000      	movs	r0, #0
 800a758:	f7ff bb9e 	b.w	8009e98 <__ieee754_pow+0x108>
 800a75c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a760:	f7ff bb9a 	b.w	8009e98 <__ieee754_pow+0x108>
 800a764:	9000      	str	r0, [sp, #0]
 800a766:	f7ff bb76 	b.w	8009e56 <__ieee754_pow+0xc6>
 800a76a:	2100      	movs	r1, #0
 800a76c:	f7ff bb60 	b.w	8009e30 <__ieee754_pow+0xa0>
 800a770:	00000000 	.word	0x00000000
 800a774:	3fe62e43 	.word	0x3fe62e43
 800a778:	fefa39ef 	.word	0xfefa39ef
 800a77c:	3fe62e42 	.word	0x3fe62e42
 800a780:	0ca86c39 	.word	0x0ca86c39
 800a784:	be205c61 	.word	0xbe205c61
 800a788:	72bea4d0 	.word	0x72bea4d0
 800a78c:	3e663769 	.word	0x3e663769
 800a790:	c5d26bf1 	.word	0xc5d26bf1
 800a794:	3ebbbd41 	.word	0x3ebbbd41
 800a798:	af25de2c 	.word	0xaf25de2c
 800a79c:	3f11566a 	.word	0x3f11566a
 800a7a0:	16bebd93 	.word	0x16bebd93
 800a7a4:	3f66c16c 	.word	0x3f66c16c
 800a7a8:	5555553e 	.word	0x5555553e
 800a7ac:	3fc55555 	.word	0x3fc55555
 800a7b0:	c2f8f359 	.word	0xc2f8f359
 800a7b4:	01a56e1f 	.word	0x01a56e1f
 800a7b8:	3fe00000 	.word	0x3fe00000
 800a7bc:	000fffff 	.word	0x000fffff
 800a7c0:	3ff00000 	.word	0x3ff00000
 800a7c4:	4090cbff 	.word	0x4090cbff
 800a7c8:	3f6f3400 	.word	0x3f6f3400
 800a7cc:	652b82fe 	.word	0x652b82fe
 800a7d0:	3c971547 	.word	0x3c971547

0800a7d4 <__ieee754_sqrt>:
 800a7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d8:	ec55 4b10 	vmov	r4, r5, d0
 800a7dc:	4e56      	ldr	r6, [pc, #344]	; (800a938 <__ieee754_sqrt+0x164>)
 800a7de:	43ae      	bics	r6, r5
 800a7e0:	ee10 0a10 	vmov	r0, s0
 800a7e4:	ee10 3a10 	vmov	r3, s0
 800a7e8:	4629      	mov	r1, r5
 800a7ea:	462a      	mov	r2, r5
 800a7ec:	d110      	bne.n	800a810 <__ieee754_sqrt+0x3c>
 800a7ee:	ee10 2a10 	vmov	r2, s0
 800a7f2:	462b      	mov	r3, r5
 800a7f4:	f7f5 ff08 	bl	8000608 <__aeabi_dmul>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	460b      	mov	r3, r1
 800a7fc:	4620      	mov	r0, r4
 800a7fe:	4629      	mov	r1, r5
 800a800:	f7f5 fd4c 	bl	800029c <__adddf3>
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	ec45 4b10 	vmov	d0, r4, r5
 800a80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a810:	2d00      	cmp	r5, #0
 800a812:	dc10      	bgt.n	800a836 <__ieee754_sqrt+0x62>
 800a814:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a818:	4330      	orrs	r0, r6
 800a81a:	d0f5      	beq.n	800a808 <__ieee754_sqrt+0x34>
 800a81c:	b15d      	cbz	r5, 800a836 <__ieee754_sqrt+0x62>
 800a81e:	ee10 2a10 	vmov	r2, s0
 800a822:	462b      	mov	r3, r5
 800a824:	ee10 0a10 	vmov	r0, s0
 800a828:	f7f5 fd36 	bl	8000298 <__aeabi_dsub>
 800a82c:	4602      	mov	r2, r0
 800a82e:	460b      	mov	r3, r1
 800a830:	f7f6 f814 	bl	800085c <__aeabi_ddiv>
 800a834:	e7e6      	b.n	800a804 <__ieee754_sqrt+0x30>
 800a836:	1509      	asrs	r1, r1, #20
 800a838:	d076      	beq.n	800a928 <__ieee754_sqrt+0x154>
 800a83a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a83e:	07ce      	lsls	r6, r1, #31
 800a840:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a844:	bf5e      	ittt	pl
 800a846:	0fda      	lsrpl	r2, r3, #31
 800a848:	005b      	lslpl	r3, r3, #1
 800a84a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a84e:	0fda      	lsrs	r2, r3, #31
 800a850:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a854:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a858:	2000      	movs	r0, #0
 800a85a:	106d      	asrs	r5, r5, #1
 800a85c:	005b      	lsls	r3, r3, #1
 800a85e:	f04f 0e16 	mov.w	lr, #22
 800a862:	4684      	mov	ip, r0
 800a864:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a868:	eb0c 0401 	add.w	r4, ip, r1
 800a86c:	4294      	cmp	r4, r2
 800a86e:	bfde      	ittt	le
 800a870:	1b12      	suble	r2, r2, r4
 800a872:	eb04 0c01 	addle.w	ip, r4, r1
 800a876:	1840      	addle	r0, r0, r1
 800a878:	0052      	lsls	r2, r2, #1
 800a87a:	f1be 0e01 	subs.w	lr, lr, #1
 800a87e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a882:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a886:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a88a:	d1ed      	bne.n	800a868 <__ieee754_sqrt+0x94>
 800a88c:	4671      	mov	r1, lr
 800a88e:	2720      	movs	r7, #32
 800a890:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a894:	4562      	cmp	r2, ip
 800a896:	eb04 060e 	add.w	r6, r4, lr
 800a89a:	dc02      	bgt.n	800a8a2 <__ieee754_sqrt+0xce>
 800a89c:	d113      	bne.n	800a8c6 <__ieee754_sqrt+0xf2>
 800a89e:	429e      	cmp	r6, r3
 800a8a0:	d811      	bhi.n	800a8c6 <__ieee754_sqrt+0xf2>
 800a8a2:	2e00      	cmp	r6, #0
 800a8a4:	eb06 0e04 	add.w	lr, r6, r4
 800a8a8:	da43      	bge.n	800a932 <__ieee754_sqrt+0x15e>
 800a8aa:	f1be 0f00 	cmp.w	lr, #0
 800a8ae:	db40      	blt.n	800a932 <__ieee754_sqrt+0x15e>
 800a8b0:	f10c 0801 	add.w	r8, ip, #1
 800a8b4:	eba2 020c 	sub.w	r2, r2, ip
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	bf88      	it	hi
 800a8bc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a8c0:	1b9b      	subs	r3, r3, r6
 800a8c2:	4421      	add	r1, r4
 800a8c4:	46c4      	mov	ip, r8
 800a8c6:	0052      	lsls	r2, r2, #1
 800a8c8:	3f01      	subs	r7, #1
 800a8ca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a8ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a8d2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8d6:	d1dd      	bne.n	800a894 <__ieee754_sqrt+0xc0>
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	d006      	beq.n	800a8ea <__ieee754_sqrt+0x116>
 800a8dc:	1c4c      	adds	r4, r1, #1
 800a8de:	bf13      	iteet	ne
 800a8e0:	3101      	addne	r1, #1
 800a8e2:	3001      	addeq	r0, #1
 800a8e4:	4639      	moveq	r1, r7
 800a8e6:	f021 0101 	bicne.w	r1, r1, #1
 800a8ea:	1043      	asrs	r3, r0, #1
 800a8ec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a8f0:	0849      	lsrs	r1, r1, #1
 800a8f2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a8f6:	07c2      	lsls	r2, r0, #31
 800a8f8:	bf48      	it	mi
 800a8fa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a8fe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a902:	460c      	mov	r4, r1
 800a904:	463d      	mov	r5, r7
 800a906:	e77f      	b.n	800a808 <__ieee754_sqrt+0x34>
 800a908:	0ada      	lsrs	r2, r3, #11
 800a90a:	3815      	subs	r0, #21
 800a90c:	055b      	lsls	r3, r3, #21
 800a90e:	2a00      	cmp	r2, #0
 800a910:	d0fa      	beq.n	800a908 <__ieee754_sqrt+0x134>
 800a912:	02d7      	lsls	r7, r2, #11
 800a914:	d50a      	bpl.n	800a92c <__ieee754_sqrt+0x158>
 800a916:	f1c1 0420 	rsb	r4, r1, #32
 800a91a:	fa23 f404 	lsr.w	r4, r3, r4
 800a91e:	1e4d      	subs	r5, r1, #1
 800a920:	408b      	lsls	r3, r1
 800a922:	4322      	orrs	r2, r4
 800a924:	1b41      	subs	r1, r0, r5
 800a926:	e788      	b.n	800a83a <__ieee754_sqrt+0x66>
 800a928:	4608      	mov	r0, r1
 800a92a:	e7f0      	b.n	800a90e <__ieee754_sqrt+0x13a>
 800a92c:	0052      	lsls	r2, r2, #1
 800a92e:	3101      	adds	r1, #1
 800a930:	e7ef      	b.n	800a912 <__ieee754_sqrt+0x13e>
 800a932:	46e0      	mov	r8, ip
 800a934:	e7be      	b.n	800a8b4 <__ieee754_sqrt+0xe0>
 800a936:	bf00      	nop
 800a938:	7ff00000 	.word	0x7ff00000

0800a93c <fabs>:
 800a93c:	ec51 0b10 	vmov	r0, r1, d0
 800a940:	ee10 2a10 	vmov	r2, s0
 800a944:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a948:	ec43 2b10 	vmov	d0, r2, r3
 800a94c:	4770      	bx	lr

0800a94e <finite>:
 800a94e:	b082      	sub	sp, #8
 800a950:	ed8d 0b00 	vstr	d0, [sp]
 800a954:	9801      	ldr	r0, [sp, #4]
 800a956:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a95a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a95e:	0fc0      	lsrs	r0, r0, #31
 800a960:	b002      	add	sp, #8
 800a962:	4770      	bx	lr
 800a964:	0000      	movs	r0, r0
	...

0800a968 <nan>:
 800a968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a970 <nan+0x8>
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	00000000 	.word	0x00000000
 800a974:	7ff80000 	.word	0x7ff80000

0800a978 <rint>:
 800a978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a97a:	ec51 0b10 	vmov	r0, r1, d0
 800a97e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a982:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a986:	2e13      	cmp	r6, #19
 800a988:	ee10 4a10 	vmov	r4, s0
 800a98c:	460b      	mov	r3, r1
 800a98e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a992:	dc58      	bgt.n	800aa46 <rint+0xce>
 800a994:	2e00      	cmp	r6, #0
 800a996:	da2b      	bge.n	800a9f0 <rint+0x78>
 800a998:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a99c:	4302      	orrs	r2, r0
 800a99e:	d023      	beq.n	800a9e8 <rint+0x70>
 800a9a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a9a4:	4302      	orrs	r2, r0
 800a9a6:	4254      	negs	r4, r2
 800a9a8:	4314      	orrs	r4, r2
 800a9aa:	0c4b      	lsrs	r3, r1, #17
 800a9ac:	0b24      	lsrs	r4, r4, #12
 800a9ae:	045b      	lsls	r3, r3, #17
 800a9b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a9b4:	ea44 0103 	orr.w	r1, r4, r3
 800a9b8:	4b32      	ldr	r3, [pc, #200]	; (800aa84 <rint+0x10c>)
 800a9ba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a9be:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fc67 	bl	800029c <__adddf3>
 800a9ce:	e9cd 0100 	strd	r0, r1, [sp]
 800a9d2:	463b      	mov	r3, r7
 800a9d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a9d8:	4632      	mov	r2, r6
 800a9da:	f7f5 fc5d 	bl	8000298 <__aeabi_dsub>
 800a9de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a9e6:	4639      	mov	r1, r7
 800a9e8:	ec41 0b10 	vmov	d0, r0, r1
 800a9ec:	b003      	add	sp, #12
 800a9ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f0:	4a25      	ldr	r2, [pc, #148]	; (800aa88 <rint+0x110>)
 800a9f2:	4132      	asrs	r2, r6
 800a9f4:	ea01 0702 	and.w	r7, r1, r2
 800a9f8:	4307      	orrs	r7, r0
 800a9fa:	d0f5      	beq.n	800a9e8 <rint+0x70>
 800a9fc:	0851      	lsrs	r1, r2, #1
 800a9fe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800aa02:	4314      	orrs	r4, r2
 800aa04:	d00c      	beq.n	800aa20 <rint+0xa8>
 800aa06:	ea23 0201 	bic.w	r2, r3, r1
 800aa0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa0e:	2e13      	cmp	r6, #19
 800aa10:	fa43 f606 	asr.w	r6, r3, r6
 800aa14:	bf0c      	ite	eq
 800aa16:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800aa1a:	2400      	movne	r4, #0
 800aa1c:	ea42 0306 	orr.w	r3, r2, r6
 800aa20:	4918      	ldr	r1, [pc, #96]	; (800aa84 <rint+0x10c>)
 800aa22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800aa26:	4622      	mov	r2, r4
 800aa28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	4629      	mov	r1, r5
 800aa30:	f7f5 fc34 	bl	800029c <__adddf3>
 800aa34:	e9cd 0100 	strd	r0, r1, [sp]
 800aa38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	462b      	mov	r3, r5
 800aa40:	f7f5 fc2a 	bl	8000298 <__aeabi_dsub>
 800aa44:	e7d0      	b.n	800a9e8 <rint+0x70>
 800aa46:	2e33      	cmp	r6, #51	; 0x33
 800aa48:	dd07      	ble.n	800aa5a <rint+0xe2>
 800aa4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aa4e:	d1cb      	bne.n	800a9e8 <rint+0x70>
 800aa50:	ee10 2a10 	vmov	r2, s0
 800aa54:	f7f5 fc22 	bl	800029c <__adddf3>
 800aa58:	e7c6      	b.n	800a9e8 <rint+0x70>
 800aa5a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800aa5e:	f04f 36ff 	mov.w	r6, #4294967295
 800aa62:	40d6      	lsrs	r6, r2
 800aa64:	4230      	tst	r0, r6
 800aa66:	d0bf      	beq.n	800a9e8 <rint+0x70>
 800aa68:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800aa6c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800aa70:	bf1f      	itttt	ne
 800aa72:	ea24 0101 	bicne.w	r1, r4, r1
 800aa76:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800aa7a:	fa44 f202 	asrne.w	r2, r4, r2
 800aa7e:	ea41 0402 	orrne.w	r4, r1, r2
 800aa82:	e7cd      	b.n	800aa20 <rint+0xa8>
 800aa84:	0800c168 	.word	0x0800c168
 800aa88:	000fffff 	.word	0x000fffff
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <scalbn>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	ec55 4b10 	vmov	r4, r5, d0
 800aa96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	b99a      	cbnz	r2, 800aac8 <scalbn+0x38>
 800aaa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaa4:	4323      	orrs	r3, r4
 800aaa6:	d036      	beq.n	800ab16 <scalbn+0x86>
 800aaa8:	4b39      	ldr	r3, [pc, #228]	; (800ab90 <scalbn+0x100>)
 800aaaa:	4629      	mov	r1, r5
 800aaac:	ee10 0a10 	vmov	r0, s0
 800aab0:	2200      	movs	r2, #0
 800aab2:	f7f5 fda9 	bl	8000608 <__aeabi_dmul>
 800aab6:	4b37      	ldr	r3, [pc, #220]	; (800ab94 <scalbn+0x104>)
 800aab8:	429e      	cmp	r6, r3
 800aaba:	4604      	mov	r4, r0
 800aabc:	460d      	mov	r5, r1
 800aabe:	da10      	bge.n	800aae2 <scalbn+0x52>
 800aac0:	a32b      	add	r3, pc, #172	; (adr r3, 800ab70 <scalbn+0xe0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	e03a      	b.n	800ab3e <scalbn+0xae>
 800aac8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800aacc:	428a      	cmp	r2, r1
 800aace:	d10c      	bne.n	800aaea <scalbn+0x5a>
 800aad0:	ee10 2a10 	vmov	r2, s0
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fbe0 	bl	800029c <__adddf3>
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	e019      	b.n	800ab16 <scalbn+0x86>
 800aae2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aae6:	460b      	mov	r3, r1
 800aae8:	3a36      	subs	r2, #54	; 0x36
 800aaea:	4432      	add	r2, r6
 800aaec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800aaf0:	428a      	cmp	r2, r1
 800aaf2:	dd08      	ble.n	800ab06 <scalbn+0x76>
 800aaf4:	2d00      	cmp	r5, #0
 800aaf6:	a120      	add	r1, pc, #128	; (adr r1, 800ab78 <scalbn+0xe8>)
 800aaf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafc:	da1c      	bge.n	800ab38 <scalbn+0xa8>
 800aafe:	a120      	add	r1, pc, #128	; (adr r1, 800ab80 <scalbn+0xf0>)
 800ab00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab04:	e018      	b.n	800ab38 <scalbn+0xa8>
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	dd08      	ble.n	800ab1c <scalbn+0x8c>
 800ab0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab16:	ec45 4b10 	vmov	d0, r4, r5
 800ab1a:	bd70      	pop	{r4, r5, r6, pc}
 800ab1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab20:	da19      	bge.n	800ab56 <scalbn+0xc6>
 800ab22:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ab26:	429e      	cmp	r6, r3
 800ab28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800ab2c:	dd0a      	ble.n	800ab44 <scalbn+0xb4>
 800ab2e:	a112      	add	r1, pc, #72	; (adr r1, 800ab78 <scalbn+0xe8>)
 800ab30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e2      	bne.n	800aafe <scalbn+0x6e>
 800ab38:	a30f      	add	r3, pc, #60	; (adr r3, 800ab78 <scalbn+0xe8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd63 	bl	8000608 <__aeabi_dmul>
 800ab42:	e7cb      	b.n	800aadc <scalbn+0x4c>
 800ab44:	a10a      	add	r1, pc, #40	; (adr r1, 800ab70 <scalbn+0xe0>)
 800ab46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d0b8      	beq.n	800aac0 <scalbn+0x30>
 800ab4e:	a10e      	add	r1, pc, #56	; (adr r1, 800ab88 <scalbn+0xf8>)
 800ab50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab54:	e7b4      	b.n	800aac0 <scalbn+0x30>
 800ab56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab5a:	3236      	adds	r2, #54	; 0x36
 800ab5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ab64:	4620      	mov	r0, r4
 800ab66:	4b0c      	ldr	r3, [pc, #48]	; (800ab98 <scalbn+0x108>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	e7e8      	b.n	800ab3e <scalbn+0xae>
 800ab6c:	f3af 8000 	nop.w
 800ab70:	c2f8f359 	.word	0xc2f8f359
 800ab74:	01a56e1f 	.word	0x01a56e1f
 800ab78:	8800759c 	.word	0x8800759c
 800ab7c:	7e37e43c 	.word	0x7e37e43c
 800ab80:	8800759c 	.word	0x8800759c
 800ab84:	fe37e43c 	.word	0xfe37e43c
 800ab88:	c2f8f359 	.word	0xc2f8f359
 800ab8c:	81a56e1f 	.word	0x81a56e1f
 800ab90:	43500000 	.word	0x43500000
 800ab94:	ffff3cb0 	.word	0xffff3cb0
 800ab98:	3c900000 	.word	0x3c900000

0800ab9c <_init>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr

0800aba8 <_fini>:
 800aba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abaa:	bf00      	nop
 800abac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abae:	bc08      	pop	{r3}
 800abb0:	469e      	mov	lr, r3
 800abb2:	4770      	bx	lr
